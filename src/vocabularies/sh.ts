// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/ns/shacl#');

/**
 * [sh](http://www.w3.org/ns/shacl#})
 */
const sh = {
  /**
    * **[declare](http://www.w3.org/ns/shacl#declare)** (property)
    * 
    * Links a resource with its namespace prefix declarations.
    */
    declare: prefixer('declare'),

    /**
    * **[suggested shapes graph](http://www.w3.org/ns/shacl#suggestedShapesGraph)** (property)
    * 
    * Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements.
    */
    suggestedShapesGraph: prefixer('suggestedShapesGraph'),

    /**
    * **[path](http://www.w3.org/ns/shacl#path)** (property)
    * 
    * Specifies the property path of a property shape.
    */
    path: prefixer('path'),

    /**
    * **[and](http://www.w3.org/ns/shacl#and)** (property)
    * 
    * RDF list of shapes to validate the value nodes against.
    */
    and: prefixer('and'),

    /**
    * **[parameter](http://www.w3.org/ns/shacl#parameter)** (property)
    * 
    * The parameters of a function or constraint component.
    */
    parameter: prefixer('parameter'),

    /**
    * **[node kind](http://www.w3.org/ns/shacl#nodeKind)** (property)
    * 
    * Specifies the node kind (e.g. IRI or literal) each value node.
    */
    nodeKind: prefixer('nodeKind'),

    /**
    * **[class](http://www.w3.org/ns/shacl#class)** (property)
    * 
    * The type that all value nodes must have.
    */
    class: prefixer('class'),

    /**
    * **[datatype](http://www.w3.org/ns/shacl#datatype)** (property)
    * 
    * Specifies an RDF datatype that all value nodes must have.
    */
    datatype: prefixer('datatype'),

    /**
    * **[closed](http://www.w3.org/ns/shacl#closed)** (property)
    * 
    * If set to true then the shape is closed.
    */
    closed: prefixer('closed'),

    /**
    * **[optional](http://www.w3.org/ns/shacl#optional)** (property)
    * 
    * Indicates whether a parameter is optional.
    */
    optional: prefixer('optional'),

    /**
    * **[ignored properties](http://www.w3.org/ns/shacl#ignoredProperties)** (property)
    * 
    * An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path.
    */
    ignoredProperties: prefixer('ignoredProperties'),

    /**
    * **[property](http://www.w3.org/ns/shacl#property)** (property)
    * 
    * Links a shape to its property shapes.
    */
    property: prefixer('property'),

    /**
    * **[target subjects of](http://www.w3.org/ns/shacl#targetSubjectsOf)** (property)
    * 
    * Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape.
    */
    targetSubjectsOf: prefixer('targetSubjectsOf'),

    /**
    * **[max count](http://www.w3.org/ns/shacl#maxCount)** (property)
    * 
    * Specifies the maximum number of values in the set of value nodes.
    */
    maxCount: prefixer('maxCount'),

    /**
    * **[disjoint](http://www.w3.org/ns/shacl#disjoint)** (property)
    * 
    * Specifies a property where the set of values must be disjoint with the value nodes.
    */
    disjoint: prefixer('disjoint'),

    /**
    * **[equals](http://www.w3.org/ns/shacl#equals)** (property)
    * 
    * Specifies a property that must have the same values as the value nodes.
    */
    equals: prefixer('equals'),

    /**
    * **[Abstract result](http://www.w3.org/ns/shacl#AbstractResult)** (class)
    * 
    * The base class of validation results, typically not instantiated directly.
    */
    AbstractResult: prefixer('AbstractResult'),

    /**
    * **[Parameter](http://www.w3.org/ns/shacl#Parameter)** (class)
    * 
    * The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics.
    */
    Parameter: prefixer('Parameter'),

    /**
    * **[expression](http://www.w3.org/ns/shacl#expression)** (property)
    * 
    * The node expression that must return true for the value nodes.
    */
    expression: prefixer('expression'),

    /**
    * **[Constraint component](http://www.w3.org/ns/shacl#ConstraintComponent)** (class)
    * 
    * The class of constraint components.
    */
    ConstraintComponent: prefixer('ConstraintComponent'),

    /**
    * **[filter shape](http://www.w3.org/ns/shacl#filterShape)** (property)
    * 
    * The shape that all input nodes of the expression need to conform to.
    */
    filterShape: prefixer('filterShape'),

    /**
    * **[Node kind](http://www.w3.org/ns/shacl#NodeKind)** (class)
    * 
    * The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral.
    */
    NodeKind: prefixer('NodeKind'),

    /**
    * **[Parameterizable](http://www.w3.org/ns/shacl#Parameterizable)** (class)
    * 
    * Superclass of components that can take parameters, especially functions and constraint components.
    */
    Parameterizable: prefixer('Parameterizable'),

    /**
    * **[has value](http://www.w3.org/ns/shacl#hasValue)** (property)
    * 
    * Specifies a value that must be among the value nodes.
    */
    hasValue: prefixer('hasValue'),

    /**
    * **[Node shape](http://www.w3.org/ns/shacl#NodeShape)** (class)
    * 
    * A node shape is a shape that specifies constraint that need to be met with respect to focus nodes.
    */
    NodeShape: prefixer('NodeShape'),

    /**
    * **[Function](http://www.w3.org/ns/shacl#Function)** (class)
    * 
    * The class of SHACL functions.
    */
    Function: prefixer('Function'),

    /**
    * **[Severity](http://www.w3.org/ns/shacl#Severity)** (class)
    * 
    * The class of validation result severity levels, including violation and warning levels.
    */
    Severity: prefixer('Severity'),

    /**
    * **[JavaScript-based constraint](http://www.w3.org/ns/shacl#JSConstraint)** (class)
    * 
    * The class of constraints backed by a JavaScript function.
    */
    JSConstraint: prefixer('JSConstraint'),

    /**
    * **[in](http://www.w3.org/ns/shacl#in)** (property)
    * 
    * Specifies a list of allowed values so that each value node must be among the members of the given list.
    */
    in: prefixer('in'),

    /**
    * **[JavaScript executable](http://www.w3.org/ns/shacl#JSExecutable)** (class)
    * 
    * Abstract base class of resources that declare an executable JavaScript.
    */
    JSExecutable: prefixer('JSExecutable'),

    /**
    * **[intersection](http://www.w3.org/ns/shacl#intersection)** (property)
    * 
    * A list of node expressions that shall be intersected.
    */
    intersection: prefixer('intersection'),

    /**
    * **[JavaScript function](http://www.w3.org/ns/shacl#JSFunction)** (class)
    * 
    * The class of SHACL functions that execute a JavaScript function when called.
    */
    JSFunction: prefixer('JSFunction'),

    /**
    * **[JavaScript constraint](http://www.w3.org/ns/shacl#js)** (property)
    * 
    * Constraints expressed in JavaScript.
    */
    js: prefixer('js'),

    /**
    * **[JavaScript library](http://www.w3.org/ns/shacl#JSLibrary)** (class)
    * 
    * Represents a JavaScript library, typically identified by one or more URLs of files to include.
    */
    JSLibrary: prefixer('JSLibrary'),

    /**
    * **[language in](http://www.w3.org/ns/shacl#languageIn)** (property)
    * 
    * Specifies a list of language tags that all value nodes must have.
    */
    languageIn: prefixer('languageIn'),

    /**
    * **[JavaScript rule](http://www.w3.org/ns/shacl#JSRule)** (class)
    * 
    * The class of SHACL rules expressed using JavaScript.
    */
    JSRule: prefixer('JSRule'),

    /**
    * **[less than](http://www.w3.org/ns/shacl#lessThan)** (property)
    * 
    * Specifies a property that must have smaller values than the value nodes.
    */
    lessThan: prefixer('lessThan'),

    /**
    * **[Rule](http://www.w3.org/ns/shacl#Rule)** (class)
    * 
    * The class of SHACL rules. Never instantiated directly.
    */
    Rule: prefixer('Rule'),

    /**
    * **[less than or equals](http://www.w3.org/ns/shacl#lessThanOrEquals)** (property)
    * 
    * Specifies a property that must have smaller or equal values than the value nodes.
    */
    lessThanOrEquals: prefixer('lessThanOrEquals'),

    /**
    * **[JavaScript target](http://www.w3.org/ns/shacl#JSTarget)** (class)
    * 
    * The class of targets that are based on JavaScript functions.
    */
    JSTarget: prefixer('JSTarget'),

    /**
    * **[Target](http://www.w3.org/ns/shacl#Target)** (class)
    * 
    * The base class of targets such as those based on SPARQL queries.
    */
    Target: prefixer('Target'),

    /**
    * **[max exclusive](http://www.w3.org/ns/shacl#maxExclusive)** (property)
    * 
    * Specifies the maximum exclusive value of each value node.
    */
    maxExclusive: prefixer('maxExclusive'),

    /**
    * **[JavaScript target type](http://www.w3.org/ns/shacl#JSTargetType)** (class)
    * 
    * The (meta) class for parameterizable targets that are based on JavaScript functions.
    */
    JSTargetType: prefixer('JSTargetType'),

    /**
    * **[Target type](http://www.w3.org/ns/shacl#TargetType)** (class)
    * 
    * The (meta) class for parameterizable targets.	Instances of this are instantiated as values of the sh:target property.
    */
    TargetType: prefixer('TargetType'),

    /**
    * **[max inclusive](http://www.w3.org/ns/shacl#maxInclusive)** (property)
    * 
    * Specifies the maximum inclusive value of each value node.
    */
    maxInclusive: prefixer('maxInclusive'),

    /**
    * **[JavaScript validator](http://www.w3.org/ns/shacl#JSValidator)** (class)
    * 
    * A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used.
    */
    JSValidator: prefixer('JSValidator'),

    /**
    * **[max length](http://www.w3.org/ns/shacl#maxLength)** (property)
    * 
    * Specifies the maximum string length of each value node.
    */
    maxLength: prefixer('maxLength'),

    /**
    * **[Validator](http://www.w3.org/ns/shacl#Validator)** (class)
    * 
    * The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations.
    */
    Validator: prefixer('Validator'),

    /**
    * **[min count](http://www.w3.org/ns/shacl#minCount)** (property)
    * 
    * Specifies the minimum number of values in the set of value nodes.
    */
    minCount: prefixer('minCount'),

    /**
    * **[Shape](http://www.w3.org/ns/shacl#Shape)** (class)
    * 
    * A shape is a collection of constraints that may be targeted for certain nodes.
    */
    Shape: prefixer('Shape'),

    /**
    * **[min exclusive](http://www.w3.org/ns/shacl#minExclusive)** (property)
    * 
    * Specifies the minimum exclusive value of each value node.
    */
    minExclusive: prefixer('minExclusive'),

    /**
    * **[Property shape](http://www.w3.org/ns/shacl#PropertyShape)** (class)
    * 
    * A property shape is a shape that specifies constraints on the values of a focus node for a given property or path.
    */
    PropertyShape: prefixer('PropertyShape'),

    /**
    * **[Prefix declaration](http://www.w3.org/ns/shacl#PrefixDeclaration)** (class)
    * 
    * The class of prefix declarations, consisting of pairs of a prefix with a namespace.
    */
    PrefixDeclaration: prefixer('PrefixDeclaration'),

    /**
    * **[min inclusive](http://www.w3.org/ns/shacl#minInclusive)** (property)
    * 
    * Specifies the minimum inclusive value of each value node.
    */
    minInclusive: prefixer('minInclusive'),

    /**
    * **[Property group](http://www.w3.org/ns/shacl#PropertyGroup)** (class)
    * 
    * Instances of this class represent groups of property shapes that belong together.
    */
    PropertyGroup: prefixer('PropertyGroup'),

    /**
    * **[min length](http://www.w3.org/ns/shacl#minLength)** (property)
    * 
    * Specifies the minimum string length of each value node.
    */
    minLength: prefixer('minLength'),

    /**
    * **[Result annotation](http://www.w3.org/ns/shacl#ResultAnnotation)** (class)
    * 
    * A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result.
    */
    ResultAnnotation: prefixer('ResultAnnotation'),

    /**
    * **[SPARQL ASK executable](http://www.w3.org/ns/shacl#SPARQLAskExecutable)** (class)
    * 
    * The class of SPARQL executables that are based on an ASK query.
    */
    SPARQLAskExecutable: prefixer('SPARQLAskExecutable'),

    /**
    * **[node](http://www.w3.org/ns/shacl#node)** (property)
    * 
    * Specifies the node shape that all value nodes must conform to.
    */
    node: prefixer('node'),

    /**
    * **[SPARQL executable](http://www.w3.org/ns/shacl#SPARQLExecutable)** (class)
    * 
    * The class of resources that encapsulate a SPARQL query.
    */
    SPARQLExecutable: prefixer('SPARQLExecutable'),

    /**
    * **[target objects of](http://www.w3.org/ns/shacl#targetObjectsOf)** (property)
    * 
    * Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape.
    */
    targetObjectsOf: prefixer('targetObjectsOf'),

    /**
    * **[SPARQL ASK validator](http://www.w3.org/ns/shacl#SPARQLAskValidator)** (class)
    * 
    * The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms.
    */
    SPARQLAskValidator: prefixer('SPARQLAskValidator'),

    /**
    * **[SPARQL constraint](http://www.w3.org/ns/shacl#SPARQLConstraint)** (class)
    * 
    * The class of constraints based on SPARQL SELECT queries.
    */
    SPARQLConstraint: prefixer('SPARQLConstraint'),

    /**
    * **[exactly one](http://www.w3.org/ns/shacl#xone)** (property)
    * 
    * Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes.
    */
    xone: prefixer('xone'),

    /**
    * **[SPARQL SELECT executable](http://www.w3.org/ns/shacl#SPARQLSelectExecutable)** (class)
    * 
    * The class of SPARQL executables based on a SELECT query.
    */
    SPARQLSelectExecutable: prefixer('SPARQLSelectExecutable'),

    /**
    * **[not](http://www.w3.org/ns/shacl#not)** (property)
    * 
    * Specifies a shape that the value nodes must not conform to.
    */
    not: prefixer('not'),

    /**
    * **[SPARQL CONSTRUCT executable](http://www.w3.org/ns/shacl#SPARQLConstructExecutable)** (class)
    * 
    * The class of SPARQL executables that are based on a CONSTRUCT query.
    */
    SPARQLConstructExecutable: prefixer('SPARQLConstructExecutable'),

    /**
    * **[SPARQL function](http://www.w3.org/ns/shacl#SPARQLFunction)** (class)
    * 
    * A function backed by a SPARQL query - either ASK or SELECT.
    */
    SPARQLFunction: prefixer('SPARQLFunction'),

    /**
    * **[or](http://www.w3.org/ns/shacl#or)** (property)
    * 
    * Specifies a list of shapes so that the value nodes must conform to at least one of the shapes.
    */
    or: prefixer('or'),

    /**
    * **[SPARQL CONSTRUCT rule](http://www.w3.org/ns/shacl#SPARQLRule)** (class)
    * 
    * The class of SHACL rules based on SPARQL CONSTRUCT queries.
    */
    SPARQLRule: prefixer('SPARQLRule'),

    /**
    * **[SPARQL SELECT validator](http://www.w3.org/ns/shacl#SPARQLSelectValidator)** (class)
    * 
    * The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform.
    */
    SPARQLSelectValidator: prefixer('SPARQLSelectValidator'),

    /**
    * **[flags](http://www.w3.org/ns/shacl#flags)** (property)
    * 
    * An optional flag to be used with regular expression pattern matching.
    */
    flags: prefixer('flags'),

    /**
    * **[SPARQL target](http://www.w3.org/ns/shacl#SPARQLTarget)** (class)
    * 
    * The class of targets that are based on SPARQL queries.
    */
    SPARQLTarget: prefixer('SPARQLTarget'),

    /**
    * **[pattern](http://www.w3.org/ns/shacl#pattern)** (property)
    * 
    * Specifies a regular expression pattern that the string representations of the value nodes must match.
    */
    pattern: prefixer('pattern'),

    /**
    * **[SPARQL target type](http://www.w3.org/ns/shacl#SPARQLTargetType)** (class)
    * 
    * The (meta) class for parameterizable targets that are based on SPARQL queries.
    */
    SPARQLTargetType: prefixer('SPARQLTargetType'),

    /**
    * **[qualified max count](http://www.w3.org/ns/shacl#qualifiedMaxCount)** (property)
    * 
    * The maximum number of value nodes that can conform to the shape.
    */
    qualifiedMaxCount: prefixer('qualifiedMaxCount'),

    /**
    * **[SPARQL UPDATE executable](http://www.w3.org/ns/shacl#SPARQLUpdateExecutable)** (class)
    * 
    * The class of SPARQL executables based on a SPARQL UPDATE.
    */
    SPARQLUpdateExecutable: prefixer('SPARQLUpdateExecutable'),

    /**
    * **[qualified value shape](http://www.w3.org/ns/shacl#qualifiedValueShape)** (property)
    * 
    * The shape that a specified number of values must conform to.
    */
    qualifiedValueShape: prefixer('qualifiedValueShape'),

    /**
    * **[qualified value shapes disjoint](http://www.w3.org/ns/shacl#qualifiedValueShapesDisjoint)** (property)
    * 
    * Can be used to mark the qualified value shape to be disjoint with its sibling shapes.
    */
    qualifiedValueShapesDisjoint: prefixer('qualifiedValueShapesDisjoint'),

    /**
    * **[Validation report](http://www.w3.org/ns/shacl#ValidationReport)** (class)
    * 
    * The class of SHACL validation reports.
    */
    ValidationReport: prefixer('ValidationReport'),

    /**
    * **[qualified min count](http://www.w3.org/ns/shacl#qualifiedMinCount)** (property)
    * 
    * The minimum number of value nodes that must conform to the shape.
    */
    qualifiedMinCount: prefixer('qualifiedMinCount'),

    /**
    * **[Validation result](http://www.w3.org/ns/shacl#ValidationResult)** (class)
    * 
    * The class of validation results.
    */
    ValidationResult: prefixer('ValidationResult'),

    /**
    * **[ask](http://www.w3.org/ns/shacl#ask)** (property)
    * 
    * The SPARQL ASK query to execute.
    */
    ask: prefixer('ask'),

    /**
    * **[constraint (in SPARQL)](http://www.w3.org/ns/shacl#sparql)** (property)
    * 
    * Links a shape with SPARQL constraints.
    */
    sparql: prefixer('sparql'),

    /**
    * **[select](http://www.w3.org/ns/shacl#select)** (property)
    * 
    * The SPARQL SELECT query to execute.
    */
    select: prefixer('select'),

    /**
    * **[union](http://www.w3.org/ns/shacl#union)** (property)
    * 
    * A list of node expressions that shall be used together.
    */
    union: prefixer('union'),

    /**
    * **[unique languages](http://www.w3.org/ns/shacl#uniqueLang)** (property)
    * 
    * Specifies whether all node values must have a unique (or no) language tag.
    */
    uniqueLang: prefixer('uniqueLang'),

    /**
    * **[alternative path](http://www.w3.org/ns/shacl#alternativePath)** (property)
    * 
    * The (single) value of this property must be a list of path elements, representing the elements of alternative paths.
    */
    alternativePath: prefixer('alternativePath'),

    /**
    * **[annotation property](http://www.w3.org/ns/shacl#annotationProperty)** (property)
    * 
    * The annotation property that shall be set.
    */
    annotationProperty: prefixer('annotationProperty'),

    /**
    * **[annotation value](http://www.w3.org/ns/shacl#annotationValue)** (property)
    * 
    * The (default) values of the annotation property.
    */
    annotationValue: prefixer('annotationValue'),

    /**
    * **[annotation variable name](http://www.w3.org/ns/shacl#annotationVarName)** (property)
    * 
    * The name of the SPARQL variable from the SELECT clause that shall be used for the values.
    */
    annotationVarName: prefixer('annotationVarName'),

    /**
    * **[condition](http://www.w3.org/ns/shacl#condition)** (property)
    * 
    * The shapes that the focus nodes need to conform to before a rule is executed on them.
    */
    condition: prefixer('condition'),

    /**
    * **[conforms](http://www.w3.org/ns/shacl#conforms)** (property)
    * 
    * True if the validation did not produce any validation results, and false otherwise.
    */
    conforms: prefixer('conforms'),

    /**
    * **[construct](http://www.w3.org/ns/shacl#construct)** (property)
    * 
    * The SPARQL CONSTRUCT query to execute.
    */
    construct: prefixer('construct'),

    /**
    * **[deactivated](http://www.w3.org/ns/shacl#deactivated)** (property)
    * 
    * If set to true then all nodes conform to this.
    */
    deactivated: prefixer('deactivated'),

    /**
    * **[default value](http://www.w3.org/ns/shacl#defaultValue)** (property)
    * 
    * A default value for a property, for example for user interface tools to pre-populate input fields.
    */
    defaultValue: prefixer('defaultValue'),

    /**
    * **[description](http://www.w3.org/ns/shacl#description)** (property)
    * 
    * Human-readable descriptions for the property in the context of the surrounding shape.
    */
    description: prefixer('description'),

    /**
    * **[detail](http://www.w3.org/ns/shacl#detail)** (property)
    * 
    * Links a result with other results that provide more details, for example to describe violations against nested shapes.
    */
    detail: prefixer('detail'),

    /**
    * **[entailment](http://www.w3.org/ns/shacl#entailment)** (property)
    * 
    * An entailment regime that indicates what kind of inferencing is required by a shapes graph.
    */
    entailment: prefixer('entailment'),

    /**
    * **[focus node](http://www.w3.org/ns/shacl#focusNode)** (property)
    * 
    * The focus node that was validated when the result was produced.
    */
    focusNode: prefixer('focusNode'),

    /**
    * **[group](http://www.w3.org/ns/shacl#group)** (property)
    * 
    * Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes.
    */
    group: prefixer('group'),

    /**
    * **[inverse path](http://www.w3.org/ns/shacl#inversePath)** (property)
    * 
    * The (single) value of this property represents an inverse path (object to subject).
    */
    inversePath: prefixer('inversePath'),

    /**
    * **[JavaScript function name](http://www.w3.org/ns/shacl#jsFunctionName)** (property)
    * 
    * The name of the JavaScript function to execute.
    */
    jsFunctionName: prefixer('jsFunctionName'),

    /**
    * **[JavaScript library](http://www.w3.org/ns/shacl#jsLibrary)** (property)
    * 
    * Declares which JavaScript libraries are needed to execute this.
    */
    jsLibrary: prefixer('jsLibrary'),

    /**
    * **[JavaScript library URL](http://www.w3.org/ns/shacl#jsLibraryURL)** (property)
    * 
    * Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files.
    */
    jsLibraryURL: prefixer('jsLibraryURL'),

    /**
    * **[label template](http://www.w3.org/ns/shacl#labelTemplate)** (property)
    * 
    * Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter.
    */
    labelTemplate: prefixer('labelTemplate'),

    /**
    * **[message](http://www.w3.org/ns/shacl#message)** (property)
    * 
    * A human-readable message (possibly with placeholders for variables) explaining the cause of the result.
    */
    message: prefixer('message'),

    /**
    * **[name](http://www.w3.org/ns/shacl#name)** (property)
    * 
    * Human-readable labels for the property in the context of the surrounding shape.
    */
    name: prefixer('name'),

    /**
    * **[namespace](http://www.w3.org/ns/shacl#namespace)** (property)
    * 
    * The namespace associated with a prefix in a prefix declaration.
    */
    namespace: prefixer('namespace'),

    /**
    * **[shape validator](http://www.w3.org/ns/shacl#nodeValidator)** (property)
    * 
    * The validator(s) used to evaluate a constraint in the context of a node shape.
    */
    nodeValidator: prefixer('nodeValidator'),

    /**
    * **[nodes](http://www.w3.org/ns/shacl#nodes)** (property)
    * 
    * The node expression producing the input nodes of a filter shape expression.
    */
    nodes: prefixer('nodes'),

    /**
    * **[object](http://www.w3.org/ns/shacl#object)** (property)
    * 
    * An expression producing the nodes that shall be inferred as objects.
    */
    object: prefixer('object'),

    /**
    * **[one or more path](http://www.w3.org/ns/shacl#oneOrMorePath)** (property)
    * 
    * The (single) value of this property represents a path that is matched one or more times.
    */
    oneOrMorePath: prefixer('oneOrMorePath'),

    /**
    * **[order](http://www.w3.org/ns/shacl#order)** (property)
    * 
    * Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second.
    */
    order: prefixer('order'),

    /**
    * **[predicate](http://www.w3.org/ns/shacl#predicate)** (property)
    * 
    * An expression producing the properties that shall be inferred as predicates.
    */
    predicate: prefixer('predicate'),

    /**
    * **[prefix](http://www.w3.org/ns/shacl#prefix)** (property)
    * 
    * The prefix of a prefix declaration.
    */
    prefix: prefixer('prefix'),

    /**
    * **[prefixes](http://www.w3.org/ns/shacl#prefixes)** (property)
    * 
    * The prefixes that shall be applied before parsing the associated SPARQL query.
    */
    prefixes: prefixer('prefixes'),

    /**
    * **[property validator](http://www.w3.org/ns/shacl#propertyValidator)** (property)
    * 
    * The validator(s) used to evaluate a constraint in the context of a property shape.
    */
    propertyValidator: prefixer('propertyValidator'),

    /**
    * **[result](http://www.w3.org/ns/shacl#result)** (property)
    * 
    * The validation results contained in a validation report.
    */
    result: prefixer('result'),

    /**
    * **[result annotation](http://www.w3.org/ns/shacl#resultAnnotation)** (property)
    * 
    * Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query.
    */
    resultAnnotation: prefixer('resultAnnotation'),

    /**
    * **[result message](http://www.w3.org/ns/shacl#resultMessage)** (property)
    * 
    * Human-readable messages explaining the cause of the result.
    */
    resultMessage: prefixer('resultMessage'),

    /**
    * **[result path](http://www.w3.org/ns/shacl#resultPath)** (property)
    * 
    * The path of a validation result, based on the path of the validated property shape.
    */
    resultPath: prefixer('resultPath'),

    /**
    * **[result severity](http://www.w3.org/ns/shacl#resultSeverity)** (property)
    * 
    * The severity of the result, e.g. warning.
    */
    resultSeverity: prefixer('resultSeverity'),

    /**
    * **[return type](http://www.w3.org/ns/shacl#returnType)** (property)
    * 
    * The expected type of values returned by the associated function.
    */
    returnType: prefixer('returnType'),

    /**
    * **[rule](http://www.w3.org/ns/shacl#rule)** (property)
    * 
    * The rules linked to a shape.
    */
    rule: prefixer('rule'),

    /**
    * **[severity](http://www.w3.org/ns/shacl#severity)** (property)
    * 
    * Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation.
    */
    severity: prefixer('severity'),

    /**
    * **[shapes graph](http://www.w3.org/ns/shacl#shapesGraph)** (property)
    * 
    * Shapes graphs that should be used when validating this data graph.
    */
    shapesGraph: prefixer('shapesGraph'),

    /**
    * **[shapes graph well-formed](http://www.w3.org/ns/shacl#shapesGraphWellFormed)** (property)
    * 
    * If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process.
    */
    shapesGraphWellFormed: prefixer('shapesGraphWellFormed'),

    /**
    * **[source constraint](http://www.w3.org/ns/shacl#sourceConstraint)** (property)
    * 
    * The constraint that was validated when the result was produced.
    */
    sourceConstraint: prefixer('sourceConstraint'),

    /**
    * **[source constraint component](http://www.w3.org/ns/shacl#sourceConstraintComponent)** (property)
    * 
    * The constraint component that is the source of the result.
    */
    sourceConstraintComponent: prefixer('sourceConstraintComponent'),

    /**
    * **[source shape](http://www.w3.org/ns/shacl#sourceShape)** (property)
    * 
    * The shape that is was validated when the result was produced.
    */
    sourceShape: prefixer('sourceShape'),

    /**
    * **[subject](http://www.w3.org/ns/shacl#subject)** (property)
    * 
    * An expression producing the resources that shall be inferred as subjects.
    */
    subject: prefixer('subject'),

    /**
    * **[target](http://www.w3.org/ns/shacl#target)** (property)
    * 
    * Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget.
    */
    target: prefixer('target'),

    /**
    * **[target class](http://www.w3.org/ns/shacl#targetClass)** (property)
    * 
    * Links a shape to a class, indicating that all instances of the class must conform to the shape.
    */
    targetClass: prefixer('targetClass'),

    /**
    * **[target node](http://www.w3.org/ns/shacl#targetNode)** (property)
    * 
    * Links a shape to individual nodes, indicating that these nodes must conform to the shape.
    */
    targetNode: prefixer('targetNode'),

    /**
    * **[update](http://www.w3.org/ns/shacl#update)** (property)
    * 
    * The SPARQL UPDATE to execute.
    */
    update: prefixer('update'),

    /**
    * **[validator](http://www.w3.org/ns/shacl#validator)** (property)
    * 
    * The validator(s) used to evaluate constraints of either node or property shapes.
    */
    validator: prefixer('validator'),

    /**
    * **[value](http://www.w3.org/ns/shacl#value)** (property)
    * 
    * An RDF node that has caused the result.
    */
    value: prefixer('value'),

    /**
    * **[zero or more path](http://www.w3.org/ns/shacl#zeroOrMorePath)** (property)
    * 
    * The (single) value of this property represents a path that is matched zero or more times.
    */
    zeroOrMorePath: prefixer('zeroOrMorePath'),

    /**
    * **[zero or one path](http://www.w3.org/ns/shacl#zeroOrOnePath)** (property)
    * 
    * The (single) value of this property represents a path that is matched zero or one times.
    */
    zeroOrOnePath: prefixer('zeroOrOnePath'),

  
  };

export default sh

