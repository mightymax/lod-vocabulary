// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2001/XMLSchema#');

/**
 * [xsd](http://www.w3.org/2001/XMLSchema#})
 */
const xsd = {
  /**
    * **[date](http://www.w3.org/2001/XMLSchema#date)** (property)
    * 
    * The value space of date consists of top-open intervals of exactly one day in length on the timelines of dateTime, beginning on the beginning moment of each day (in each timezone), i.e. '00:00:00', up to but not including '24:00:00' (which is identical with '00:00:00' of the next day). For nontimezoned values, the top-open intervals disjointly cover the nontimezoned timeline, one per day. For timezoned values, the intervals begin at every minute and therefore overlap.
    */
    date: prefixer('date'),

    /**
    * **[dateTime](http://www.w3.org/2001/XMLSchema#dateTime)** (property)
    * 
    * dateTime values may be viewed as objects with integer-valued year, month, day, hour and minute properties, a decimal-valued second property, and a boolean timezoned property. Each such object also has one decimal-valued method or computed property, timeOnTimeline, whose value is always a decimal number; the values are dimensioned in seconds, the integer 0 is 0001-01-01T00:00:00 and the value of timeOnTimeline for other dateTime values is computed using the Gregorian algorithm as modified for leap-seconds. The timeOnTimeline values form two related "timelines", one for timezoned values and one for non-timezoned values. Each timeline is a copy of the value space of decimal, with integers given units of seconds.
    */
    dateTime: prefixer('dateTime'),

    /**
    * **[gregorian year](http://www.w3.org/2001/XMLSchema#gYear)** (property)
    * 
    * gYear represents a gregorian calendar year. The value space of gYear is the set of Gregorian calendar years as defined in §5.2.1 of ISO 8601. Specifically, it is a set of one-year long, non-periodic instances e.g. lexical 1999 to represent the whole year 1999, independent of how many months and days this year has.
    */
    gYear: prefixer('gYear'),

    /**
    * **[gregorian month in a gregorian year](http://www.w3.org/2001/XMLSchema#gYearMonth)** (property)
    * 
    * gYearMonth represents a specific gregorian month in a specific gregorian year. The value space of gYearMonth is the set of Gregorian calendar months as defined in §5.2.1 of ISO 8601. Specifically, it is a set of one-month long, non-periodic instances e.g. 1999-10 to represent the whole month of 1999-10, independent of how many days this month has.
    */
    gYearMonth: prefixer('gYearMonth'),

    /**
    * **[URI](http://www.w3.org/2001/XMLSchema#anyURI)** (property)
    * 
    * anyURI represents a Uniform Resource Identifier Reference (URI). An anyURI value can be absolute or relative, and may have an optional fragment identifier (i.e., it may be a URI Reference). This type should be used to specify the intention that the value fulfills the role of a URI as defined by RFC 2396, as amended by RFC 2732.
    */
    anyURI: prefixer('anyURI'),

    /**
    * **[boolean](http://www.w3.org/2001/XMLSchema#boolean)** (property)
    * 
    * boolean has the value space required to support the mathematical concept of binary-valued logic: {true, false}.
    */
    boolean: prefixer('boolean'),

    /**
    * **[decimal](http://www.w3.org/2001/XMLSchema#decimal)** (property)
    * 
    * decimal represents a subset of the real numbers, which can be represented by decimal numerals. The value space of decimal is the set of numbers that can be obtained by multiplying an integer by a non-positive power of ten, i.e., expressible as i × 10^-n where i and n are integers and n >= 0. Precision is not reflected in this value space; the number 2.0 is not distinct from the number 2.00. The order-relation on decimal is the order relation on real numbers, restricted to this subset.
    */
    decimal: prefixer('decimal'),

    /**
    * **[double-precision floating point](http://www.w3.org/2001/XMLSchema#double)** (property)
    * 
    * The double datatype is patterned after the IEEE double-precision 64-bit floating point type (IEEE 754-1985). The basic value space of double consists of the values m × 2^e, where m is an integer whose absolute value is less than 2^53, and e is an integer between -1075 and 970, inclusive. In addition to the basic value space described above, the value space of double also contains the following three special values: positive and negative infinity and not-a-number (NaN). The order-relation on double is: x < y iff y - x is positive for x and y in the value space. Positive infinity is greater than all other non-NaN values. NaN equals itself but is incomparable with (neither greater than nor less than) any other value in the value space.
    */
    double: prefixer('double'),

    /**
    * **[gregorian day](http://www.w3.org/2001/XMLSchema#gDay)** (property)
    * 
    * gDay is a gregorian day that recurs, specifically a day of the month such as the 5th of the month. Arbitrary recurring days are not supported by this datatype. The value space of gDay is the space of a set of calendar dates as defined in §3 of ISO 8601. Specifically, it is a set of one-day long, monthly periodic instances.
    */
    gDay: prefixer('gDay'),

    /**
    * **[gregorian month](http://www.w3.org/2001/XMLSchema#gMonth)** (property)
    * 
    * gMonth is a gregorian month that recurs every year. The ·value space· of gMonth is the space of a set of calendar months as defined in §3 of ISO 8601. Specifically, it is a set of one-month long, yearly periodic instances.
    */
    gMonth: prefixer('gMonth'),

    /**
    * **[integer](http://www.w3.org/2001/XMLSchema#integer)** (property)
    * 
    * Integer is derived from decimal by fixing the value of fractionDigits to be 0and disallowing the trailing decimal point. This results in the standard mathematical concept of the integer numbers. The value space of integer is the infinite set {...,-2,-1,0,1,2,...}. The base type of integer is decimal.
    */
    integer: prefixer('integer'),

    /**
    * **[non-negative integer](http://www.w3.org/2001/XMLSchema#nonNegativeInteger)** (property)
    * 
    * Non-negative integer is derived from integer by setting the value of minInclusive to be 0. This results in the standard mathematical concept of the non-negative integers. The value space of non-negative integer is the infinite set {0,1,2,...}. The base type of non-negative integer is integer.
    */
    nonNegativeInteger: prefixer('nonNegativeInteger'),

    /**
    * **[positive integer](http://www.w3.org/2001/XMLSchema#positiveInteger)** (property)
    * 
    * Positive integer is derived from non-negative integer by setting the value of minInclusive to be 1. This results in the standard mathematical concept of the positive integer numbers. The value space of positive integer is the infinite set {1,2,...}. The base type of positive integer is non-negative integer.
    */
    positiveInteger: prefixer('positiveInteger'),

    /**
    * **[string](http://www.w3.org/2001/XMLSchema#string)** (property)
    * 
    * The string datatype represents character strings in XML. The value space of string is the set of finite-length sequences of characters (as defined in XML 1.0 Second Edition) that match the Char production from XML 1.0 Second Edition. A character is an atomic unit of communication; it is not further specified except to note that every character has a corresponding Universal Character Set code point, which is an integer.
    */
    string: prefixer('string'),

  
  };

export default xsd

