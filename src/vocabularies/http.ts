// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2011/http#');

/**
 * [http](http://www.w3.org/2011/http#})
 */
const http = {
  /**
    * **[Connection](http://www.w3.org/2011/http#Connection)** (class)
    * 
    * A connection used for HTTP transfer.
    */
    Connection: prefixer('Connection'),

    /**
    * **[Entity Header](http://www.w3.org/2011/http#EntityHeader)** (class)
    * 
    * An entity header in an HTTP message.
    */
    EntityHeader: prefixer('EntityHeader'),

    /**
    * **[Message Header](http://www.w3.org/2011/http#MessageHeader)** (class)
    * 
    * A header in an HTTP message.
    */
    MessageHeader: prefixer('MessageHeader'),

    /**
    * **[General Header](http://www.w3.org/2011/http#GeneralHeader)** (class)
    * 
    * A general header in an HTTP message.
    */
    GeneralHeader: prefixer('GeneralHeader'),

    /**
    * **[Header Element](http://www.w3.org/2011/http#HeaderElement)** (class)
    * 
    * A part of a deconstructed header value.
    */
    HeaderElement: prefixer('HeaderElement'),

    /**
    * **[Header Name](http://www.w3.org/2011/http#HeaderName)** (class)
    * 
    * A header name.
    */
    HeaderName: prefixer('HeaderName'),

    /**
    * **[Message](http://www.w3.org/2011/http#Message)** (class)
    * 
    * An HTTP message.
    */
    Message: prefixer('Message'),

    /**
    * **[Method](http://www.w3.org/2011/http#Method)** (class)
    * 
    * The HTTP method used for the request.
    */
    Method: prefixer('Method'),

    /**
    * **[Parameter](http://www.w3.org/2011/http#Parameter)** (class)
    * 
    * A parameter for a part of a header value.
    */
    Parameter: prefixer('Parameter'),

    /**
    * **[Request](http://www.w3.org/2011/http#Request)** (class)
    * 
    * An HTTP request.
    */
    Request: prefixer('Request'),

    /**
    * **[Request Header](http://www.w3.org/2011/http#RequestHeader)** (class)
    * 
    * A header in an HTTP request message.
    */
    RequestHeader: prefixer('RequestHeader'),

    /**
    * **[Response](http://www.w3.org/2011/http#Response)** (class)
    * 
    * An HTTP response.
    */
    Response: prefixer('Response'),

    /**
    * **[Response Header](http://www.w3.org/2011/http#ResponseHeader)** (class)
    * 
    * A header in an HTTP response message.
    */
    ResponseHeader: prefixer('ResponseHeader'),

    /**
    * **[Status code](http://www.w3.org/2011/http#StatusCode)** (class)
    * 
    * The status code of an HTTP response.
    */
    StatusCode: prefixer('StatusCode'),

    /**
    * **[Absolute path](http://www.w3.org/2011/http#absolutePath)** (property)
    * 
    * The absolute path sort of request URI.
    */
    absolutePath: prefixer('absolutePath'),

    /**
    * **[Request URI](http://www.w3.org/2011/http#requestURI)** (property)
    * 
    * The request URI of an HTTP request.
    */
    requestURI: prefixer('requestURI'),

    /**
    * **[Absolute URI](http://www.w3.org/2011/http#absoluteURI)** (property)
    * 
    * The absolute request URI.
    */
    absoluteURI: prefixer('absoluteURI'),

    /**
    * **[Authority](http://www.w3.org/2011/http#authority)** (property)
    * 
    * The authority sort of request URI.
    */
    authority: prefixer('authority'),

    /**
    * **[Entity Body](http://www.w3.org/2011/http#body)** (property)
    * 
    * The entity body of an HTTP message.
    */
    body: prefixer('body'),

    /**
    * **[Connection authority](http://www.w3.org/2011/http#connectionAuthority)** (property)
    * 
    * The authority of a connection used for the HTTP transfer.
    */
    connectionAuthority: prefixer('connectionAuthority'),

    /**
    * **[Header element name](http://www.w3.org/2011/http#elementName)** (property)
    * 
    * The name of a header element.
    */
    elementName: prefixer('elementName'),

    /**
    * **[Header element value](http://www.w3.org/2011/http#elementValue)** (property)
    * 
    * The value of a header element.
    */
    elementValue: prefixer('elementValue'),

    /**
    * **[Field name](http://www.w3.org/2011/http#fieldName)** (property)
    * 
    * The name of an HTTP header field.
    */
    fieldName: prefixer('fieldName'),

    /**
    * **[Field value](http://www.w3.org/2011/http#fieldValue)** (property)
    * 
    * The value of an HTTP header field.
    */
    fieldValue: prefixer('fieldValue'),

    /**
    * **[Header name](http://www.w3.org/2011/http#hdrName)** (property)
    * 
    * The name of an HTTP header.
    */
    hdrName: prefixer('hdrName'),

    /**
    * **[Header elements](http://www.w3.org/2011/http#headerElements)** (property)
    * 
    * The deconstructed parts of an HTTP header value.
    */
    headerElements: prefixer('headerElements'),

    /**
    * **[Headers](http://www.w3.org/2011/http#headers)** (property)
    * 
    * The headers in an HTTP message.
    */
    headers: prefixer('headers'),

    /**
    * **[HTTP version](http://www.w3.org/2011/http#httpVersion)** (property)
    * 
    * The HTTP version of an HTTP message.
    */
    httpVersion: prefixer('httpVersion'),

    /**
    * **[Method name](http://www.w3.org/2011/http#methodName)** (property)
    * 
    * The HTTP method name used for the HTTP request.
    */
    methodName: prefixer('methodName'),

    /**
    * **[Method](http://www.w3.org/2011/http#mthd)** (property)
    * 
    * The HTTP method used for the HTTP request.
    */
    mthd: prefixer('mthd'),

    /**
    * **[Parameter name](http://www.w3.org/2011/http#paramName)** (property)
    * 
    * The name of a parameter in a part of a deconstructed HTTP header value.
    */
    paramName: prefixer('paramName'),

    /**
    * **[Parameter value](http://www.w3.org/2011/http#paramValue)** (property)
    * 
    * The value of a parameter in a part of a deconstructed HTTP header value.
    */
    paramValue: prefixer('paramValue'),

    /**
    * **[Header parameters](http://www.w3.org/2011/http#params)** (property)
    * 
    * The parameters in a part of a deconstructed HTTP header value.
    */
    params: prefixer('params'),

    /**
    * **[Reason phrase](http://www.w3.org/2011/http#reasonPhrase)** (property)
    * 
    * The reason phrase (status text) of an HTTP response.
    */
    reasonPhrase: prefixer('reasonPhrase'),

    /**
    * **[Requests](http://www.w3.org/2011/http#requests)** (property)
    * 
    * The HTTP requests made via a connection.
    */
    requests: prefixer('requests'),

    /**
    * **[Response](http://www.w3.org/2011/http#resp)** (property)
    * 
    * The HTTP response sent in answer to an HTTP request.
    */
    resp: prefixer('resp'),

    /**
    * **[Status code](http://www.w3.org/2011/http#sc)** (property)
    * 
    * The status code of an HTTP response.
    */
    sc: prefixer('sc'),

    /**
    * **[Status code](http://www.w3.org/2011/http#statusCodeNumber)** (property)
    * 
    * The status code number.
    */
    statusCodeNumber: prefixer('statusCodeNumber'),

    /**
    * **[Status code](http://www.w3.org/2011/http#statusCodeValue)** (property)
    * 
    * The status code value of an HTTP response.
    */
    statusCodeValue: prefixer('statusCodeValue'),

  
  };

export default http

