// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2000/10/swap/log#');

/**
 * [log](http://www.w3.org/2000/10/swap/log#})
 */
const log = {
  /**
    * **[conclusion](http://www.w3.org/2000/10/swap/log#conclusion)** (property)
    * 
    * All possible conclusions which can be drawn from a formula.
    * 
    * The object of this function, a formula, is the set of conclusions which can be
    * drawn from the subject formula, by successively applying any
    * rules it contains to the data it contains. This is equivalent to
    * cwm's "--think" command line function.  It does use built-ins, so
    * it may for example indirectly invoke other documents, validate
    * signatures, etc.
    * 
    */
    conclusion: prefixer('conclusion'),

    /**
    * **[conjunction](http://www.w3.org/2000/10/swap/log#conjunction)** (property)
    * 
    * "A function to merge formulae: logical AND.
    * 
    * The subject is a list of formulae.
    * The object, which can be generated, is a formula containing a copy
    * of each of the formulae in the list on the left.
    * A cwm built-in function.
    * 
    */
    conjunction: prefixer('conjunction'),

    /**
    * **[content](http://www.w3.org/2000/10/swap/log#content)** (property)
    * 
    * This connects a document and a string that represents it.
    * (Cwm knows how to go get a document in order to evaluate this.)
    * Note that the content-type of the information is not given and
    * so must be known or guessed.
    */
    content: prefixer('content'),

    /**
    * **[definitive document](http://www.w3.org/2000/10/swap/log#definitiveDocument)** (property)
    * 
    * When document D is the definitiveDocument for property P,
    * any statement X P Y is true iff and only if the semantics of document D
    * include that statement.
    * 
    * For example, there may be a definitive document for the zipcode of
    * airports by airport code, and so on. This is useful to let a reasoner
    * know that it can extend its query to the given document.
    * (Cwm will do this if its mode includes "r").
    * 
    */
    definitiveDocument: prefixer('definitiveDocument'),

    /**
    * **[definitive service](http://www.w3.org/2000/10/swap/log#definitiveService)** (property)
    * 
    * When service S is the definitiveService for property P,
    * any statement X P Y is true iff and only if a query to S returns
    * that it is.  The protocol for the service S depends on the scheme.
    * For mysql protocol, the URI of the service is like
    * sql://user:password@host.domain/database/.
    * 
    * For example, there may be a definitive service for the zipcode of
    * airports by airport code, and so on. This is useful to let a reasoner
    * know that it can help resolve a query by delegating it to the service
    * in question.
    * (Cwm will do this if its mode includes "r").
    * 
    */
    definitiveService: prefixer('definitiveService'),

    /**
    * **[n3 string](http://www.w3.org/2000/10/swap/log#n3String)** (property)
    * 
    * The subject formula, expressed as N3, gives this string.
    */
    n3String: prefixer('n3String'),

    /**
    * **[output string](http://www.w3.org/2000/10/swap/log#outputString)** (property)
    * 
    * The subject is a key and the object is a string,
    * where the strings are to be output in the order of the keys.
    * See cwm --strings in cwm --help.
    * 
    */
    outputString: prefixer('outputString'),

    /**
    * **[parses to](http://www.w3.org/2000/10/swap/log#parsedAsN3)** (property)
    * 
    * The subject string, parsed as N3, gives this formula.
    */
    parsedAsN3: prefixer('parsedAsN3'),

    /**
    * **[semantics](http://www.w3.org/2000/10/swap/log#semantics)** (property)
    * 
    * The log:semantics of a document is the formula.
    * achieved by parsing representation of the document.
    * For a document in Notation3, log:semantics is the
    * log:parsedAsN3 of the log:contents of the document.
    * For a document in RDF/XML, it is parsed according to the
    * RDF/XML specification to yield an RDF formula
    * (a subclass of N3 log:Formula).
    * 
    * [Aside: Philosophers will be distracted here into worrying about the meaning
    * of meaning. At least we didn't call this function "meaning"!
    * In as much as N3 is used as an interlingua for interoperability
    * for different systems, this for an N3 based system is the meaning
    * expressed by a document.]
    * 
    * (Cwm knows how to go get a document and parse N3 and RDF/XML
    * it in order to evaluate this.
    * Other languages for web documents
    * may be defined whose N3 semantics are therefore
    * also calculable, and so they could be added in due course.
    * See for example GRDDL, RDFa, etc)
    */
    semantics: prefixer('semantics'),

    /**
    * **[semantics or error message](http://www.w3.org/2000/10/swap/log#semanticsOrError)** (property)
    * 
    * This connects a document and either the formula it parses to,
    * or an error message explaining what went wrong with trying. See log:semantics.
    * (Cwm knows how to go get a document and parse it in order to evaluate this.)
    * 
    */
    semanticsOrError: prefixer('semanticsOrError'),

  
  };

export default log

