// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2011/content#');

/**
 * [cnt](http://www.w3.org/2011/content#})
 */
const cnt = {
  /**
    * **[Content](http://www.w3.org/2011/content#Content)** (class)
    * 
    * The content.
    */
    Content: prefixer('Content'),

    /**
    * **[Base64 content](http://www.w3.org/2011/content#ContentAsBase64)** (class)
    * 
    * The base64 encoded content (can be used for binary content).
    */
    ContentAsBase64: prefixer('ContentAsBase64'),

    /**
    * **[Text content](http://www.w3.org/2011/content#ContentAsText)** (class)
    * 
    * The text content (can be used for text content).
    */
    ContentAsText: prefixer('ContentAsText'),

    /**
    * **[XML content](http://www.w3.org/2011/content#ContentAsXML)** (class)
    * 
    * The XML content (can only be used for XML-wellformed content).
    */
    ContentAsXML: prefixer('ContentAsXML'),

    /**
    * **[Document type declaration](http://www.w3.org/2011/content#DoctypeDecl)** (class)
    * 
    * The document type declaration.
    */
    DoctypeDecl: prefixer('DoctypeDecl'),

    /**
    * **[Base64 encoded byte sequence](http://www.w3.org/2011/content#bytes)** (property)
    * 
    * The Base64 encoded byte sequence of the content.
    */
    bytes: prefixer('bytes'),

    /**
    * **[Character encoding](http://www.w3.org/2011/content#characterEncoding)** (property)
    * 
    * The character encoding used to create a character sequence from a byte sequence or vice versa.
    */
    characterEncoding: prefixer('characterEncoding'),

    /**
    * **[Character sequence](http://www.w3.org/2011/content#chars)** (property)
    * 
    * The character sequence of the text content.
    */
    chars: prefixer('chars'),

    /**
    * **[XML character encoding](http://www.w3.org/2011/content#declaredEncoding)** (property)
    * 
    * The character encoding declared in the XML declaration.
    */
    declaredEncoding: prefixer('declaredEncoding'),

    /**
    * **[Document type name](http://www.w3.org/2011/content#doctypeName)** (property)
    * 
    * The document type name.
    */
    doctypeName: prefixer('doctypeName'),

    /**
    * **[Document type declaration](http://www.w3.org/2011/content#dtDecl)** (property)
    * 
    * The document type declaration.
    */
    dtDecl: prefixer('dtDecl'),

    /**
    * **[Internal DTD subset](http://www.w3.org/2011/content#internalSubset)** (property)
    * 
    * The internal document type definition subset within the document type declarations.
    */
    internalSubset: prefixer('internalSubset'),

    /**
    * **[XML leading misc](http://www.w3.org/2011/content#leadingMisc)** (property)
    * 
    * The XML content preceding the document type declaration.
    */
    leadingMisc: prefixer('leadingMisc'),

    /**
    * **[Public ID](http://www.w3.org/2011/content#publicId)** (property)
    * 
    * The document type declarations's public identifier.
    */
    publicId: prefixer('publicId'),

    /**
    * **[XML rest](http://www.w3.org/2011/content#rest)** (property)
    * 
    * The XML content following the document type declaration.
    */
    rest: prefixer('rest'),

    /**
    * **[XML standalone document declaration](http://www.w3.org/2011/content#standalone)** (property)
    * 
    * The standalone declaration in the XML declaration.
    */
    standalone: prefixer('standalone'),

    /**
    * **[System ID](http://www.w3.org/2011/content#systemId)** (property)
    * 
    * The document type declarations's system identifier (typed: xsd:anyURI)
    */
    systemId: prefixer('systemId'),

    /**
    * **[XML version](http://www.w3.org/2011/content#version)** (property)
    * 
    * The XML version declared in the XML declaration.
    */
    version: prefixer('version'),

  
  };

export default cnt

