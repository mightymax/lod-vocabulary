// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/ns/ldp#');

/**
 * [ldp](http://www.w3.org/ns/ldp#})
 */
const ldp = {
  /**
    * **[BasicContainer](http://www.w3.org/ns/ldp#BasicContainer)** (class)
    * 
    * An LDPC that uses a predefined predicate to simply link to its contained resources.
    */
    BasicContainer: prefixer('BasicContainer'),

    /**
    * **[Container](http://www.w3.org/ns/ldp#Container)** (class)
    * 
    * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
    */
    Container: prefixer('Container'),

    /**
    * **[RDFSource](http://www.w3.org/ns/ldp#RDFSource)** (class)
    * 
    * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
    */
    RDFSource: prefixer('RDFSource'),

    /**
    * **[DirectContainer](http://www.w3.org/ns/ldp#DirectContainer)** (class)
    * 
    * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
    */
    DirectContainer: prefixer('DirectContainer'),

    /**
    * **[IndirectContainer](http://www.w3.org/ns/ldp#IndirectContainer)** (class)
    * 
    * An LDPC that has the flexibility of choosing what form the membership triples take.
    */
    IndirectContainer: prefixer('IndirectContainer'),

    /**
    * **[NonRDFSource](http://www.w3.org/ns/ldp#NonRDFSource)** (class)
    * 
    * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
    */
    NonRDFSource: prefixer('NonRDFSource'),

    /**
    * **[Resource](http://www.w3.org/ns/ldp#Resource)** (class)
    * 
    * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
    */
    Resource: prefixer('Resource'),

    /**
    * **[Page](http://www.w3.org/ns/ldp#Page)** (class)
    * 
    * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
    */
    Page: prefixer('Page'),

    /**
    * **[PageSortCriterion](http://www.w3.org/ns/ldp#PageSortCriterion)** (class)
    * 
    * Element in the list of sorting criteria used by the server to assign container members to pages.
    */
    PageSortCriterion: prefixer('PageSortCriterion'),

    /**
    * **[constrainedBy](http://www.w3.org/ns/ldp#constrainedBy)** (property)
    * 
    * Links a resource with constraints that the server requires requests like creation and update to conform to.
    */
    constrainedBy: prefixer('constrainedBy'),

    /**
    * **[contains](http://www.w3.org/ns/ldp#contains)** (property)
    * 
    * Links a container with resources created through the container.
    */
    contains: prefixer('contains'),

    /**
    * **[hasMemberRelation](http://www.w3.org/ns/ldp#hasMemberRelation)** (property)
    * 
    * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
    */
    hasMemberRelation: prefixer('hasMemberRelation'),

    /**
    * **[inbox](http://www.w3.org/ns/ldp#inbox)** (property)
    * 
    * Links a resource to a container where notifications for the resource can be created and discovered.
    */
    inbox: prefixer('inbox'),

    /**
    * **[insertedContentRelation](http://www.w3.org/ns/ldp#insertedContentRelation)** (property)
    * 
    * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
    */
    insertedContentRelation: prefixer('insertedContentRelation'),

    /**
    * **[isMemmberOfRelation](http://www.w3.org/ns/ldp#isMemberOfRelation)** (property)
    * 
    * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
    */
    isMemberOfRelation: prefixer('isMemberOfRelation'),

    /**
    * **[member](http://www.w3.org/ns/ldp#member)** (property)
    * 
    * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
    */
    member: prefixer('member'),

    /**
    * **[membershipResource](http://www.w3.org/ns/ldp#membershipResource)** (property)
    * 
    * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
    */
    membershipResource: prefixer('membershipResource'),

    /**
    * **[Page](http://www.w3.org/ns/ldp#pageSequence)** (property)
    * 
    * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
    */
    pageSequence: prefixer('pageSequence'),

    /**
    * **[pageSortCollation](http://www.w3.org/ns/ldp#pageSortCollation)** (property)
    * 
    * The collation used to order the members across pages in a page sequence when comparing strings.
    */
    pageSortCollation: prefixer('pageSortCollation'),

    /**
    * **[pageSortCriteria](http://www.w3.org/ns/ldp#pageSortCriteria)** (property)
    * 
    * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
    */
    pageSortCriteria: prefixer('pageSortCriteria'),

    /**
    * **[pageSortOrder](http://www.w3.org/ns/ldp#pageSortOrder)** (property)
    * 
    * The ascending/descending/etc order used to order the members across pages in a page sequence.
    */
    pageSortOrder: prefixer('pageSortOrder'),

    /**
    * **[pageSortPredicate](http://www.w3.org/ns/ldp#pageSortPredicate)** (property)
    * 
    * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
    */
    pageSortPredicate: prefixer('pageSortPredicate'),

  
  };

export default ldp

