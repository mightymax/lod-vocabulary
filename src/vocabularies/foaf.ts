// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://xmlns.com/foaf/0.1/');

/**
 * [foaf](http://xmlns.com/foaf/0.1/})
 */
const foaf = {
  /**
    * **[Agent](http://xmlns.com/foaf/0.1/Agent)** (class)
    * 
    * An agent (eg. person, group, software or physical artifact).
    */
    Agent: prefixer('Agent'),

    /**
    * **[Document](http://xmlns.com/foaf/0.1/Document)** (class)
    * 
    * A document.
    */
    Document: prefixer('Document'),

    /**
    * **[Organization](http://xmlns.com/foaf/0.1/Organization)** (class)
    * 
    * An organization.
    */
    Organization: prefixer('Organization'),

    /**
    * **[Project](http://xmlns.com/foaf/0.1/Project)** (class)
    * 
    * A project (a collective endeavour of some kind).
    */
    Project: prefixer('Project'),

    /**
    * **[Group](http://xmlns.com/foaf/0.1/Group)** (class)
    * 
    * A class of Agents.
    */
    Group: prefixer('Group'),

    /**
    * **[Image](http://xmlns.com/foaf/0.1/Image)** (class)
    * 
    * An image.
    */
    Image: prefixer('Image'),

    /**
    * **[Label Property](http://xmlns.com/foaf/0.1/LabelProperty)** (class)
    * 
    * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
    */
    LabelProperty: prefixer('LabelProperty'),

    /**
    * **[Online Account](http://xmlns.com/foaf/0.1/OnlineAccount)** (class)
    * 
    * An online account.
    */
    OnlineAccount: prefixer('OnlineAccount'),

    /**
    * **[Online Chat Account](http://xmlns.com/foaf/0.1/OnlineChatAccount)** (class)
    * 
    * An online chat account.
    */
    OnlineChatAccount: prefixer('OnlineChatAccount'),

    /**
    * **[Online E-commerce Account](http://xmlns.com/foaf/0.1/OnlineEcommerceAccount)** (class)
    * 
    * An online e-commerce account.
    */
    OnlineEcommerceAccount: prefixer('OnlineEcommerceAccount'),

    /**
    * **[Online Gaming Account](http://xmlns.com/foaf/0.1/OnlineGamingAccount)** (class)
    * 
    * An online gaming account.
    */
    OnlineGamingAccount: prefixer('OnlineGamingAccount'),

    /**
    * **[Person](http://xmlns.com/foaf/0.1/Person)** (class)
    * 
    * A person.
    */
    Person: prefixer('Person'),

    /**
    * **[PersonalProfileDocument](http://xmlns.com/foaf/0.1/PersonalProfileDocument)** (class)
    * 
    * A personal profile RDF document.
    */
    PersonalProfileDocument: prefixer('PersonalProfileDocument'),

    /**
    * **[account](http://xmlns.com/foaf/0.1/account)** (property)
    * 
    * Indicates an account held by this agent.
    */
    account: prefixer('account'),

    /**
    * **[account name](http://xmlns.com/foaf/0.1/accountName)** (property)
    * 
    * Indicates the name (identifier) associated with this online account.
    */
    accountName: prefixer('accountName'),

    /**
    * **[account service homepage](http://xmlns.com/foaf/0.1/accountServiceHomepage)** (property)
    * 
    * Indicates a homepage of the service provide for this online account.
    */
    accountServiceHomepage: prefixer('accountServiceHomepage'),

    /**
    * **[age](http://xmlns.com/foaf/0.1/age)** (property)
    * 
    * The age in years of some agent.
    */
    age: prefixer('age'),

    /**
    * **[AIM chat ID](http://xmlns.com/foaf/0.1/aimChatID)** (property)
    * 
    * An AIM chat ID
    */
    aimChatID: prefixer('aimChatID'),

    /**
    * **[nickname](http://xmlns.com/foaf/0.1/nick)** (property)
    * 
    * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
    */
    nick: prefixer('nick'),

    /**
    * **[based near](http://xmlns.com/foaf/0.1/based_near)** (property)
    * 
    * A location that something is based near, for some broadly human notion of near.
    */
    based_near: prefixer('based_near'),

    /**
    * **[birthday](http://xmlns.com/foaf/0.1/birthday)** (property)
    * 
    * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
    */
    birthday: prefixer('birthday'),

    /**
    * **[current project](http://xmlns.com/foaf/0.1/currentProject)** (property)
    * 
    * A current project this person works on.
    */
    currentProject: prefixer('currentProject'),

    /**
    * **[depiction](http://xmlns.com/foaf/0.1/depiction)** (property)
    * 
    * A depiction of some thing.
    */
    depiction: prefixer('depiction'),

    /**
    * **[depicts](http://xmlns.com/foaf/0.1/depicts)** (property)
    * 
    * A thing depicted in this representation.
    */
    depicts: prefixer('depicts'),

    /**
    * **[DNA checksum](http://xmlns.com/foaf/0.1/dnaChecksum)** (property)
    * 
    * A checksum for the DNA of some thing. Joke.
    */
    dnaChecksum: prefixer('dnaChecksum'),

    /**
    * **[familyName](http://xmlns.com/foaf/0.1/familyName)** (property)
    * 
    * The family name of some person.
    */
    familyName: prefixer('familyName'),

    /**
    * **[family_name](http://xmlns.com/foaf/0.1/family_name)** (property)
    * 
    * The family name of some person.
    */
    family_name: prefixer('family_name'),

    /**
    * **[firstName](http://xmlns.com/foaf/0.1/firstName)** (property)
    * 
    * The first name of a person.
    */
    firstName: prefixer('firstName'),

    /**
    * **[focus](http://xmlns.com/foaf/0.1/focus)** (property)
    * 
    * The underlying or 'focal' entity associated with some SKOS-described concept.
    */
    focus: prefixer('focus'),

    /**
    * **[funded by](http://xmlns.com/foaf/0.1/fundedBy)** (property)
    * 
    * An organization funding a project or person.
    */
    fundedBy: prefixer('fundedBy'),

    /**
    * **[geekcode](http://xmlns.com/foaf/0.1/geekcode)** (property)
    * 
    * A textual geekcode for this person, see http://www.geekcode.com/geek.html
    */
    geekcode: prefixer('geekcode'),

    /**
    * **[gender](http://xmlns.com/foaf/0.1/gender)** (property)
    * 
    * The gender of this Agent (typically but not necessarily 'male' or 'female').
    */
    gender: prefixer('gender'),

    /**
    * **[Given name](http://xmlns.com/foaf/0.1/givenName)** (property)
    * 
    * The given name of some person.
    */
    givenName: prefixer('givenName'),

    /**
    * **[Given name](http://xmlns.com/foaf/0.1/givenname)** (property)
    * 
    * The given name of some person.
    */
    givenname: prefixer('givenname'),

    /**
    * **[account](http://xmlns.com/foaf/0.1/holdsAccount)** (property)
    * 
    * Indicates an account held by this agent.
    */
    holdsAccount: prefixer('holdsAccount'),

    /**
    * **[homepage](http://xmlns.com/foaf/0.1/homepage)** (property)
    * 
    * A homepage for some thing.
    */
    homepage: prefixer('homepage'),

    /**
    * **[is primary topic of](http://xmlns.com/foaf/0.1/isPrimaryTopicOf)** (property)
    * 
    * A document that this thing is the primary topic of.
    */
    isPrimaryTopicOf: prefixer('isPrimaryTopicOf'),

    /**
    * **[page](http://xmlns.com/foaf/0.1/page)** (property)
    * 
    * A page or document about this thing.
    */
    page: prefixer('page'),

    /**
    * **[ICQ chat ID](http://xmlns.com/foaf/0.1/icqChatID)** (property)
    * 
    * An ICQ chat ID
    */
    icqChatID: prefixer('icqChatID'),

    /**
    * **[image](http://xmlns.com/foaf/0.1/img)** (property)
    * 
    * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
    */
    img: prefixer('img'),

    /**
    * **[interest](http://xmlns.com/foaf/0.1/interest)** (property)
    * 
    * A page about a topic of interest to this person.
    */
    interest: prefixer('interest'),

    /**
    * **[primary topic](http://xmlns.com/foaf/0.1/primaryTopic)** (property)
    * 
    * The primary topic of some page or document.
    */
    primaryTopic: prefixer('primaryTopic'),

    /**
    * **[jabber ID](http://xmlns.com/foaf/0.1/jabberID)** (property)
    * 
    * A jabber ID for something.
    */
    jabberID: prefixer('jabberID'),

    /**
    * **[knows](http://xmlns.com/foaf/0.1/knows)** (property)
    * 
    * A person known by this person (indicating some level of reciprocated interaction between the parties).
    */
    knows: prefixer('knows'),

    /**
    * **[lastName](http://xmlns.com/foaf/0.1/lastName)** (property)
    * 
    * The last name of a person.
    */
    lastName: prefixer('lastName'),

    /**
    * **[logo](http://xmlns.com/foaf/0.1/logo)** (property)
    * 
    * A logo representing some thing.
    */
    logo: prefixer('logo'),

    /**
    * **[made](http://xmlns.com/foaf/0.1/made)** (property)
    * 
    * Something that was made by this agent.
    */
    made: prefixer('made'),

    /**
    * **[maker](http://xmlns.com/foaf/0.1/maker)** (property)
    * 
    * An agent that made this thing.
    */
    maker: prefixer('maker'),

    /**
    * **[personal mailbox](http://xmlns.com/foaf/0.1/mbox)** (property)
    * 
    * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
    */
    mbox: prefixer('mbox'),

    /**
    * **[sha1sum of a personal mailbox URI name](http://xmlns.com/foaf/0.1/mbox_sha1sum)** (property)
    * 
    * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
    */
    mbox_sha1sum: prefixer('mbox_sha1sum'),

    /**
    * **[member](http://xmlns.com/foaf/0.1/member)** (property)
    * 
    * Indicates a member of a Group
    */
    member: prefixer('member'),

    /**
    * **[membershipClass](http://xmlns.com/foaf/0.1/membershipClass)** (property)
    * 
    * Indicates the class of individuals that are a member of a Group
    */
    membershipClass: prefixer('membershipClass'),

    /**
    * **[MSN chat ID](http://xmlns.com/foaf/0.1/msnChatID)** (property)
    * 
    * An MSN chat ID
    */
    msnChatID: prefixer('msnChatID'),

    /**
    * **[myersBriggs](http://xmlns.com/foaf/0.1/myersBriggs)** (property)
    * 
    * A Myers Briggs (MBTI) personality classification.
    */
    myersBriggs: prefixer('myersBriggs'),

    /**
    * **[name](http://xmlns.com/foaf/0.1/name)** (property)
    * 
    * A name for some thing.
    */
    name: prefixer('name'),

    /**
    * **[openid](http://xmlns.com/foaf/0.1/openid)** (property)
    * 
    * An OpenID for an Agent.
    */
    openid: prefixer('openid'),

    /**
    * **[topic](http://xmlns.com/foaf/0.1/topic)** (property)
    * 
    * A topic of some page or document.
    */
    topic: prefixer('topic'),

    /**
    * **[past project](http://xmlns.com/foaf/0.1/pastProject)** (property)
    * 
    * A project this person has previously worked on.
    */
    pastProject: prefixer('pastProject'),

    /**
    * **[phone](http://xmlns.com/foaf/0.1/phone)** (property)
    * 
    * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
    */
    phone: prefixer('phone'),

    /**
    * **[plan](http://xmlns.com/foaf/0.1/plan)** (property)
    * 
    * A .plan comment, in the tradition of finger and '.plan' files.
    */
    plan: prefixer('plan'),

    /**
    * **[publications](http://xmlns.com/foaf/0.1/publications)** (property)
    * 
    * A link to the publications of this person.
    */
    publications: prefixer('publications'),

    /**
    * **[schoolHomepage](http://xmlns.com/foaf/0.1/schoolHomepage)** (property)
    * 
    * A homepage of a school attended by the person.
    */
    schoolHomepage: prefixer('schoolHomepage'),

    /**
    * **[sha1sum (hex)](http://xmlns.com/foaf/0.1/sha1)** (property)
    * 
    * A sha1sum hash, in hex.
    */
    sha1: prefixer('sha1'),

    /**
    * **[Skype ID](http://xmlns.com/foaf/0.1/skypeID)** (property)
    * 
    * A Skype ID
    */
    skypeID: prefixer('skypeID'),

    /**
    * **[status](http://xmlns.com/foaf/0.1/status)** (property)
    * 
    * A string expressing what the user is happy for the general public (normally) to know about their current activity.
    */
    status: prefixer('status'),

    /**
    * **[Surname](http://xmlns.com/foaf/0.1/surname)** (property)
    * 
    * The surname of some person.
    */
    surname: prefixer('surname'),

    /**
    * **[theme](http://xmlns.com/foaf/0.1/theme)** (property)
    * 
    * A theme.
    */
    theme: prefixer('theme'),

    /**
    * **[thumbnail](http://xmlns.com/foaf/0.1/thumbnail)** (property)
    * 
    * A derived thumbnail image.
    */
    thumbnail: prefixer('thumbnail'),

    /**
    * **[tipjar](http://xmlns.com/foaf/0.1/tipjar)** (property)
    * 
    * A tipjar document for this agent, describing means for payment and reward.
    */
    tipjar: prefixer('tipjar'),

    /**
    * **[title](http://xmlns.com/foaf/0.1/title)** (property)
    * 
    * Title (Mr, Mrs, Ms, Dr. etc)
    */
    title: prefixer('title'),

    /**
    * **[topic_interest](http://xmlns.com/foaf/0.1/topic_interest)** (property)
    * 
    * A thing of interest to this person.
    */
    topic_interest: prefixer('topic_interest'),

    /**
    * **[weblog](http://xmlns.com/foaf/0.1/weblog)** (property)
    * 
    * A weblog of some thing (whether person, group, company etc.).
    */
    weblog: prefixer('weblog'),

    /**
    * **[work info homepage](http://xmlns.com/foaf/0.1/workInfoHomepage)** (property)
    * 
    * A work info homepage of some person; a page about their work for some organization.
    */
    workInfoHomepage: prefixer('workInfoHomepage'),

    /**
    * **[workplace homepage](http://xmlns.com/foaf/0.1/workplaceHomepage)** (property)
    * 
    * A workplace homepage of some person; the homepage of an organization they work for.
    */
    workplaceHomepage: prefixer('workplaceHomepage'),

    /**
    * **[Yahoo chat ID](http://xmlns.com/foaf/0.1/yahooChatID)** (property)
    * 
    * A Yahoo chat ID
    */
    yahooChatID: prefixer('yahooChatID'),

  
  };

export default foaf

