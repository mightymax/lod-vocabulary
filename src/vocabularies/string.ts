// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2000/10/swap/string#');

/**
 * [string](http://www.w3.org/2000/10/swap/string#})
 */
const string = {
  /**
    * **[contains](http://www.w3.org/2000/10/swap/string#contains)** (property)
    * 
    * True iff the subject string contains the object string.
    */
    contains: prefixer('contains'),

    /**
    * **[contains](http://www.w3.org/2000/10/swap/string#containsIgnoringCase)** (property)
    * 
    * True iff the subject string contains the object string,
    * with the comparison done ignoring the difference between upper case and
    * lower case characters.
    */
    containsIgnoringCase: prefixer('containsIgnoringCase'),

    /**
    * **[ends with](http://www.w3.org/2000/10/swap/string#endsWith)** (property)
    * 
    * True iff the subject string ends with the object string.
    */
    endsWith: prefixer('endsWith'),

    /**
    * **[contains](http://www.w3.org/2000/10/swap/string#equalIgnoringCase)** (property)
    * 
    * True iff the subject string is the same as object string
    * ignoring differences between upper and lower case.
    */
    equalIgnoringCase: prefixer('equalIgnoringCase'),

    /**
    * **[is greater than](http://www.w3.org/2000/10/swap/string#greaterThan)** (property)
    * 
    * True iff the string is greater than the object
    * when ordered according to Unicode(tm) code order.
    */
    greaterThan: prefixer('greaterThan'),

    /**
    * **[is less than](http://www.w3.org/2000/10/swap/string#lessThan)** (property)
    * 
    * True iff the string is less than the object
    * when ordered according to Unicode(tm) code order.
    */
    lessThan: prefixer('lessThan'),

    /**
    * **[contains](http://www.w3.org/2000/10/swap/string#matches)** (property)
    * 
    * The subject is a string;
    * the object is is a regular expression in the perl, python style.
    * It is true iff the string matches the regexp.
    */
    matches: prefixer('matches'),

    /**
    * **[contains](http://www.w3.org/2000/10/swap/string#notEqualIgnoringCase)** (property)
    * 
    * True iff the subject string is the NOT same as object string
    * ignoring differences between upper and lower case.
    */
    notEqualIgnoringCase: prefixer('notEqualIgnoringCase'),

    /**
    * **[is not greater than](http://www.w3.org/2000/10/swap/string#notGreaterThan)** (property)
    * 
    * True iff the string is NOT greater than the object
    * when ordered according to Unicode(tm) code order.
    */
    notGreaterThan: prefixer('notGreaterThan'),

    /**
    * **[is not less than](http://www.w3.org/2000/10/swap/string#notLessThan)** (property)
    * 
    * True iff the string is NOT less than the object
    * when ordered according to Unicode(tm) code order.
    */
    notLessThan: prefixer('notLessThan'),

    /**
    * **[contains](http://www.w3.org/2000/10/swap/string#notMatches)** (property)
    * 
    * The subject string;
    * the object is is a regular expression in the perl, python style.
    * It is true iff the string does NOT match the regexp.
    */
    notMatches: prefixer('notMatches'),

    /**
    * **[replace](http://www.w3.org/2000/10/swap/string#replace)** (property)
    * 
    * A built-in for replacing characters or sub.
    * takes a list of 3 strings; the first is the
    * input data, the second the old and the third the new string.
    * The object is calculated as the rplaced string.
    * For example, ("fofof bar", "of", "baz") string:replace "fbazbaz bar"
    * 
    */
    replace: prefixer('replace'),

    /**
    * **[scrape](http://www.w3.org/2000/10/swap/string#scrape)** (property)
    * 
    * The subject is a list of two strings. The second string is
    * a regular expression in the perl, python style.
    * It must contain one group (a part in parentheses).  If the first string in the list matches
    * the regular expression, then the object is calculated as being the
    * part of the first string which matches the group.
    */
    scrape: prefixer('scrape'),

    /**
    * **[starts with](http://www.w3.org/2000/10/swap/string#startsWith)** (property)
    * 
    * True iff the subject string starts with the object string.
    */
    startsWith: prefixer('startsWith'),

  
  };

export default string

