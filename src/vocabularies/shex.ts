// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/ns/shex#');

/**
 * [shex](http://www.w3.org/ns/shex#})
 */
const shex = {
  /**
    * **[Annotation](http://www.w3.org/ns/shex#Annotation)** (class)
    * 
    * Annotations provide a format-independent way to provide additional information about elements in a schema.
    */
    Annotation: prefixer('Annotation'),

    /**
    * **[Each Of](http://www.w3.org/ns/shex#EachOf)** (class)
    * 
    * A TripleExpression composed of one or more sub-expressions, all of which must match.
    */
    EachOf: prefixer('EachOf'),

    /**
    * **[Triple Expression](http://www.w3.org/ns/shex#TripleExpression)** (class)
    * 
    * The abstract class of Triple Expressions.
    */
    TripleExpression: prefixer('TripleExpression'),

    /**
    * **[IRI Stem](http://www.w3.org/ns/shex#IriStem)** (class)
    * 
    * An IRI prefix used for matching IRIs.
    */
    IriStem: prefixer('IriStem'),

    /**
    * **[Stem](http://www.w3.org/ns/shex#Stem)** (class)
    * 
    * Abstract class for Stems
    */
    Stem: prefixer('Stem'),

    /**
    * **[IRI StemRange](http://www.w3.org/ns/shex#IriStemRange)** (class)
    * 
    * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.
    */
    IriStemRange: prefixer('IriStemRange'),

    /**
    * **[StemRange](http://www.w3.org/ns/shex#StemRange)** (class)
    * 
    * Abstract Class for Stem Ranges
    */
    StemRange: prefixer('StemRange'),

    /**
    * **[Language](http://www.w3.org/ns/shex#Language)** (class)
    * 
    * An Language tag used for matching Literal Languages.
    */
    Language: prefixer('Language'),

    /**
    * **[Language Stem](http://www.w3.org/ns/shex#LanguageStem)** (class)
    * 
    * An Language prefix used for matching Literal Languages.
    */
    LanguageStem: prefixer('LanguageStem'),

    /**
    * **[Language StemRange](http://www.w3.org/ns/shex#LanguageStemRange)** (class)
    * 
    * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.
    */
    LanguageStemRange: prefixer('LanguageStemRange'),

    /**
    * **[Literal Stem](http://www.w3.org/ns/shex#LiteralStem)** (class)
    * 
    * An Literal prefix used for matching Literals.
    */
    LiteralStem: prefixer('LiteralStem'),

    /**
    * **[Literal StemRange](http://www.w3.org/ns/shex#LiteralStemRange)** (class)
    * 
    * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.
    */
    LiteralStemRange: prefixer('LiteralStemRange'),

    /**
    * **[Node Constraint](http://www.w3.org/ns/shex#NodeConstraint)** (class)
    * 
    * A constraint on the type or value of an RDF Node.
    */
    NodeConstraint: prefixer('NodeConstraint'),

    /**
    * **[Shape Expression](http://www.w3.org/ns/shex#ShapeExpression)** (class)
    * 
    * The abstract class of Shape Expressions.
    */
    ShapeExpression: prefixer('ShapeExpression'),

    /**
    * **[Node Kind](http://www.w3.org/ns/shex#NodeKind)** (class)
    * 
    * The set of kinds of RDF Nodes.
    */
    NodeKind: prefixer('NodeKind'),

    /**
    * **[One Of](http://www.w3.org/ns/shex#OneOf)** (class)
    * 
    * A TripleExpression composed of one or more sub-expressions, one of which must match.
    */
    OneOf: prefixer('OneOf'),

    /**
    * **[Schema](http://www.w3.org/ns/shex#Schema)** (class)
    * 
    * A Schema contains the set of shapes, used for matching a focus node.
    */
    Schema: prefixer('Schema'),

    /**
    * **[Semantic Actions](http://www.w3.org/ns/shex#SemAct)** (class)
    * 
    * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.
    */
    SemAct: prefixer('SemAct'),

    /**
    * **[Shape Or](http://www.w3.org/ns/shex#Shape)** (class)
    * 
    * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.
    */
    Shape: prefixer('Shape'),

    /**
    * **[Shape And](http://www.w3.org/ns/shex#ShapeAnd)** (class)
    * 
    * A ShapeExpression composed of one or more sub-expressions, all of which must match.
    */
    ShapeAnd: prefixer('ShapeAnd'),

    /**
    * **[Shape External](http://www.w3.org/ns/shex#ShapeExternal)** (class)
    * 
    * A reference to a shape defined in some external Schema.
    */
    ShapeExternal: prefixer('ShapeExternal'),

    /**
    * **[Shape Not](http://www.w3.org/ns/shex#ShapeNot)** (class)
    * 
    * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.
    */
    ShapeNot: prefixer('ShapeNot'),

    /**
    * **[Shape Or](http://www.w3.org/ns/shex#ShapeOr)** (class)
    * 
    * A ShapeExpression composed of one or more sub-expressions, one of which must match.
    */
    ShapeOr: prefixer('ShapeOr'),

    /**
    * **[annotation](http://www.w3.org/ns/shex#annotation)** (property)
    * 
    * Annotations on a TripleExpression.
    */
    annotation: prefixer('annotation'),

    /**
    * **[Triple Constraint](http://www.w3.org/ns/shex#TripleConstraint)** (class)
    * 
    * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.
    */
    TripleConstraint: prefixer('TripleConstraint'),

    /**
    * **[closed](http://www.w3.org/ns/shex#closed)** (property)
    * 
    * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.
    */
    closed: prefixer('closed'),

    /**
    * **[Wildcard](http://www.w3.org/ns/shex#Wildcard)** (class)
    * 
    * Indicates that a stem is a Wildcard, rather than a URI prefix.
    */
    Wildcard: prefixer('Wildcard'),

    /**
    * **[code](http://www.w3.org/ns/shex#code)** (property)
    * 
    * Code executed by Semantic Action.
    */
    code: prefixer('code'),

    /**
    * **[datatype](http://www.w3.org/ns/shex#datatype)** (property)
    * 
    * A datatype constraint.
    */
    datatype: prefixer('datatype'),

    /**
    * **[exclusion](http://www.w3.org/ns/shex#exclusion)** (property)
    * 
    * Values that are excluded from value matching.
    */
    exclusion: prefixer('exclusion'),

    /**
    * **[expression](http://www.w3.org/ns/shex#expression)** (property)
    * 
    * Expression associated with the TripleExpression.
    */
    expression: prefixer('expression'),

    /**
    * **[expressions](http://www.w3.org/ns/shex#expressions)** (property)
    * 
    * List of 2 or more expressions associated with the TripleExpression.
    */
    expressions: prefixer('expressions'),

    /**
    * **[extends](http://www.w3.org/ns/shex#extends)** (property)
    * 
    * Base shape expressions for this shape.
    */
    extends: prefixer('extends'),

    /**
    * **[extra](http://www.w3.org/ns/shex#extra)** (property)
    * 
    * Properties which may have extra values beyond those matched through a constraint.
    */
    extra: prefixer('extra'),

    /**
    * **[flags](http://www.w3.org/ns/shex#flags)** (property)
    * 
    * Regular expression flags
    */
    flags: prefixer('flags'),

    /**
    * **[fraction digits](http://www.w3.org/ns/shex#fractiondigits)** (property)
    * 
    * for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.
    */
    fractiondigits: prefixer('fractiondigits'),

    /**
    * **[](http://www.w3.org/ns/shex#numericFacet)** (property)
    * 
    * Abstract property of numeric facets on a NodeConstraint.
    */
    numericFacet: prefixer('numericFacet'),

    /**
    * **[inverse](http://www.w3.org/ns/shex#inverse)** (property)
    * 
    * Constrains the subject of a triple, rather than the object.
    */
    inverse: prefixer('inverse'),

    /**
    * **[language tag](http://www.w3.org/ns/shex#languageTag)** (property)
    * 
    * The value used to match the language tag of a language-tagged string.
    */
    languageTag: prefixer('languageTag'),

    /**
    * **[length](http://www.w3.org/ns/shex#length)** (property)
    * 
    * The exact length of the value of the cell.
    */
    length: prefixer('length'),

    /**
    * **[](http://www.w3.org/ns/shex#stringFacet)** (property)
    * 
    * An abstract property of string facets on a NodeConstraint.
    */
    stringFacet: prefixer('stringFacet'),

    /**
    * **[maximum cardinality](http://www.w3.org/ns/shex#max)** (property)
    * 
    * Maximum number of times this TripleExpression may match; -1 for “*”
    */
    max: prefixer('max'),

    /**
    * **[max exclusive](http://www.w3.org/ns/shex#maxexclusive)** (property)
    * 
    * An atomic property that contains a single number that is the maximum valid value (exclusive).
    */
    maxexclusive: prefixer('maxexclusive'),

    /**
    * **[max inclusive](http://www.w3.org/ns/shex#maxinclusive)** (property)
    * 
    * An atomic property that contains a single number that is the maximum valid value (inclusive).
    */
    maxinclusive: prefixer('maxinclusive'),

    /**
    * **[max length](http://www.w3.org/ns/shex#maxlength)** (property)
    * 
    * A numeric atomic property that contains a single integer that is the maximum length of the value.
    */
    maxlength: prefixer('maxlength'),

    /**
    * **[minimum cardinatliy](http://www.w3.org/ns/shex#min)** (property)
    * 
    * Minimum number of times this TripleExpression may match.
    */
    min: prefixer('min'),

    /**
    * **[min exclusive](http://www.w3.org/ns/shex#minexclusive)** (property)
    * 
    * An atomic property that contains a single number that is the minimum valid value (exclusive).
    */
    minexclusive: prefixer('minexclusive'),

    /**
    * **[min inclusive](http://www.w3.org/ns/shex#mininclusive)** (property)
    * 
    * An atomic property that contains a single number that is the minimum valid value (inclusive).
    */
    mininclusive: prefixer('mininclusive'),

    /**
    * **[min length](http://www.w3.org/ns/shex#minlength)** (property)
    * 
    * An atomic property that contains a single integer that is the minimum length of the value.
    */
    minlength: prefixer('minlength'),

    /**
    * **[name](http://www.w3.org/ns/shex#name)** (property)
    * 
    * Identifier of SemAct extension.
    */
    name: prefixer('name'),

    /**
    * **[node kind](http://www.w3.org/ns/shex#nodeKind)** (property)
    * 
    * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.
    */
    nodeKind: prefixer('nodeKind'),

    /**
    * **[](http://www.w3.org/ns/shex#xsFacet)** (property)
    * 
    * An abstract property of string and numeric facets on a NodeConstraint.
    */
    xsFacet: prefixer('xsFacet'),

    /**
    * **[object](http://www.w3.org/ns/shex#object)** (property)
    * 
    * The object of an Annotation.
    */
    object: prefixer('object'),

    /**
    * **[pattern](http://www.w3.org/ns/shex#pattern)** (property)
    * 
    * A regular expression used for matching a value.
    */
    pattern: prefixer('pattern'),

    /**
    * **[predicate](http://www.w3.org/ns/shex#predicate)** (property)
    * 
    * The predicate of a TripleConstraint or Annotation.
    */
    predicate: prefixer('predicate'),

    /**
    * **[semantic action](http://www.w3.org/ns/shex#semActs)** (property)
    * 
    * Semantic Actions on this TripleExpression.
    */
    semActs: prefixer('semActs'),

    /**
    * **[shape expression](http://www.w3.org/ns/shex#shapeExpr)** (property)
    * 
    * Shape Expression referenced by this shape.
    */
    shapeExpr: prefixer('shapeExpr'),

    /**
    * **[shape expressions](http://www.w3.org/ns/shex#shapeExprs)** (property)
    * 
    * A list of 2 or more Shape Expressions referenced by this shape.
    */
    shapeExprs: prefixer('shapeExprs'),

    /**
    * **[shapes](http://www.w3.org/ns/shex#shapes)** (property)
    * 
    * Shapes in this Schema.
    */
    shapes: prefixer('shapes'),

    /**
    * **[start](http://www.w3.org/ns/shex#start)** (property)
    * 
    * A ShapeExpression matched against the focus node prior to any other mapped expressions.
    */
    start: prefixer('start'),

    /**
    * **[start actions](http://www.w3.org/ns/shex#startActs)** (property)
    * 
    * Semantic Actions run on the Schema.
    */
    startActs: prefixer('startActs'),

    /**
    * **[stem](http://www.w3.org/ns/shex#stem)** (property)
    * 
    * A stem value used for matching or excluding values.
    */
    stem: prefixer('stem'),

    /**
    * **[total digits](http://www.w3.org/ns/shex#totaldigits)** (property)
    * 
    * for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n
    */
    totaldigits: prefixer('totaldigits'),

    /**
    * **[value expression](http://www.w3.org/ns/shex#valueExpr)** (property)
    * 
    * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.
    */
    valueExpr: prefixer('valueExpr'),

    /**
    * **[values](http://www.w3.org/ns/shex#values)** (property)
    * 
    * A value restriction on a NodeConstraint.
    */
    values: prefixer('values'),

  
  };

export default shex

