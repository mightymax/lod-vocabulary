// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#');

/**
 * [ebucore](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#})
 */
const ebucore = {
  /**
    * **[Agent](http://purl.org/dc/elements/1.1/Agent)** (class)
    * 
    * A resource that acts or has the power to act.
    */
    'dc11:Agent': prefixer('dc11:Agent'),

    /**
    * **[Asset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Asset)** (class)
    * 
    * The Class "Asset" is an
    * object to which an identifier will be associated at commissioning. It will serve as a
    * central reference point to manage rights associated to EditorialObjects, Resources,
    * MediaResources or Essences, and PublicationEvents (distribution and exploitation
    * conditions).
    */
    Asset: prefixer('Asset'),

    /**
    * **[Media Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MediaResource)** (class)
    * 
    * The use of MediaResource is reserved to
    * audiovisual content. In a production process, several MediaResources can be edited and assembled to realsie an Essence ready for distribution (see IMF package and OPL)
    */
    MediaResource: prefixer('MediaResource'),

    /**
    * **[Publication Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationEvent)** (class)
    * 
    * To describe any manifestation of a media
    * resource on any media (live, on demand, catch-up TV, etc.) and the appropriate
    * PublciationChannel.
    */
    PublicationEvent: prefixer('PublicationEvent'),

    /**
    * **[Business Object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BusinessObject)** (class)
    * 
    * An image, a document, an annotation
    * (descriptive textual metadata or audio/video tag), a tag (time related in audiovisual
    * media resources), or an audiovisual media resource (optionally composed of one or more
    * fragment / part and / or audio, video data tracks). Other types of BusinessObjects may
    * be defined as subclasses.
    */
    BusinessObject: prefixer('BusinessObject'),

    /**
    * **[Event](http://www.bbc.co.uk/ontologies/coreconcepts/Event)** (class)
    * 
    * Music events, historic events, sports events, politics events, e.t.c.
    */
    '': prefixer(''),

    /**
    * **[Organisation](http://www.bbc.co.uk/ontologies/coreconcepts/Organisation)** (class)
    * 
    * E.g., Businesses.
    */
    '': prefixer(''),

    /**
    * **[Person](http://www.bbc.co.uk/ontologies/coreconcepts/Person)** (class)
    * 
    * all types of people such as politicians, athletes, historic figures, contributors in programmes e.t.c.
    */
    '': prefixer(''),

    /**
    * **[Place](http://www.bbc.co.uk/ontologies/coreconcepts/Place)** (class)
    * 
    * Another type of location.
    */
    '': prefixer(''),

    /**
    * **[Theme](http://www.bbc.co.uk/ontologies/coreconcepts/Theme)** (class)
    * 
    * This concept is used to represent intangible things or abstract concepts. For example, Financial Crisis, Midwifery, Happiness.
    */
    '': prefixer(''),

    /**
    * **[Contact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Contact)** (class)
    * 
    * A physical person.
    */
    Contact: prefixer('Contact'),

    /**
    * **[Access conditions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AccessConditions)** (class)
    * 
    * The conditions under which content can be accessed.
    */
    AccessConditions: prefixer('AccessConditions'),

    /**
    * **[Rights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Rights)** (class)
    * 
    * To provide information on the rights, including
    * intellectual property, related to a BusinessObject or Resource.
    */
    Rights: prefixer('Rights'),

    /**
    * **[Action](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Action)** (class)
    * 
    * A class to log Actions.
    */
    Action: prefixer('Action'),

    /**
    * **[Action type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Action_Type)** (class)
    * 
    * To define a type of Action.
    */
    Action_Type: prefixer('Action_Type'),

    /**
    * **[Active format descriptor code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ActiveFormatDescriptorCode)** (class)
    * 
    * To define an active format code.
    */
    ActiveFormatDescriptorCode: prefixer('ActiveFormatDescriptorCode'),

    /**
    * **[Format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Format)** (class)
    * 
    * The format provides technical information on
    * the format of a Resource. A BusinessObject can be instantiated in a variety of Resources
    * each in a particular Format. Other specific data formats may be defined as subclasses of
    * format.
    */
    Format: prefixer('Format'),

    /**
    * **[Affiliation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Affiliation)** (class)
    * 
    * An Organisation to which a Contact is affiliated (with period of validity).
    */
    Affiliation: prefixer('Affiliation'),

    /**
    * **[Organisation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Organisation)** (class)
    * 
    * An organisation (business, corporation, federation, etc.) or moral agent (government body).
    */
    Organisation: prefixer('Organisation'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Agent)** (class)
    * 
    * A person / contact or organisation.
    */
    Agent: prefixer('Agent'),

    /**
    * **[Agent](http://xmlns.com/foaf/0.1/Agent)** (class)
    * 
    * A person or Organisation.
    */
    'foaf:Agent': prefixer('foaf:Agent'),

    /**
    * **[Ancillary data](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AncillaryData)** (class)
    * 
    * Any ancillary data provided with the content
    * other than captioning and subtitling.
    */
    AncillaryData: prefixer('AncillaryData'),

    /**
    * **[Data track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#DataTrack)** (class)
    * 
    * Ancillary data track e.g. Â¨captioning"
    * or "subtitling" in addition to video and audio tracks.
    */
    DataTrack: prefixer('DataTrack'),

    /**
    * **[Ancillary data format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AncillaryDataFormat)** (class)
    * 
    * To define the format of AncillaryData such as
    * legacy data used to be carried in vertical blanking intervals. This is provided as free
    * text in an annotation label or as an identifier pointing to a term in a classification
    * scheme.
    */
    AncillaryDataFormat: prefixer('AncillaryDataFormat'),

    /**
    * **[Data format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#DataFormat)** (class)
    * 
    * To provide addtional technical information on
    * the characteristics of data streams in a MediaResource including but not limited to
    * AncillaryData, Subtilting and Captioning. Additional specific data format may be defined
    * as subclasses of DataFormat.
    */
    DataFormat: prefixer('DataFormat'),

    /**
    * **[Animal](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Animal)** (class)
    * 
    * To identify an animal.
    */
    Animal: prefixer('Animal'),

    /**
    * **[Animal breed code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AnimalBreedCode)** (class)
    * 
    * To provide a breed code for an animal..
    */
    AnimalBreedCode: prefixer('AnimalBreedCode'),

    /**
    * **[Animal colour code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AnimalColourCode)** (class)
    * 
    * To provide a colour code for an animal..
    */
    AnimalColourCode: prefixer('AnimalColourCode'),

    /**
    * **[Annotation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Annotation)** (class)
    * 
    * A class used to annotate Assets.
    */
    Annotation: prefixer('Annotation'),

    /**
    * **[Annotation type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Annotation_Type)** (class)
    * 
    * To define a type of Annotation.
    */
    Annotation_Type: prefixer('Annotation_Type'),

    /**
    * **[Artefact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Artefact)** (class)
    * 
    * To identify and describe artefacts used in a production (on and behind the stage).
    */
    Artefact: prefixer('Artefact'),

    /**
    * **[Artefact type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Artefact_Type)** (class)
    * 
    * To define a type of artefact.
    */
    Artefact_Type: prefixer('Artefact_Type'),

    /**
    * **[Asset type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Asset_Type)** (class)
    * 
    * To define a type of asset.
    */
    Asset_Type: prefixer('Asset_Type'),

    /**
    * **[Atmosphere](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Atmosphere)** (class)
    * 
    * To describe a feeling summarising the atmosphere.
    */
    Atmosphere: prefixer('Atmosphere'),

    /**
    * **[Type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Type)** (class)
    * 
    * An expression of type in textual form or as a term from a classification scheme.
    */
    Type: prefixer('Type'),

    /**
    * **[Target audience](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudienceLevel)** (class)
    * 
    * The target audience (target region, target
    * audience category but also parental guidance recommendation) for which the media
    * resource is intended.
    */
    AudienceLevel: prefixer('AudienceLevel'),

    /**
    * **[Contributor](http://purl.org/dc/elements/1.1/contributor)** (property)
    * 
    * An Agent who has participated in any phase of management of an Asset.
    */
    'dc11:contributor': prefixer('dc11:contributor'),

    /**
    * **[Rating](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Rating)** (class)
    * 
    * This is provided as free text in an annotation
    * label or as an identifier pointing to a term in a classification scheme.
    */
    Rating: prefixer('Rating'),

    /**
    * **[Creator](http://purl.org/dc/elements/1.1/creator)** (property)
    * 
    * To identify the creator of an Asset.
    */
    'dc11:creator': prefixer('dc11:creator'),

    /**
    * **[Audience rating](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudienceRating)** (class)
    * 
    * The audience by which the Resource can be
    * seen according to ratings like MPAA  (http://en.wikipedia.org/wiki/Motion_picture_rating_system) or other organisational / national / local standards.
    */
    AudienceRating: prefixer('AudienceRating'),

    /**
    * **[Date](http://purl.org/dc/elements/1.1/date)** (property)
    * 
    * A date associated with an Asset.
    */
    'dc11:date': prefixer('dc11:date'),

    /**
    * **[Audience score recording technique](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudienceScoreRecordingTechnique)** (class)
    * 
    * To define the technique use to measure an audience score.
    */
    AudienceScoreRecordingTechnique: prefixer('AudienceScoreRecordingTechnique'),

    /**
    * **[Description](http://purl.org/dc/elements/1.1/description)** (property)
    * 
    * A description of an Asset.
    */
    'dc11:description': prefixer('dc11:description'),

    /**
    * **[Audio channel function](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioChannelFunction)** (class)
    * 
    * To define the function of an AudioChannel.
    */
    AudioChannelFunction: prefixer('AudioChannelFunction'),

    /**
    * **[Format](http://purl.org/dc/elements/1.1/format)** (property)
    * 
    * Information about the Format of a Resource.
    */
    'dc11:format': prefixer('dc11:format'),

    /**
    * **[Audio channel purpose](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioChannelPurpose)** (class)
    * 
    * To define the purpose of an AudioChannel.
    */
    AudioChannelPurpose: prefixer('AudioChannelPurpose'),

    /**
    * **[Identifier](http://purl.org/dc/elements/1.1/identifier)** (property)
    * 
    * To provide a simple not strongly structured identifier.
    */
    'dc11:identifier': prefixer('dc11:identifier'),

    /**
    * **[Audio codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioCodec)** (class)
    * 
    * To provide information about an audio codec.
    */
    AudioCodec: prefixer('AudioCodec'),

    /**
    * **[Codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Codec)** (class)
    * 
    * To provide information on a codec.
    */
    Codec: prefixer('Codec'),

    /**
    * **[Publisher](http://purl.org/dc/elements/1.1/publisher)** (property)
    * 
    * An Agent involved in the distribution of content.
    */
    'dc11:publisher': prefixer('dc11:publisher'),

    /**
    * **[Audio content](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioContent)** (class)
    * 
    * An audioContent defines one component of a programme (e.g. background
    * music), its association with an audioGroup (e.g. a 2.0 audioPackFormat of
    * audioChannelFormats for stereo reproduction), its association with an
    * audioStreamFormat, and its set of loudness parameters.
    */
    AudioContent: prefixer('AudioContent'),

    /**
    * **[Rights](http://purl.org/dc/elements/1.1/rights)** (property)
    * 
    * Rights information related to an Asset, aPublicationEvent, a BusinessObject or a resource.
    */
    'dc11:rights': prefixer('dc11:rights'),

    /**
    * **[Programme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Programme)** (class)
    * 
    * An EditorialObject corresponding to a
    * MediaResource ready for publication.
    */
    Programme: prefixer('Programme'),

    /**
    * **[Source](http://purl.org/dc/elements/1.1/source)** (property)
    * 
    * To identify a Resource as the source of another Resource.
    */
    'dc11:source': prefixer('dc11:source'),

    /**
    * **[Audio content type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioContent_Type)** (class)
    * 
    * to define a type of AudioContent.
    */
    AudioContent_Type: prefixer('AudioContent_Type'),

    /**
    * **[Subject](http://purl.org/dc/elements/1.1/subject)** (property)
    * 
    * To associate a Subject or topic addressed by a
    * BusinessObject / Resource.
    */
    'dc11:subject': prefixer('dc11:subject'),

    /**
    * **[Audio description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioDescription)** (class)
    * 
    * A Track containing audio description.
    */
    AudioDescription: prefixer('AudioDescription'),

    /**
    * **[Title](http://purl.org/dc/elements/1.1/title)** (property)
    * 
    * The title by which a BusinessObject is known.
    */
    'dc11:title': prefixer('dc11:title'),

    /**
    * **[Audio track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioTrack)** (class)
    * 
    * An audioTrack is the basic audio data container of a medium. Attribute is
    * an unambiguous reference to this container in a given medium.
    */
    AudioTrack: prefixer('AudioTrack'),

    /**
    * **[Type](http://purl.org/dc/elements/1.1/type)** (property)
    * 
    * A concept associated with an Asset.
    */
    'dc11:type': prefixer('dc11:type'),

    /**
    * **[Audio encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioEncodingFormat)** (class)
    * 
    * The encoding format for the audio.
    */
    AudioEncodingFormat: prefixer('AudioEncodingFormat'),

    /**
    * **[Alternative title](http://purl.org/dc/terms/alternative)** (property)
    * 
    * An alternative to the title.
    */
    'dcterms:alternative': prefixer('dcterms:alternative'),

    /**
    * **[Encoding](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#EncodingFormat)** (class)
    * 
    * To provide a definition of the encoding format
    * for audio and video. This is provided as free text in an annotation label or as an
    * identifier pointing to a term in a classification scheme e.g.
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS.rdf or
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_VideoCompressionCodeCS.rdf.
    */
    EncodingFormat: prefixer('EncodingFormat'),

    /**
    * **[Contributor](http://purl.org/dc/terms/contributor)** (property)
    * 
    * In the context of EBUCore, reserved for the annotation of RDF properties.
    */
    'dcterms:contributor': prefixer('dcterms:contributor'),

    /**
    * **[Audio format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioFormat)** (class)
    * 
    * To define an AudioFormat.
    */
    AudioFormat: prefixer('AudioFormat'),

    /**
    * **[Title](http://purl.org/dc/terms/title)** (property)
    * 
    * In the context of EBUCore, reserved for the annotation of RDF properties.
    */
    'dcterms:title': prefixer('dcterms:title'),

    /**
    * **[Audio object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioObject)** (class)
    * 
    * To define an audio object in reference to the Audio Definition Model (ADM)
    */
    AudioObject: prefixer('AudioObject'),

    /**
    * **[Date of birth](http://www.bbc.co.uk/ontologies/coreconcepts/dateOfBirth)** (property)
    * 
    * The date when a Contact/Person is born.
    */
    '': prefixer(''),

    /**
    * **[Audio programme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioProgramme)** (class)
    * 
    * A set of one or more audioContent that derive from the same material,
    * i.e. an audioMultiplex, and the definition of its multiplexed audioContents (e.g.
    * foreground and commentary, background music).
    */
    AudioProgramme: prefixer('AudioProgramme'),

    /**
    * **[Date of death.](http://www.bbc.co.uk/ontologies/coreconcepts/dateOfDeath)** (property)
    * 
    * To provide the date of death.
    */
    '': prefixer(''),

    /**
    * **[Audio programme type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioProgramme_Type)** (class)
    * 
    * to define a type of AudioProgramme.
    */
    AudioProgramme_Type: prefixer('AudioProgramme_Type'),

    /**
    * **[Gender](http://www.bbc.co.uk/ontologies/coreconcepts/gender)** (property)
    * 
    * The gender of a person e.g. male or female.
    */
    '': prefixer(''),

    /**
    * **[Audio stream](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioStream)** (class)
    * 
    * An audioStreamFormat describes a decodable signal - PCM signal or a Dolby E stream for example. It is composed of one or more AudioTracks.
    */
    AudioStream: prefixer('AudioStream'),

    /**
    * **[Place of birth](http://www.bbc.co.uk/ontologies/coreconcepts/placeOfBirth)** (property)
    * 
    * The place where a person is born.
    */
    '': prefixer(''),

    /**
    * **[Stream](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Stream)** (class)
    * 
    * A continuous stream of bits.
    */
    Stream: prefixer('Stream'),

    /**
    * **[Primary topic](http://www.bbc.co.uk/ontologies/coreconcepts/primaryTopic)** (property)
    * 
    * The main subject of interest.
    */
    '': prefixer(''),

    /**
    * **[Track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Track)** (class)
    * 
    * Audiovisual content can be composed of audio,
    * video and data Tracks (including captioning and subtitling).
    */
    Track: prefixer('Track'),

    /**
    * **[DID](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#DID)** (property)
    * 
    * The Data Identifier word (along with the SDID,
    * if used), indicates the type of ancillary data that the packet corresponds
    * to.
    */
    DID: prefixer('DID'),

    /**
    * **[Audio track purpose](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#AudioTrackPurpose)** (class)
    * 
    * To describe the purpose of an AudioTrack e.g. dubbing.
    */
    AudioTrackPurpose: prefixer('AudioTrackPurpose'),

    /**
    * **[SDID](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#SDID)** (property)
    * 
    * Secondary data identification word for
    * ancillary data. Send mode identifier. An identifier which indicates the transmission
    * timing for closed caption data.
    */
    SDID: prefixer('SDID'),

    /**
    * **[Award](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Award)** (class)
    * 
    * To describe an Award and associated information.
    */
    Award: prefixer('Award'),

    /**
    * **[Abridged title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#abrigedTitle)** (property)
    * 
    * An abridged title.
    */
    abrigedTitle: prefixer('abrigedTitle'),

    /**
    * **[Award type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Award_Type)** (class)
    * 
    * To define a type of Award.
    */
    Award_Type: prefixer('Award_Type'),

    /**
    * **[Alternative title.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#alternativeTitle)** (property)
    * 
    * To provide an alternative title.
    */
    alternativeTitle: prefixer('alternativeTitle'),

    /**
    * **[BMContent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BMContent)** (class)
    * 
    * The FIMS BMContent.
    */
    BMContent: prefixer('BMContent'),

    /**
    * **[Abstract](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#abstract)** (property)
    * 
    * To provide an abstract.
    */
    abstract: prefixer('abstract'),

    /**
    * **[Editorial Object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#EditorialObject)** (class)
    * 
    * In the audiovisual domain, the Class
    * EditorialObject transforms a commissioned concept into an editorial definition of a
    * MediaResource before fabrication (in the Production Domain) and Distribution (in the
    * Distribution Domain). An EditorialObject is a set of descriptive metadata summarising
    * e.g. editing decisions. An EditorialObject can also be a part of an EditorialObject,
    * which is defined by its start time and duration. An EditorialObject can also be a group
    * of EditorialObjects. For example a series composed of episodes is defined as an
    * EditorialObject.
    */
    EditorialObject: prefixer('EditorialObject'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#description)** (property)
    * 
    * This can be specialised by using sub-properties
    * like defined in http://www.ebu.ch/metadata/cs/web/ebu_DescriptionTypeCodeCS_p.xml.htm
    * implemented as examples as e.g. 'summary' or
    * 'script'.
    */
    description: prefixer('description'),

    /**
    * **[BMEssence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BMEssence)** (class)
    * 
    * The FIMS Essence
    */
    BMEssence: prefixer('BMEssence'),

    /**
    * **[Action description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionDescription)** (property)
    * 
    * The description of an Action.
    */
    actionDescription: prefixer('actionDescription'),

    /**
    * **[Essence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Essence)** (class)
    * 
    * Essence is content ready for distribution. Essence can become a MediaResource in further production processes.
    */
    Essence: prefixer('Essence'),

    /**
    * **[Action identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionId)** (property)
    * 
    * An identifier attributed to an Action.
    */
    actionId: prefixer('actionId'),

    /**
    * **[BMTemplate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BMTemplate)** (class)
    * 
    * A template describe as a BMEssence.
    */
    BMTemplate: prefixer('BMTemplate'),

    /**
    * **[Action name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionName)** (property)
    * 
    * The name of an Action.
    */
    actionName: prefixer('actionName'),

    /**
    * **[Template](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Template)** (class)
    * 
    * An Essence defined as a Template with all associated technical parameters.
    */
    Template: prefixer('Template'),

    /**
    * **[Action timestamp](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionTimestamp)** (property)
    * 
    * The time when the Action occurs.
    */
    actionTimestamp: prefixer('actionTimestamp'),

    /**
    * **[Bibliographical object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BibliographicalObject)** (class)
    * 
    * Documents of various nature.
    */
    BibliographicalObject: prefixer('BibliographicalObject'),

    /**
    * **[Action edit unit number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionTimestampEditUnits)** (property)
    * 
    * The edit unit number at which the Action occurs.
    */
    actionTimestampEditUnits: prefixer('actionTimestampEditUnits'),

    /**
    * **[Biography](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Biography)** (class)
    * 
    * To record a biography.
    */
    Biography: prefixer('Biography'),

    /**
    * **[Action normal play time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionTimestampNormalPlayTime)** (property)
    * 
    * The normal play time at which the Action occurs.
    */
    actionTimestampNormalPlayTime: prefixer('actionTimestampNormalPlayTime'),

    /**
    * **[Brand](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Brand)** (class)
    * 
    * A group of EditorialObjects having a Brand as a
    * common denominator.
    */
    Brand: prefixer('Brand'),

    /**
    * **[Action timecode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionTimestampTimecode)** (property)
    * 
    * The timecode at which the Action occurs.
    */
    actionTimestampTimecode: prefixer('actionTimestampTimecode'),

    /**
    * **[Group](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Group)** (class)
    * 
    * To define a collection / group of media
    * resources, for example a series made of episodes.
    */
    Group: prefixer('Group'),

    /**
    * **[Action timecode (dropframe)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionTimestampTimecodeDropFrame)** (property)
    * 
    * The timecode (dropframe) at which the Action occurs.
    */
    actionTimestampTimecodeDropFrame: prefixer('actionTimestampTimecodeDropFrame'),

    /**
    * **[Breaking news item](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BreakingNewsItem)** (class)
    * 
    * To describe a breaking news.
    */
    BreakingNewsItem: prefixer('BreakingNewsItem'),

    /**
    * **[Action type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#actionType)** (property)
    * 
    * A type of Action.
    */
    actionType: prefixer('actionType'),

    /**
    * **[Item](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Item)** (class)
    * 
    * An item e.g. newsItem or sportItem
    */
    Item: prefixer('Item'),

    /**
    * **[Activity end date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#activityEndDate)** (property)
    * 
    * To provide the end date of activity of an Organisation.
    */
    activityEndDate: prefixer('activityEndDate'),

    /**
    * **[Business object type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#BusinessObject_Type)** (class)
    * 
    * To define a type of business object.
    */
    BusinessObject_Type: prefixer('BusinessObject_Type'),

    /**
    * **[Activity start date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#activityStartDate)** (property)
    * 
    * To provide the start date of activity of an Organisation.
    */
    activityStartDate: prefixer('activityStartDate'),

    /**
    * **[Captioning](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Captioning)** (class)
    * 
    * To signal the presence of hard of hearing
    * captioning.
    */
    Captioning: prefixer('Captioning'),

    /**
    * **[Adult content flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#adultContent)** (property)
    * 
    * A flag to indiucate adult content.
    */
    adultContent: prefixer('adultContent'),

    /**
    * **[Captioning format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CaptioningFormat)** (class)
    * 
    * To define the format of captioning.
    * Captioning's main use isfor hard of hearing transcription. This is provided as
    * free text in an annotation label or as an identifier pointing to a term in a
    * classification scheme.
    */
    CaptioningFormat: prefixer('CaptioningFormat'),

    /**
    * **[Affiliation end date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#affiliationEndDate)** (property)
    * 
    * The date of end of Affiliation.
    */
    affiliationEndDate: prefixer('affiliationEndDate'),

    /**
    * **[Cast member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Cast)** (class)
    * 
    * A member of the cast list (a list of performers/actors and associated fictitious
    * characters).
    */
    Cast: prefixer('Cast'),

    /**
    * **[Affiliation start date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#affiliationStartDate)** (property)
    * 
    * The date of Affiliation.
    */
    affiliationStartDate: prefixer('affiliationStartDate'),

    /**
    * **[Character](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Character)** (class)
    * 
    * E.g. a fictitious contact / person.
    */
    Character: prefixer('Character'),

    /**
    * **[Age](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#age)** (property)
    * 
    * The age of a Contact/Person.
    */
    age: prefixer('age'),

    /**
    * **[Person](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Person)** (class)
    * 
    * To describe a Person.
    */
    Person: prefixer('Person'),

    /**
    * **[DBPedia](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentDbpedia)** (property)
    * 
    * A link to a DBPedia page.
    */
    agentDbpedia: prefixer('agentDbpedia'),

    /**
    * **[City code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CityCode)** (class)
    * 
    * To allocate a city code.
    */
    CityCode: prefixer('CityCode'),

    /**
    * **[Agent linked data](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentLinkedData)** (property)
    * 
    * Range: a URL or URI.
    */
    agentLinkedData: prefixer('agentLinkedData'),

    /**
    * **[Clip](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Clip)** (class)
    * 
    * For use in models where Clip is common.
    */
    Clip: prefixer('Clip'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentDescription)** (property)
    * 
    * To provide a description of an Agent.
    */
    agentDescription: prefixer('agentDescription'),

    /**
    * **[Closed caption](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ClosedCaptions)** (class)
    * 
    * Closed captioning is provided as separate
    * content.
    */
    ClosedCaptions: prefixer('ClosedCaptions'),

    /**
    * **[email](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentEmailAddress)** (property)
    * 
    * To provide an email address.
    */
    agentEmailAddress: prefixer('agentEmailAddress'),

    /**
    * **[Closed subtitling](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ClosedSubtitling)** (class)
    * 
    * Closed subtitles are provided as separate
    * content.
    */
    ClosedSubtitling: prefixer('ClosedSubtitling'),

    /**
    * **[Subtitling](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Subtitling)** (class)
    * 
    * To signal the presence of subtitles for
    * translation in alternative languages.
    */
    Subtitling: prefixer('Subtitling'),

    /**
    * **[Socail media](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentSocialMedia)** (property)
    * 
    * Links to an Agent's social media.
    */
    agentSocialMedia: prefixer('agentSocialMedia'),

    /**
    * **[Collection](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Collection)** (class)
    * 
    * A group of EditorialObjects. There can be many
    * types of collections for which specific sub-classes should be defined. In the worl of
    * archives, A collection corresponds to all items belonging to an individual /
    * collector.
    */
    Collection: prefixer('Collection'),

    /**
    * **[Agent fee](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentFee)** (property)
    * 
    * The fee of an Agent.
    */
    agentFee: prefixer('agentFee'),

    /**
    * **[Colour space](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ColourSpace)** (class)
    * 
    * The CoulourSpace of a VideoResource. A
    * ColourSpace is defined as free text in an annotation label or as an identifier pointing
    * to a term in a classification scheme such as
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_ColourCodeCS.rdf.
    */
    ColourSpace: prefixer('ColourSpace'),

    /**
    * **[Commercial code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CommercialCode)** (class)
    * 
    * To identify a type of commercial content.
    */
    CommercialCode: prefixer('CommercialCode'),

    /**
    * **[Agent identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentId)** (property)
    * 
    * An identifier attributed to an Agent.
    */
    agentId: prefixer('agentId'),

    /**
    * **[Component](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Component)** (class)
    * 
    * A component e.g. audio, video, data or else or a MediaResource or Essence.
    */
    Component: prefixer('Component'),

    /**
    * **[Wikidata](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentImdb)** (property)
    * 
    * A link to an imdb page.
    */
    agentImdb: prefixer('agentImdb'),

    /**
    * **[Container codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContainerCodec)** (class)
    * 
    * To identify an container codec, e.g. MXF
    */
    ContainerCodec: prefixer('ContainerCodec'),

    /**
    * **[Container encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContainerEncodingFormat)** (class)
    * 
    * To define the conatiner encoding format.
    */
    ContainerEncodingFormat: prefixer('ContainerEncodingFormat'),

    /**
    * **[Container Mime type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContainerMimeType)** (class)
    * 
    * The definition of the container if available as
    * a MIME type. This is provided as free text in an annotation label or as an identifier
    * pointing to a term in a classification scheme. For more information:
    * http://www.iana.org/assignments/media-types/application/index.html.
    */
    ContainerMimeType: prefixer('ContainerMimeType'),

    /**
    * **[Mobile](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentMobileTelephoneNumber)** (property)
    * 
    * To provide the mobile telephone number of an
    * Agent (Contact/Person or organisation)
    */
    agentMobileTelephoneNumber: prefixer('agentMobileTelephoneNumber'),

    /**
    * **[Content alert](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContentAlert)** (class)
    * 
    * To provide information about a particular type of content potentially sensitive.
    */
    ContentAlert: prefixer('ContentAlert'),

    /**
    * **[Telephone](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentTelephoneNumber)** (property)
    * 
    * To provide the telephone number of an Agent
    * (Contact/Person or Organisation).
    */
    agentTelephoneNumber: prefixer('agentTelephoneNumber'),

    /**
    * **[Editorial code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContentEditorialCode)** (class)
    * 
    * To define a code of EditorialFormat
    */
    ContentEditorialCode: prefixer('ContentEditorialCode'),

    /**
    * **[Name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentName)** (property)
    * 
    * To provide a name of an Agent.
    */
    agentName: prefixer('agentName'),

    /**
    * **[Editorial format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContentEditorialFormat)** (class)
    * 
    * To define an EditorialFormat
    */
    ContentEditorialFormat: prefixer('ContentEditorialFormat'),

    /**
    * **[Nickname](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentNickname)** (property)
    * 
    * To provide a nickname of a Contact/Person.
    */
    agentNickname: prefixer('agentNickname'),

    /**
    * **[Contract type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ContractType)** (class)
    * 
    * To define a type of contract.
    */
    ContractType: prefixer('ContractType'),

    /**
    * **[Previous name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentPreviousName)** (property)
    * 
    * To provide the previous name of a Contact/Person.
    */
    agentPreviousName: prefixer('agentPreviousName'),

    /**
    * **[Copyright](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Copyright)** (class)
    * 
    * To provide a copyright
    * statement.
    */
    Copyright: prefixer('Copyright'),

    /**
    * **[Related information link](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentRelatedInformationLink)** (property)
    * 
    * To provide a link to a web resource containing
    * information related to an Agent (Contact/Person or Organisation).
    */
    agentRelatedInformationLink: prefixer('agentRelatedInformationLink'),

    /**
    * **[Costume](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Costume)** (class)
    * 
    * To identify and describe Costumes used in productions.
    */
    Costume: prefixer('Costume'),

    /**
    * **[Related link](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentRelatedLink)** (property)
    * 
    * To provide a link to e.g. a web resource related to an Agent.
    */
    agentRelatedLink: prefixer('agentRelatedLink'),

    /**
    * **[Costume type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CostumeType)** (class)
    * 
    * To define a costume type.
    */
    CostumeType: prefixer('CostumeType'),

    /**
    * **[Related press link](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentRelatedPressLink)** (property)
    * 
    * To provide a link to a web resource containing
    * information related to an Agent (Contact/Person or Organisation).
    */
    agentRelatedPressLink: prefixer('agentRelatedPressLink'),

    /**
    * **[Country code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CountryCode)** (class)
    * 
    * To identify a country by its ISO code.
    */
    CountryCode: prefixer('CountryCode'),

    /**
    * **[Coverage restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CoverageRestrictions)** (class)
    * 
    * To provide information on possible restrictions
    * regarding the temporal and spatial coverage for publication.
    */
    CoverageRestrictions: prefixer('CoverageRestrictions'),

    /**
    * **[Agent type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentType)** (property)
    * 
    * Range: string or anyURI or Concept.
    */
    agentType: prefixer('agentType'),

    /**
    * **[Creative commons](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CreativeCommons)** (class)
    * 
    * A set of creative commons rights.
    */
    CreativeCommons: prefixer('CreativeCommons'),

    /**
    * **[Homepage](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentWebHomepage)** (property)
    * 
    * To provide the address of the webpage of an
    * Agent (Contact/Person or Organisation).
    */
    agentWebHomepage: prefixer('agentWebHomepage'),

    /**
    * **[Crew member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Crew)** (class)
    * 
    * A member of the Crew.
    */
    Crew: prefixer('Crew'),

    /**
    * **[Wikidata](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#agentWikidata)** (property)
    * 
    * A link to a wikidata page.
    */
    agentWikidata: prefixer('agentWikidata'),

    /**
    * **[Cuisine style](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CuisineStyle)** (class)
    * 
    * To identify a style of Cuisine.
    */
    CuisineStyle: prefixer('CuisineStyle'),

    /**
    * **[Currency code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#CurrencyCode)** (class)
    * 
    * To identify a currency by its ISO code.
    */
    CurrencyCode: prefixer('CurrencyCode'),

    /**
    * **[Animal birth year](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalBirthYear)** (property)
    * 
    * To year of birth of an animal.
    */
    animalBirthYear: prefixer('animalBirthYear'),

    /**
    * **[Department](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Department)** (class)
    * 
    * A department within and
    * organisation.
    */
    Department: prefixer('Department'),

    /**
    * **[Animal character name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalCharacterName)** (property)
    * 
    * To associate a fictitious character name with an animal.
    */
    animalCharacterName: prefixer('animalCharacterName'),

    /**
    * **[Depicted Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#DepictedEvent)** (class)
    * 
    * A DepictedEVent is fictitious or historical or
    * other sort of Event that the content of the BusinessObject or resource relates
    * to.
    */
    DepictedEvent: prefixer('DepictedEvent'),

    /**
    * **[Animal code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalCode)** (property)
    * 
    * To associate a code with an animal.
    */
    animalCode: prefixer('animalCode'),

    /**
    * **[Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Event)** (class)
    * 
    * Additional types of event shall be defined as
    * new sub-classes of event.
    */
    Event: prefixer('Event'),

    /**
    * **[Animal description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalDescription)** (property)
    * 
    * To describe an animal.
    */
    animalDescription: prefixer('animalDescription'),

    /**
    * **[Disclaimer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Disclaimer)** (class)
    * 
    * To provide a disclaimer of any
    * form.
    */
    Disclaimer: prefixer('Disclaimer'),

    /**
    * **[Animal gender](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalGender)** (property)
    * 
    * To give the gender of an animal.
    */
    animalGender: prefixer('animalGender'),

    /**
    * **[Document](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Document)** (class)
    * 
    * To describe a publication in the form of a
    * document e.g. a html webpage (news item) or a pdf document e.g. a script.
    */
    Document: prefixer('Document'),

    /**
    * **[Animal Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalId)** (property)
    * 
    * To associate an Id with an animal.
    */
    animalId: prefixer('animalId'),

    /**
    * **[Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Resource)** (class)
    * 
    * To describe a Resource.
    */
    Resource: prefixer('Resource'),

    /**
    * **[Animal name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalName)** (property)
    * 
    * To name an animal.
    */
    animalName: prefixer('animalName'),

    /**
    * **[Document format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#DocumentFormat)** (class)
    * 
    * To provide technical information about the
    * format of a document such as the orientation. This is provided as free text in an
    * annotation label or as an identifier pointing to a term in a classification
    * scheme.
    */
    DocumentFormat: prefixer('DocumentFormat'),

    /**
    * **[Animal passport](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#animalPassport)** (property)
    * 
    * To replicate the passport of an animal.
    */
    animalPassport: prefixer('animalPassport'),

    /**
    * **[Dopesheet](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Dopesheet)** (class)
    * 
    * Provides additional information about a NewsItem, e.g. date and place, subject.
    */
    Dopesheet: prefixer('Dopesheet'),

    /**
    * **[Annotation confidence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationConfidence)** (property)
    * 
    * To estimate the confidence in an Annotation.
    */
    annotationConfidence: prefixer('annotationConfidence'),

    /**
    * **[Editorial object type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#EditorialObject_Type)** (class)
    * 
    * To define a type of editorial object.
    */
    EditorialObject_Type: prefixer('EditorialObject_Type'),

    /**
    * **[Annotation curation date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationCurationDateTime)** (property)
    * 
    * To provide the date and time when an Annotation has been reviewed.
    */
    annotationCurationDateTime: prefixer('annotationCurationDateTime'),

    /**
    * **[Emotion](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Emotion)** (class)
    * 
    * A class to log Emotions.
    */
    Emotion: prefixer('Emotion'),

    /**
    * **[Annotation description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationDescription)** (property)
    * 
    * To describe an Annotation.
    */
    annotationDescription: prefixer('annotationDescription'),

    /**
    * **[Emotion type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Emotion_Type)** (class)
    * 
    * To define a type of emotion.
    */
    Emotion_Type: prefixer('Emotion_Type'),

    /**
    * **[Annotation Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationId)** (property)
    * 
    * To identify an Annotation.
    */
    annotationId: prefixer('annotationId'),

    /**
    * **[Episode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Episode)** (class)
    * 
    * To describe an episode in a series.
    */
    Episode: prefixer('Episode'),

    /**
    * **[Annotation name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationName)** (property)
    * 
    * To name an Annotation.
    */
    annotationName: prefixer('annotationName'),

    /**
    * **[Event type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#EventType)** (class)
    * 
    * To define a type of event.
    */
    EventType: prefixer('EventType'),

    /**
    * **[Annotation saliency](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationSaliency)** (property)
    * 
    * To estimate the saliency of an Annotation.
    */
    annotationSaliency: prefixer('annotationSaliency'),

    /**
    * **[Exclusivity type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ExclusivityType)** (class)
    * 
    * To define a type of exclusity rights.
    */
    ExclusivityType: prefixer('ExclusivityType'),

    /**
    * **[Annotation type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#annotationType)** (property)
    * 
    * To define a type of Annotation.
    */
    annotationType: prefixer('annotationType'),

    /**
    * **[Exploitation issues](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ExploitationIssues)** (class)
    * 
    * To highlight potential exploitation
    * issues.
    */
    ExploitationIssues: prefixer('ExploitationIssues'),

    /**
    * **[Exclusion area](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#appliesOutOf)** (property)
    * 
    * Range: string or CountryCode.
    */
    appliesOutOf: prefixer('appliesOutOf'),

    /**
    * **[Feature](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Feature)** (class)
    * 
    * The editorial object for a feature film.
    */
    Feature: prefixer('Feature'),

    /**
    * **[Media resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#appliesTo)** (property)
    * 
    * To identify the media resource to which the Rating applies.
    */
    appliesTo: prefixer('appliesTo'),

    /**
    * **[Fictional event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FictionalEvent)** (class)
    * 
    * To describe a fictional Event.
    */
    FictionalEvent: prefixer('FictionalEvent'),

    /**
    * **[Asset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#applyTo)** (property)
    * 
    * The Asset to which Rights apply.
    */
    applyTo: prefixer('applyTo'),

    /**
    * **[Fictional location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FictionalLocation)** (class)
    * 
    * To describe a fictional Location.
    */
    FictionalLocation: prefixer('FictionalLocation'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#approvedBy)** (property)
    * 
    * Range: Agent or string
    */
    approvedBy: prefixer('approvedBy'),

    /**
    * **[Location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Location)** (class)
    * 
    * This is provided as free text in an annotation
    * label or as an identifier pointing to a term in a classification scheme.
    */
    Location: prefixer('Location'),

    /**
    * **[Artefact availability flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactAvailability)** (property)
    * 
    * To flag the availability of an Artefact.
    */
    artefactAvailability: prefixer('artefactAvailability'),

    /**
    * **[Fictional organisation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FictionalOrganisation)** (class)
    * 
    * To define a fictional Organisation.
    */
    FictionalOrganisation: prefixer('FictionalOrganisation'),

    /**
    * **[Artefact box height.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactBoxHeight)** (property)
    * 
    * The height of the box containing the Artefact.
    */
    artefactBoxHeight: prefixer('artefactBoxHeight'),

    /**
    * **[Fictional person](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FictionalPerson)** (class)
    * 
    * To describe a fictional Person, e.g. a character in a drama.
    */
    FictionalPerson: prefixer('FictionalPerson'),

    /**
    * **[Artefact box top left corner Y position.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactBoxTopLeftCornerLineNumber)** (property)
    * 
    * The coordinates on a vertical axis of the position of the top left corner of the box containing the Artefact.
    */
    artefactBoxTopLeftCornerLineNumber: prefixer('artefactBoxTopLeftCornerLineNumber'),

    /**
    * **[File format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FileFormat)** (class)
    * 
    * A file format for Resources other than
    * audiovisual resources. The format is defined as free text or pointing at a term in a
    * classification scheme e.g.
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_FileFormatCS.rdf.
    */
    FileFormat: prefixer('FileFormat'),

    /**
    * **[Artefact box top left corner X position.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactBoxTopLeftCornerPixelNumber)** (property)
    * 
    * The coordinates on an horizontal axis of the position of the top left corner of the box containing the Artefact.
    */
    artefactBoxTopLeftCornerPixelNumber: prefixer('artefactBoxTopLeftCornerPixelNumber'),

    /**
    * **[Food](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Food)** (class)
    * 
    * To describe Food shown or consumed in productions.
    */
    Food: prefixer('Food'),

    /**
    * **[Artefact box width.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactBoxWidth)** (property)
    * 
    * The width of the box containing the Artefact.
    */
    artefactBoxWidth: prefixer('artefactBoxWidth'),

    /**
    * **[Food style](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#FoodStyle)** (class)
    * 
    * To define a style of food.
    */
    FoodStyle: prefixer('FoodStyle'),

    /**
    * **[Artefact brand](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactBrand)** (property)
    * 
    * To specify the brand of an Artefact.
    */
    artefactBrand: prefixer('artefactBrand'),

    /**
    * **[Generation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Generation)** (class)
    * 
    * Identifies the generation of a version of a resource, i.e. master, edit master, distribution copy, etc.
    */
    Generation: prefixer('Generation'),

    /**
    * **[Artefact colour(s)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactColour)** (property)
    * 
    * To provide the clour(s) of an Artefact.
    */
    artefactColour: prefixer('artefactColour'),

    /**
    * **[Genre](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Genre)** (class)
    * 
    * This class shall be used to provide information
    * on the genre of the BusinessObject or Resource. This is provided as free text in an
    * annotation label or as an identifier pointing to a term in a classification scheme e.g.
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_ContentGenreCS.rdf or
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_EditorialFormatCodeCS.rdf.
    */
    Genre: prefixer('Genre'),

    /**
    * **[Artefact comment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactComment)** (property)
    * 
    * To provide a contextual comment about an Artefact.
    */
    artefactComment: prefixer('artefactComment'),

    /**
    * **[IPR restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#IPRRestrictions)** (class)
    * 
    * To provide information on intellectual
    * property.
    */
    IPRRestrictions: prefixer('IPRRestrictions'),

    /**
    * **[Artefact date of purchase](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactDateOfPurchase)** (property)
    * 
    * The date when an Artefact was purchased. .
    */
    artefactDateOfPurchase: prefixer('artefactDateOfPurchase'),

    /**
    * **[Identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Identifier)** (class)
    * 
    * To support the use of structured identifiers.
    */
    Identifier: prefixer('Identifier'),

    /**
    * **[Artefact date of sell](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactDateOfSell)** (property)
    * 
    * The date when an Artefact was sold.
    */
    artefactDateOfSell: prefixer('artefactDateOfSell'),

    /**
    * **[Identifier type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#IdentifierType)** (class)
    * 
    * To define a type of identifier.
    */
    IdentifierType: prefixer('IdentifierType'),

    /**
    * **[Artefact description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactDescription)** (property)
    * 
    * A description of an Artefact.
    */
    artefactDescription: prefixer('artefactDescription'),

    /**
    * **[Image](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Image)** (class)
    * 
    * A still image / thumbnail / key frame / logo
    * related to the media resource or being the media resource itself.
    */
    Image: prefixer('Image'),

    /**
    * **[Artefact Identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactId)** (property)
    * 
    * Range: string or Identifier.
    */
    artefactId: prefixer('artefactId'),

    /**
    * **[Image codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ImageCodec)** (class)
    * 
    * to identify a codec for images
    */
    ImageCodec: prefixer('ImageCodec'),

    /**
    * **[Artefact model](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactModel)** (property)
    * 
    * To specify a model of an Artefact.
    */
    artefactModel: prefixer('artefactModel'),

    /**
    * **[Image format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ImageFormat)** (class)
    * 
    * To provide technical information about the
    * format of an image such as the orientation. This is provided as free text in an
    * annotation label or as an identifier pointing to a term in a classification
    * scheme.
    */
    ImageFormat: prefixer('ImageFormat'),

    /**
    * **[Artefact name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactName)** (property)
    * 
    * A name associated with an Artefact.
    */
    artefactName: prefixer('artefactName'),

    /**
    * **[Intention code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#IntentionCode)** (class)
    * 
    * To indicate the purpose for which content was created.
    */
    IntentionCode: prefixer('IntentionCode'),

    /**
    * **[Artefact period](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactPeriod)** (property)
    * 
    * To specify the period associated with an Artefact.
    */
    artefactPeriod: prefixer('artefactPeriod'),

    /**
    * **[Key career event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#KeyCareerEvent)** (class)
    * 
    * To describe a key career Event of a Contact.
    */
    KeyCareerEvent: prefixer('KeyCareerEvent'),

    /**
    * **[Artefact price](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactPriceAmount)** (property)
    * 
    * To specifythe price of an Artefact.
    */
    artefactPriceAmount: prefixer('artefactPriceAmount'),

    /**
    * **[Key event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#KeyEvent)** (class)
    * 
    * To describe a significant event.
    */
    KeyEvent: prefixer('KeyEvent'),

    /**
    * **[Artefact reference](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactReference)** (property)
    * 
    * To specify a reference of an Artefact.
    */
    artefactReference: prefixer('artefactReference'),

    /**
    * **[Key personal event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#KeyPersonalEvent)** (class)
    * 
    * A key personal Event of a Contact.
    */
    KeyPersonalEvent: prefixer('KeyPersonalEvent'),

    /**
    * **[Artefact style](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactStyle)** (property)
    * 
    * To specify the style associated with an Artefact.
    */
    artefactStyle: prefixer('artefactStyle'),

    /**
    * **[key frame](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Keyframe)** (class)
    * 
    * A key frame is a frame extarcted from video,
    * e.g. representative of a part of a MediaResource.
    */
    Keyframe: prefixer('Keyframe'),

    /**
    * **[Artefact type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactType)** (property)
    * 
    * Range: string or Artefact_type.
    */
    artefactType: prefixer('artefactType'),

    /**
    * **[Picture](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Picture)** (class)
    * 
    * A photography, a logo, a pictogram, etc.
    */
    Picture: prefixer('Picture'),

    /**
    * **[Artefact usage history](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactUsageHistory)** (property)
    * 
    * To provide information on the usage history of an Artefact.
    */
    artefactUsageHistory: prefixer('artefactUsageHistory'),

    /**
    * **[Keyword](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Keyword)** (class)
    * 
    * To proivde keywords and define key concepts
    * illustrating the content of the Resource or EditorialObject. This is provided as free
    * text in an annotation label or as an identifier pointing to a term in a classification
    * scheme.
    */
    Keyword: prefixer('Keyword'),

    /**
    * **[Artefact website](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#artefactWebsite)** (property)
    * 
    * To specify a website where more 	information can be found on the Artefact.
    */
    artefactWebsite: prefixer('artefactWebsite'),

    /**
    * **[Language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Language)** (class)
    * 
    * To provide information on languages present in
    * the BusinessObject and its purpose. This is provided as free text in an annotation label
    * or as an identifier pointing to a term in a classification scheme.Other language
    * specific types may be added as subclasses of language.
    */
    Language: prefixer('Language'),

    /**
    * **[Aspect ratio](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#aspectRatio)** (property)
    * 
    * To specify the aspect ratio.
    */
    aspectRatio: prefixer('aspectRatio'),

    /**
    * **[Licensing](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Licensing)** (class)
    * 
    * To define the licensing terms associated with an Asset.
    */
    Licensing: prefixer('Licensing'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#assetDescription)** (property)
    * 
    * To provide a description of an Asset.
    */
    assetDescription: prefixer('assetDescription'),

    /**
    * **[Link](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Link)** (class)
    * 
    * To define a custom link.
    */
    Link: prefixer('Link'),

    /**
    * **[Asset identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#assetId)** (property)
    * 
    * Range: an Identifier or anyURI or string.
    */
    assetId: prefixer('assetId'),

    /**
    * **[Location code.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#LocationCode)** (class)
    * 
    * A code given to a Location.
    */
    LocationCode: prefixer('LocationCode'),

    /**
    * **[Name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#assetName)** (property)
    * 
    * To provide a name of an Asset.
    */
    assetName: prefixer('assetName'),

    /**
    * **[Location time type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#LocationTimeType)** (class)
    * 
    * To define a type of time at a location.
    */
    LocationTimeType: prefixer('LocationTimeType'),

    /**
    * **[Asset type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#assetType)** (property)
    * 
    * Range: string or anyURI or Concept.
    */
    assetType: prefixer('assetType'),

    /**
    * **[Location type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#LocationType)** (class)
    * 
    * To define a type of location.
    */
    LocationType: prefixer('LocationType'),

    /**
    * **[Audio bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioBitRate)** (property)
    * 
    * The audio bitrate.
    */
    audioBitRate: prefixer('audioBitRate'),

    /**
    * **[Locator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Locator)** (class)
    * 
    * Custom attributes are to be associated by implementers.
    */
    Locator: prefixer('Locator'),

    /**
    * **[Bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bitRate)** (property)
    * 
    * To provide the bitrate at which the
    * MediaResource can be played in bits/second. Current bitrate if constant, and average bitrate if variable.
    */
    bitRate: prefixer('bitRate'),

    /**
    * **[Logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Logo)** (class)
    * 
    * A Logo allows to visually identify an
    * organisation, publicationService, publicationChannel, or ratings /
    * parentalGuidance
    */
    Logo: prefixer('Logo'),

    /**
    * **[Audio bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioBitRateMax)** (property)
    * 
    * The max audio bitrate.
    */
    audioBitRateMax: prefixer('audioBitRateMax'),

    /**
    * **[Media Fragment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MediaFragment)** (class)
    * 
    * A MediaFragment is a temporal or spatial segment of a resource identified by a MediaGragment URI (http://www.w3.org/2008/WebVideo/Fragments/WD-media-fragments-spec/).
    */
    MediaFragment: prefixer('MediaFragment'),

    /**
    * **[Maximum bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bitRateMax)** (property)
    * 
    * The maximum bitrate when variable, in bits per second.
    */
    bitRateMax: prefixer('bitRateMax'),

    /**
    * **[Media resource type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MediaResource_Type)** (class)
    * 
    * To define a type of MediaResource.
    */
    MediaResource_Type: prefixer('MediaResource_Type'),

    /**
    * **[Audio bitrate mode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioBitRateMode)** (property)
    * 
    * The audio bitrate mode.
    */
    audioBitRateMode: prefixer('audioBitRateMode'),

    /**
    * **[Media type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MediaType)** (class)
    * 
    * To provide additional information on the type of media.
    */
    MediaType: prefixer('MediaType'),

    /**
    * **[Bitrate mode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bitRateMode)** (property)
    * 
    * A flag to indicate if the bit rate is fixed or
    * variable.
    */
    bitRateMode: prefixer('bitRateMode'),

    /**
    * **[Medium](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Medium)** (class)
    * 
    * To provide information on the medium formats in
    * which the resource is available. This is provided as free text in an annotation label or
    * as an identifier pointing to a term in a classification scheme.
    */
    Medium: prefixer('Medium'),

    /**
    * **[Audio channel number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioChannelNumber)** (property)
    * 
    * The total number of audio channels contained in
    * the MediaResource.
    */
    audioChannelNumber: prefixer('audioChannelNumber'),

    /**
    * **[Metadata track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MetadataTrack)** (class)
    * 
    * A Track on which metadata is embedded (e.g. MXF).
    */
    MetadataTrack: prefixer('MetadataTrack'),

    /**
    * **[Audio encoding level](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioEncodingLevel)** (property)
    * 
    * The encoding level as defined in specifications.
    */
    audioEncodingLevel: prefixer('audioEncodingLevel'),

    /**
    * **[Mime type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#MimeType)** (class)
    * 
    * The definition of the container if available as
    * a MIME type. This is provided as free text in an annotation label or as an identifier
    * pointing to a term in a classification scheme. For more information:
    * http://www.iana.org/assignments/media-types/index.html.
    */
    MimeType: prefixer('MimeType'),

    /**
    * **[Encoding level](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#encodingLevel)** (property)
    * 
    * To define an encoding level.
    */
    encodingLevel: prefixer('encodingLevel'),

    /**
    * **[News Item](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#NewsItem)** (class)
    * 
    * A NewsItem aggregates all information about a particular news event.
    */
    NewsItem: prefixer('NewsItem'),

    /**
    * **[Audio encoding profile](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioEncodingProfile)** (property)
    * 
    * The encoding profile as defined in specifications.
    */
    audioEncodingProfile: prefixer('audioEncodingProfile'),

    /**
    * **[Object type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ObjectType)** (class)
    * 
    * To specify the type of BusinessObject e.g. and
    * EditorialObject of type "programme" or clip". This is
    * provided as free text in an annotation label or as an identifier pointing to a term in a
    * classification scheme e.g.
    * http://www.ebu.ch/metadata/ontologies/skos/ebu_ObjectTypeCodeCS.rdf.
    */
    ObjectType: prefixer('ObjectType'),

    /**
    * **[Encoding profile](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#encodingProfile)** (property)
    * 
    * The encoding profile as defined in specifications.
    */
    encodingProfile: prefixer('encodingProfile'),

    /**
    * **[Open captions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#OpenCaptions)** (class)
    * 
    * Open Captions are burned in the
    * image.
    */
    OpenCaptions: prefixer('OpenCaptions'),

    /**
    * **[Audio track configuration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioTrackConfiguration)** (property)
    * 
    * The configuration of audio tracks contained in
    * the MediaResource.
    */
    audioTrackConfiguration: prefixer('audioTrackConfiguration'),

    /**
    * **[Open subtitling](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#OpenSubtitling)** (class)
    * 
    * Open subtitles are burned in the
    * image.
    */
    OpenSubtitling: prefixer('OpenSubtitling'),

    /**
    * **[Audio track number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#audioTrackNumber)** (property)
    * 
    * The total number of audio tracks contained in
    * the MediaResource.
    */
    audioTrackNumber: prefixer('audioTrackNumber'),

    /**
    * **[Organization](http://xmlns.com/foaf/0.1/Organization)** (class)
    * 
    * An organisation (business, corporation, federation, etc.) or moral agent (government body).
    */
    'foaf:Organization': prefixer('foaf:Organization'),

    /**
    * **[Award ceremony](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardCeremony)** (property)
    * 
    * To provide an Award ceremony name.
    */
    awardCeremony: prefixer('awardCeremony'),

    /**
    * **[Language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#OriginalLanguage)** (class)
    * 
    * The original language in which the
    * BusinessObject or Resource has been created and released. This is provided as free text
    * in an annotation label or as an identifier pointing to a term in a classification
    * scheme.
    */
    OriginalLanguage: prefixer('OriginalLanguage'),

    /**
    * **[Award date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardDate)** (property)
    * 
    * To provide an date when an Award was delivered.
    */
    awardDate: prefixer('awardDate'),

    /**
    * **[Part, Fragment, Segment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Part)** (class)
    * 
    * A Fragment is a particular section of a
    * MediaResource identified by a start and end time or duration. Fragment can also be
    * called segment or part.
    */
    Part: prefixer('Part'),

    /**
    * **[Award description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardDescription)** (property)
    * 
    * To provide a description for an Award.
    */
    awardDescription: prefixer('awardDescription'),

    /**
    * **[Part type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Part_Type)** (class)
    * 
    * To define a type or part.
    */
    Part_Type: prefixer('Part_Type'),

    /**
    * **[Award identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardId)** (property)
    * 
    * Range: string or Identifier
    */
    awardId: prefixer('awardId'),

    /**
    * **[Party](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Party)** (class)
    * 
    * To identify a Party intervening in a transaction or contractual agreement.
    */
    Party: prefixer('Party'),

    /**
    * **[Award name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardName)** (property)
    * 
    * To provide the name of an Award.
    */
    awardName: prefixer('awardName'),

    /**
    * **[Person](http://xmlns.com/foaf/0.1/Person)** (class)
    * 
    * all types of people such as politicians, athletes, historic figures, contributors in programmes e.t.c.
    */
    'foaf:Person': prefixer('foaf:Person'),

    /**
    * **[Award type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#awardType)** (property)
    * 
    * To define a type of Award.
    */
    awardType: prefixer('awardType'),

    /**
    * **[Physical resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PhysicalResource)** (class)
    * 
    * To describe a physical resource e.g. a tape.
    */
    PhysicalResource: prefixer('PhysicalResource'),

    /**
    * **[Bit depth](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bitDepth)** (property)
    * 
    * To provide the bitdepth at which the
    * MediaResource has been encoded.
    */
    bitDepth: prefixer('bitDepth'),

    /**
    * **[Pictogram](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Pictogram)** (class)
    * 
    * A visual / graphical representation of a concept.
    */
    Pictogram: prefixer('Pictogram'),

    /**
    * **[Image](http://xmlns.com/foaf/0.1/img)** (class)
    * 
    * Animage to represent something.
    */
    'foaf:img': prefixer('foaf:img'),

    /**
    * **[Overall bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bitRateOverall)** (property)
    * 
    * To provide the overall bitrate at which the
    * MediaResource can be played in bits/second. Current bitrate if constant, and average bitrate if variable.
    */
    bitRateOverall: prefixer('bitRateOverall'),

    /**
    * **[Picture display format code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PictureDisplayFormat)** (class)
    * 
    * To define a picture display format code.
    */
    PictureDisplayFormat: prefixer('PictureDisplayFormat'),

    /**
    * **[Bookmark](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#bookmark)** (property)
    * 
    * To provide a bookmark.
    */
    bookmark: prefixer('bookmark'),

    /**
    * **[Platform](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Platform)** (class)
    * 
    * A platform like a network or operator platform.
    */
    Platform: prefixer('Platform'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#businessObjectDescription)** (property)
    * 
    * To provide a description of an BusinessObject.
    */
    businessObjectDescription: prefixer('businessObjectDescription'),

    /**
    * **[Service](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Service)** (class)
    * 
    * A service is the umbrella under which one or
    * more PublicationChannel is operated.
    */
    Service: prefixer('Service'),

    /**
    * **[BusinessObject identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#businessObjectId)** (property)
    * 
    * Range: an Identifier or anyURI or string.
    */
    businessObjectId: prefixer('businessObjectId'),

    /**
    * **[Props](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Props)** (class)
    * 
    * To identify and describe Props used in productions (e.g. vehicles, objects of various shapes and brand and purpose, etc.).
    */
    Props: prefixer('Props'),

    /**
    * **[Name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#businessObjectName)** (property)
    * 
    * To provide a name of an BusinessObject.
    */
    businessObjectName: prefixer('businessObjectName'),

    /**
    * **[Business Object type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#businessObjectType)** (property)
    * 
    * A type attributed to a BusinessObject.
    */
    businessObjectType: prefixer('businessObjectType'),

    /**
    * **[Publication Channel](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationChannel)** (class)
    * 
    * The name of the channel through which a
    * Resource has been published as a PublicationEvent. A PublicationChannel can use a
    * variety of medias e.g. broadcast or online.
    */
    PublicationChannel: prefixer('PublicationChannel'),

    /**
    * **[Character description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#characterDescription)** (property)
    * 
    * To provide the description of a Character.
    */
    characterDescription: prefixer('characterDescription'),

    /**
    * **[Publication channel type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationChannel_Type)** (class)
    * 
    * To define a type of publication channel.
    */
    PublicationChannel_Type: prefixer('PublicationChannel_Type'),

    /**
    * **[Annotation character start index](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#characterEndIndex)** (property)
    * 
    * To identify the end character index of the portion of text to which the Annotation applies.
    */
    characterEndIndex: prefixer('characterEndIndex'),

    /**
    * **[Publication event type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationEvent_Type)** (class)
    * 
    * To define a type of publication event.
    */
    PublicationEvent_Type: prefixer('PublicationEvent_Type'),

    /**
    * **[Character name.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#characterName)** (property)
    * 
    * To specify the name of a Character.
    */
    characterName: prefixer('characterName'),

    /**
    * **[Publication History](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationHistory)** (class)
    * 
    * A collection of PublicationEvents through which
    * a resource has been published.
    */
    PublicationHistory: prefixer('PublicationHistory'),

    /**
    * **[Annotation text character start index](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#characterStartIndex)** (property)
    * 
    * To identify the start character index of the portion of text to which the Annotation applies.
    */
    characterStartIndex: prefixer('characterStartIndex'),

    /**
    * **[Cloned to](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#clonedTo)** (property)
    * 
    * Identifies relationship between a digital instantiation of a Resource and its direct copy, with no generational loss.
    */
    clonedTo: prefixer('clonedTo'),

    /**
    * **[Publication History](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationPlan)** (class)
    * 
    * A collection of PublicationEvents organised as a PublicationPlanning.
    */
    PublicationPlan: prefixer('PublicationPlan'),

    /**
    * **[Clone source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isClonedFrom)** (property)
    * 
    * To identify the source of a clone Editorial Object or Resource
    */
    isClonedFrom: prefixer('isClonedFrom'),

    /**
    * **[Publication plan type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#PublicationPlan_Type)** (class)
    * 
    * To define a type of publication plan.
    */
    PublicationPlan_Type: prefixer('PublicationPlan_Type'),

    /**
    * **[Codec family](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#codecFamily)** (property)
    * 
    * To provide information on the product family of the Codec.
    */
    codecFamily: prefixer('codecFamily'),

    /**
    * **[Radio Programme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#RadioProgramme)** (class)
    * 
    * A programme for distribution on radio
    * channels.
    */
    RadioProgramme: prefixer('RadioProgramme'),

    /**
    * **[Codec Identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#codecId)** (property)
    * 
    * Range: string or Identifier.
    */
    codecId: prefixer('codecId'),

    /**
    * **[Record](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Record)** (class)
    * 
    * The record the description of an Asset.
    */
    Record: prefixer('Record'),

    /**
    * **[Codec name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#codecName)** (property)
    * 
    * To provide a name for the Codec, e.g. a product name.
    */
    codecName: prefixer('codecName'),

    /**
    * **[Region code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#RegionCode)** (class)
    * 
    * To define a region.(@en}
    */
    RegionCode: prefixer('RegionCode'),

    /**
    * **[Codec version](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#codecVersion)** (property)
    * 
    * To provide information on the version of the Codec.
    */
    codecVersion: prefixer('codecVersion'),

    /**
    * **[Relation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Relation)** (class)
    * 
    * To define links and relations.
    */
    Relation: prefixer('Relation'),

    /**
    * **[Comments](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#comments)** (property)
    * 
    * To provide a comment.
    */
    comments: prefixer('comments'),

    /**
    * **[Relation type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Relation_Type)** (class)
    * 
    * To specify a type of relation.
    */
    Relation_Type: prefixer('Relation_Type'),

    /**
    * **[Costume gender](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#costumeGender)** (property)
    * 
    * To specify the gender associated with a Costume.
    */
    costumeGender: prefixer('costumeGender'),

    /**
    * **[Resource type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Resource_Type)** (class)
    * 
    * To define a type of resource.
    */
    Resource_Type: prefixer('Resource_Type'),

    /**
    * **[Costume size information](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#costumeSizeInformation)** (property)
    * 
    * To collect all information available useful to determine the size of a Costume.
    */
    costumeSizeInformation: prefixer('costumeSizeInformation'),

    /**
    * **[Review](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Review)** (class)
    * 
    * To provide a Review.
    */
    Review: prefixer('Review'),

    /**
    * **[Costume texture](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#costumeTexture)** (property)
    * 
    * Range: a string or a Concept code from a vocabulary, e.g. Getty
    */
    costumeTexture: prefixer('costumeTexture'),

    /**
    * **[Rights Clearance](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#RightsClearance)** (class)
    * 
    * To signal that rights have been cleared (or
    * not)
    */
    RightsClearance: prefixer('RightsClearance'),

    /**
    * **[Costume type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#costumeType)** (property)
    * 
    * To specify a type of Costume.
    */
    costumeType: prefixer('costumeType'),

    /**
    * **[Rights type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#RightsType)** (class)
    * 
    * To define a type of Rights.
    */
    RightsType: prefixer('RightsType'),

    /**
    * **[Date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#date)** (property)
    * 
    * A date associated to an Asset.
    */
    date: prefixer('date'),

    /**
    * **[Role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Role)** (class)
    * 
    * To define the role / action of an agent. This
    * is provided as free text in an annotation label or as an identifier pointing to a term
    * in a classification scheme.
    */
    Role: prefixer('Role'),

    /**
    * **[Archiving date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateArchived)** (property)
    * 
    * The date when the Asset was archived.
    */
    dateArchived: prefixer('dateArchived'),

    /**
    * **[Scene](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Scene)** (class)
    * 
    * A specifc type of Part.
    */
    Scene: prefixer('Scene'),

    /**
    * **[Broadcast date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateBroadcast)** (property)
    * 
    * The date when the Asset was first broadcast publicly on television or radio or via streaming.
    */
    dateBroadcast: prefixer('dateBroadcast'),

    /**
    * **[Season](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Season)** (class)
    * 
    * A series can be composed of one or more seasons
    * clustering a certain number of episodes. Fro this reason, seasons are related to series
    * using the isRelatedTo property.
    */
    Season: prefixer('Season'),

    /**
    * **[Creation date/time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateCreated)** (property)
    * 
    * The date of creation of the Asset.
    */
    dateCreated: prefixer('dateCreated'),

    /**
    * **[Series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Series)** (class)
    * 
    * Series is a particular type of collection. TV
    * or Radio Series are composed of Episodes.
    */
    Series: prefixer('Series'),

    /**
    * **[Deletion date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateDeleted)** (property)
    * 
    * The date when the Resource was deleted.
    */
    dateDeleted: prefixer('dateDeleted'),

    /**
    * **[Service type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Service_Type)** (class)
    * 
    * To define a type of service.
    */
    Service_Type: prefixer('Service_Type'),

    /**
    * **[Digitisation date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateDigitised)** (property)
    * 
    * The date when the Resource was digitised.
    */
    dateDigitised: prefixer('dateDigitised'),

    /**
    * **[Shot](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Shot)** (class)
    * 
    * A specifc type of Part.
    */
    Shot: prefixer('Shot'),

    /**
    * **[Distribution date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateDistributed)** (property)
    * 
    * The date when the Resource was first made available to the public for purchase, download, or online access.
    */
    dateDistributed: prefixer('dateDistributed'),

    /**
    * **[Sign language code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#SignLanguageCode)** (class)
    * 
    * To identify a sign language by its code.
    */
    SignLanguageCode: prefixer('SignLanguageCode'),

    /**
    * **[Ingest date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateIngested)** (property)
    * 
    * The date when the Resource was ingested/acquired in institutional holdings.
    */
    dateIngested: prefixer('dateIngested'),

    /**
    * **[Signing](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Signing)** (class)
    * 
    * To signal the presence of Signing for hard of
    * hearing users. The type of Signing (e.g. incursted in or else) or language of Signing
    * can be specified using the appropriate properties.
    */
    Signing: prefixer('Signing'),

    /**
    * **[Archiving date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateIssued)** (property)
    * 
    * The date when the Asset was issued.
    */
    dateIssued: prefixer('dateIssued'),

    /**
    * **[Video track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#VideoTrack)** (class)
    * 
    * A specialisation of Track for Video to provide
    * a link to specific data properties such as frameRate, etc. Signing is another possible
    * example of video track. Specific VideoTracks such as Signing can be defined as sub
    * VideoTracks.. In advanced systems, different VideoTracks can be used to provide e.g.
    * different viewing angles.
    */
    VideoTrack: prefixer('VideoTrack'),

    /**
    * **[Migration date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateMigrated)** (property)
    * 
    * The date when the Resource was copied or converted from an obsolete or endangered original format to a more updated format for preservation.
    */
    dateMigrated: prefixer('dateMigrated'),

    /**
    * **[Signing format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#SigningFormat)** (class)
    * 
    * To provide additional information on the
    * signing format. This is provided as free text in an annotation label or as an identifier
    * pointing to a term in a classification scheme.
    */
    SigningFormat: prefixer('SigningFormat'),

    /**
    * **[Modification date/time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateModified)** (property)
    * 
    * To indicate the date at which the Asset has been modified.
    */
    dateModified: prefixer('dateModified'),

    /**
    * **[Sport item](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#SportItem)** (class)
    * 
    * A SportItem aggregates all information about a sport event.
    */
    SportItem: prefixer('SportItem'),

    /**
    * **[Normalization date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateNormalized)** (property)
    * 
    * The date when the Resource was converted from its original format into a format pre-selected by the institution for preservation.
    */
    dateNormalized: prefixer('dateNormalized'),

    /**
    * **[Staff member.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Staff)** (class)
    * 
    * A member of Staff.
    */
    Staff: prefixer('Staff'),

    /**
    * **[Date of birth](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateOfBirth)** (property)
    * 
    * The date when a Contact/Person is born.
    */
    dateOfBirth: prefixer('dateOfBirth'),

    /**
    * **[Standard](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Standard)** (class)
    * 
    * identifies the technical video standard of a resource, i.e. NTSC or PAL.
    */
    Standard: prefixer('Standard'),

    /**
    * **[Date of death](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateOfDeath)** (property)
    * 
    * The date when a Contact/Person has passed away.
    */
    dateOfDeath: prefixer('dateOfDeath'),

    /**
    * **[Sticker](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Sticker)** (class)
    * 
    * A sticker associated with a Costume.
    */
    Sticker: prefixer('Sticker'),

    /**
    * **[Date of retirement](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateOfRetirement)** (property)
    * 
    * The date when a Contact/Person has retired.
    */
    dateOfRetirement: prefixer('dateOfRetirement'),

    /**
    * **[Storage type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Storage_Type)** (class)
    * 
    * The type of storage used for the repository.
    * This is provided as free text in an annotation label or as an identifier pointing to a
    * term in a classification scheme.
    */
    Storage_Type: prefixer('Storage_Type'),

    /**
    * **[production date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateProduced)** (property)
    * 
    * The date of production of the Asset.
    */
    dateProduced: prefixer('dateProduced'),

    /**
    * **[Subject](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Subject)** (class)
    * 
    * A term describing the topic covered by the
    * BusinessObject or resource. This is provided as free text in an annotation label or as
    * an identifier pointing to a term in a classification scheme.
    */
    Subject: prefixer('Subject'),

    /**
    * **[Release date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateReleased)** (property)
    * 
    * The date when the Resource was first made available to the public for purchase, download, or online access.
    */
    dateReleased: prefixer('dateReleased'),

    /**
    * **[Subtitling format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#SubtitlingFormat)** (class)
    * 
    * To define the format of subtitling.
    * subtitling's main use isfor translation. This is provided as free text in an
    * annotation label  or as an identifier pointing to a term in a classification
    * scheme.
    */
    SubtitlingFormat: prefixer('SubtitlingFormat'),

    /**
    * **[Transfer date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateTransferred)** (property)
    * 
    * The date when the Asset was moved from one digital or physical location to another.
    */
    dateTransferred: prefixer('dateTransferred'),

    /**
    * **[TV Programme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TVProgramme)** (class)
    * 
    * A programme for distribution on television
    * channels.
    */
    TVProgramme: prefixer('TVProgramme'),

    /**
    * **[Validation date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dateValidated)** (property)
    * 
    * The most recent date when the Resource was confirmed to be valid through manual or digital QC.
    */
    dateValidated: prefixer('dateValidated'),

    /**
    * **[Target audience](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TargetAudience)** (class)
    * 
    * To identify the audience for which the content was created.
    */
    TargetAudience: prefixer('TargetAudience'),

    /**
    * **[Licence end date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#datelicenseEnd)** (property)
    * 
    * The date when the licence for the Asset ends.
    */
    datelicenseEnd: prefixer('datelicenseEnd'),

    /**
    * **[Target Platform](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TargetPlatform)** (class)
    * 
    * To specify a target platform.
    */
    TargetPlatform: prefixer('TargetPlatform'),

    /**
    * **[Licence start date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#datelicensed)** (property)
    * 
    * The date when the licence for the Asset begins.
    */
    datelicensed: prefixer('datelicensed'),

    /**
    * **[Team](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Team)** (class)
    * 
    * To define a Team.
    */
    Team: prefixer('Team'),

    /**
    * **[Derivation target](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#derivedTo)** (property)
    * 
    * To identify a new version derived from the original.
    */
    derivedTo: prefixer('derivedTo'),

    /**
    * **[Group](http://xmlns.com/foaf/0.1/Group)** (class)
    * 
    * A group of Agents.
    */
    'foaf:Group': prefixer('foaf:Group'),

    /**
    * **[Dimensions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dimensions)** (property)
    * 
    * Describes the physical dimensions of a MediaResource, with units of measure concatenated to become part of the value.
    */
    dimensions: prefixer('dimensions'),

    /**
    * **[Territory code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TerritoryCode)** (class)
    * 
    * To identify a territory e.g. by its UN code.
    */
    TerritoryCode: prefixer('TerritoryCode'),

    /**
    * **[Dish description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dishDescription)** (property)
    * 
    * The description of a Dish.
    */
    dishDescription: prefixer('dishDescription'),

    /**
    * **[Text Annotation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TextAnnotation)** (class)
    * 
    * A class specific to the annotation of a text or portions of text.
    */
    TextAnnotation: prefixer('TextAnnotation'),

    /**
    * **[Dish name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dishName)** (property)
    * 
    * The name of a Dish.
    */
    dishName: prefixer('dishName'),

    /**
    * **[Text line](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TextLine)** (class)
    * 
    * To provide lines of text extracted from or additional to the resource.
    */
    TextLine: prefixer('TextLine'),

    /**
    * **[Display aspect ratio](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#displayAspectRatio)** (property)
    * 
    * The aspect ratio when displayed.
    */
    displayAspectRatio: prefixer('displayAspectRatio'),

    /**
    * **[Text line type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TextLine_Type)** (class)
    * 
    * To define a TextLine type.
    */
    TextLine_Type: prefixer('TextLine_Type'),

    /**
    * **[Display order](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#displayOrder)** (property)
    * 
    * The order in which an Agent appears in a scene.
    */
    displayOrder: prefixer('displayOrder'),

    /**
    * **[Text usage type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TextUsageType)** (class)
    * 
    * To specify the usage of a text.
    */
    TextUsageType: prefixer('TextUsageType'),

    /**
    * **[Dubbed to](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#dubbedTo)** (property)
    * 
    * Range: string or Language.
    */
    dubbedTo: prefixer('dubbedTo'),

    /**
    * **[Theme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Theme)** (class)
    * 
    * To define a Theme associated with an Asset.
    */
    Theme: prefixer('Theme'),

    /**
    * **[Dubbed from](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isDubbedFrom)** (property)
    * 
    * the origin of a dubbed MediaResource.
    */
    isDubbedFrom: prefixer('isDubbedFrom'),

    /**
    * **[Thumbnail](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Thumbnail)** (class)
    * 
    * A thumbnail is a low resolution picture that
    * can be associated with EditorialObjects or e.g. MediaResources or
    * Contacts.
    */
    Thumbnail: prefixer('Thumbnail'),

    /**
    * **[Duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#duration)** (property)
    * 
    * To provide information on the duration of an EditorialObject or MediaResource.
    */
    duration: prefixer('duration'),

    /**
    * **[Timecode track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimecodeTrack)** (class)
    * 
    * A track with timecode information e.g. in MXF.
    */
    TimecodeTrack: prefixer('TimecodeTrack'),

    /**
    * **[Duration (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationEditUnits)** (property)
    * 
    * To provide a duration in edit units.
    */
    durationEditUnits: prefixer('durationEditUnits'),

    /**
    * **[Timed text authoring technique](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimedTextAuthoringTechnique)** (class)
    * 
    * To define a timed text authoring technique.
    */
    TimedTextAuthoringTechnique: prefixer('TimedTextAuthoringTechnique'),

    /**
    * **[Duration (time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationNormalPlayTime)** (property)
    * 
    * To provide a duration as normal
    * time.
    */
    durationNormalPlayTime: prefixer('durationNormalPlayTime'),

    /**
    * **[Timed text content type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimedTextContentType)** (class)
    * 
    * To define a type of timed text.
    */
    TimedTextContentType: prefixer('TimedTextContentType'),

    /**
    * **[Published Duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationPublished)** (property)
    * 
    * To provide information on the published / announced duration of an EditorialObject.
    */
    durationPublished: prefixer('durationPublished'),

    /**
    * **[Timed text subtitle target format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimedTextSubtitleTargetFormat)** (class)
    * 
    * To define a timed text subtitle format.
    */
    TimedTextSubtitleTargetFormat: prefixer('TimedTextSubtitleTargetFormat'),

    /**
    * **[Published duration (play time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationPublishedNormalPlayTime)** (property)
    * 
    * To provide a published duration as normal play time.
    */
    durationPublishedNormalPlayTime: prefixer('durationPublishedNormalPlayTime'),

    /**
    * **[Timeline track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimelineTrack)** (class)
    * 
    * To define a time sequence of EditorialObjects.
    */
    TimelineTrack: prefixer('TimelineTrack'),

    /**
    * **[Duration (timecode)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationTimecode)** (property)
    * 
    * The duration expressed as a
    * timecode.
    */
    durationTimecode: prefixer('durationTimecode'),

    /**
    * **[Timeline track type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TimelineTrack_Type)** (class)
    * 
    * To specify a type or TimelineTrack.
    */
    TimelineTrack_Type: prefixer('TimelineTrack_Type'),

    /**
    * **[Duration (timecode, drop frame)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#durationTimecodeDropFrame)** (property)
    * 
    * The duration expressed as a
    * timecode with drop frames.
    */
    durationTimecodeDropFrame: prefixer('durationTimecodeDropFrame'),

    /**
    * **[Topic](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Topic)** (class)
    * 
    * A type subject for use in some contexts. This
    * is provided as free text in an annotation label or as an identifier pointing to a term
    * in a classification scheme.
    */
    Topic: prefixer('Topic'),

    /**
    * **[Edit unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#editUnit)** (property)
    * 
    * The edit unit is e.g. the inverse of the audio
    * sample rate or video frame rate.
    */
    editUnit: prefixer('editUnit'),

    /**
    * **[Track purpose](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#TrackPurpose)** (class)
    * 
    * To define the prupose of a track.
    */
    TrackPurpose: prefixer('TrackPurpose'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#editorialObjectDescription)** (property)
    * 
    * To provide a description of an EditorialObject.
    */
    editorialObjectDescription: prefixer('editorialObjectDescription'),

    /**
    * **[Track type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Track_Type)** (class)
    * 
    * To define a type of track.
    */
    Track_Type: prefixer('Track_Type'),

    /**
    * **[Editorial object identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#editorialObjectId)** (property)
    * 
    * Range: an Identifier or anyURI or string.
    */
    editorialObjectId: prefixer('editorialObjectId'),

    /**
    * **[Usage restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#UsageRestrictions)** (class)
    * 
    * To define a set of UsageRestrictions.
    */
    UsageRestrictions: prefixer('UsageRestrictions'),

    /**
    * **[Name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#editorialObjectName)** (property)
    * 
    * A name attributed to an EditorialObject.
    */
    editorialObjectName: prefixer('editorialObjectName'),

    /**
    * **[Usage rights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#UsageRights)** (class)
    * 
    * Usage rights associated with content.
    */
    UsageRights: prefixer('UsageRights'),

    /**
    * **[Editorial Object type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#editorialObjectType)** (property)
    * 
    * A type attributed to an EditorialObject.
    */
    editorialObjectType: prefixer('editorialObjectType'),

    /**
    * **[Version](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#Version)** (class)
    * 
    * To specifically identify a Version of an EditorialObject.
    */
    Version: prefixer('Version'),

    /**
    * **[Education](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#education)** (property)
    * 
    * To provide information on the education.
    */
    education: prefixer('education'),

    /**
    * **[Video codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#VideoCodec)** (class)
    * 
    * To provide information about a video codec.
    */
    VideoCodec: prefixer('VideoCodec'),

    /**
    * **[Emotion description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionDescription)** (property)
    * 
    * The description of an Emotion.
    */
    emotionDescription: prefixer('emotionDescription'),

    /**
    * **[Video encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#VideoEncodingFormat)** (class)
    * 
    * The encoding format of the video.
    */
    VideoEncodingFormat: prefixer('VideoEncodingFormat'),

    /**
    * **[Emotion edit unit number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionEditUnit)** (property)
    * 
    * The edit unit number at which the Emotion occurs.
    */
    emotionEditUnit: prefixer('emotionEditUnit'),

    /**
    * **[Video format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#VideoFormat)** (class)
    * 
    * To define an VideoFormat.
    */
    VideoFormat: prefixer('VideoFormat'),

    /**
    * **[Emotion timestamp](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionTimestamp)** (property)
    * 
    * To identify a timestamp at which an Emotion can be seen.
    */
    emotionTimestamp: prefixer('emotionTimestamp'),

    /**
    * **[Video stream](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#VideoStream)** (class)
    * 
    * A decodable video stream of bits.
    */
    VideoStream: prefixer('VideoStream'),

    /**
    * **[Emotion identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionId)** (property)
    * 
    * Range: anyURI or string or Identifier
    */
    emotionId: prefixer('emotionId'),

    /**
    * **[Wrapping type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#WrappingType)** (class)
    * 
    * To define a type of wrapping.
    */
    WrappingType: prefixer('WrappingType'),

    /**
    * **[Emotion name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionName)** (property)
    * 
    * A name attributed to an Emotion.
    */
    emotionName: prefixer('emotionName'),

    /**
    * **[Emotion normal play time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionNormalPlayTime)** (property)
    * 
    * The normal play time at which the Emotion occurs.
    */
    emotionNormalPlayTime: prefixer('emotionNormalPlayTime'),

    /**
    * **[Emotion timecode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionTimecode)** (property)
    * 
    * The timecode at which the Emotion occurs.
    */
    emotionTimecode: prefixer('emotionTimecode'),

    /**
    * **[Emotion timecode (dropframe)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionTimecodeDropFrame)** (property)
    * 
    * The timecode (dropframe) at which the Emotion occurs.
    */
    emotionTimecodeDropFrame: prefixer('emotionTimecodeDropFrame'),

    /**
    * **[Emotion type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#emotionType)** (property)
    * 
    * A type of Emotion.
    */
    emotionType: prefixer('emotionType'),

    /**
    * **[End](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#end)** (property)
    * 
    * To define an end timestamp, e.g. the end point of a MediaResource.
    */
    end: prefixer('end'),

    /**
    * **[End time (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endEditUnits)** (property)
    * 
    * The end time in edit units.
    */
    endEditUnits: prefixer('endEditUnits'),

    /**
    * **[End time (time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endNormalPlayTime)** (property)
    * 
    * The end time expressed using a time
    * expression.
    */
    endNormalPlayTime: prefixer('endNormalPlayTime'),

    /**
    * **[Offset end time (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endOffsetEditUnits)** (property)
    * 
    * The offset end time in edit units.
    */
    endOffsetEditUnits: prefixer('endOffsetEditUnits'),

    /**
    * **[Offset end time (normal play time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endOffsetNormalPlayTime)** (property)
    * 
    * The offset end time in normal play time.
    */
    endOffsetNormalPlayTime: prefixer('endOffsetNormalPlayTime'),

    /**
    * **[Offset end timecode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endOffsetTimecode)** (property)
    * 
    * The offset end timecode.
    */
    endOffsetTimecode: prefixer('endOffsetTimecode'),

    /**
    * **[Offset end timecode (dropframe)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endOffsetTimecodedropframe)** (property)
    * 
    * The offset end timecode dropframe.
    */
    endOffsetTimecodedropframe: prefixer('endOffsetTimecodedropframe'),

    /**
    * **[End time (timecode)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endTimecode)** (property)
    * 
    * An end time expressed as
    * timecode.
    */
    endTimecode: prefixer('endTimecode'),

    /**
    * **[End time (timecode dropframe)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#endTimecodeDropFrame)** (property)
    * 
    * An end time expressed as
    * timecode with drop frames.
    */
    endTimecodeDropFrame: prefixer('endTimecodeDropFrame'),

    /**
    * **[Episode number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#episodeNumber)** (property)
    * 
    * The Episode Number
    */
    episodeNumber: prefixer('episodeNumber'),

    /**
    * **[Episode number in season](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#episodeNumberInSeason)** (property)
    * 
    * The Episode Number in a season
    */
    episodeNumberInSeason: prefixer('episodeNumberInSeason'),

    /**
    * **[Episode number in series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#episodeNumberInSeries)** (property)
    * 
    * The Episode Number in a series
    */
    episodeNumberInSeries: prefixer('episodeNumberInSeries'),

    /**
    * **[Event description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventDescription)** (property)
    * 
    * To provide a description for an Event.
    */
    eventDescription: prefixer('eventDescription'),

    /**
    * **[Duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventDuration)** (property)
    * 
    * The duration of an Event.
    */
    eventDuration: prefixer('eventDuration'),

    /**
    * **[Event end date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventEndDate)** (property)
    * 
    * The end date of an Event.
    */
    eventEndDate: prefixer('eventEndDate'),

    /**
    * **[Event end date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventEndDateTime)** (property)
    * 
    * The end date and time of an Event.
    */
    eventEndDateTime: prefixer('eventEndDateTime'),

    /**
    * **[Event end time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventEndTime)** (property)
    * 
    * The end time of an Event.
    */
    eventEndTime: prefixer('eventEndTime'),

    /**
    * **[Event identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventId)** (property)
    * 
    * An identifier attributed to an Event.
    */
    eventId: prefixer('eventId'),

    /**
    * **[Event name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventName)** (property)
    * 
    * To provide a name for an Event.
    */
    eventName: prefixer('eventName'),

    /**
    * **[Event period](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventPeriod)** (property)
    * 
    * The period of time during which an Event has occured.
    */
    eventPeriod: prefixer('eventPeriod'),

    /**
    * **[Event start date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventStartDate)** (property)
    * 
    * The start date of an Event.
    */
    eventStartDate: prefixer('eventStartDate'),

    /**
    * **[Event start date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventStartDateTime)** (property)
    * 
    * The start date and time of an Event.
    */
    eventStartDateTime: prefixer('eventStartDateTime'),

    /**
    * **[Event start time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventStartTime)** (property)
    * 
    * The start time of an Event.
    */
    eventStartTime: prefixer('eventStartTime'),

    /**
    * **[Event type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#eventType)** (property)
    * 
    * Range: Event or string
    */
    eventType: prefixer('eventType'),

    /**
    * **[Family information](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#familyInformation)** (property)
    * 
    * To provide information on the family of a Person.
    */
    familyInformation: prefixer('familyInformation'),

    /**
    * **[Family name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#familyName)** (property)
    * 
    * The family name of a Person.
    */
    familyName: prefixer('familyName'),

    /**
    * **[File size](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#fileSize)** (property)
    * 
    * Provides the size of a MediaResource in bytes.
    */
    fileSize: prefixer('fileSize'),

    /**
    * **[First showing flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#firstShowing)** (property)
    * 
    * To flag this is a first showing PublicationEvent.
    */
    firstShowing: prefixer('firstShowing'),

    /**
    * **[First showing on service flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#firstShowingThisService)** (property)
    * 
    * To falg this is a first showing  PublicationEvent on this service.
    */
    firstShowingThisService: prefixer('firstShowingThisService'),

    /**
    * **[Folksonomy](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#folksonomy)** (property)
    * 
    * Provides a user/audience-generated description, tag, or label for resource content.
    */
    folksonomy: prefixer('folksonomy'),

    /**
    * **[Preceding](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#followsInSequence)** (property)
    * 
    * A link to an Asset precedinging the current Asset in an ordered sequence.
    */
    followsInSequence: prefixer('followsInSequence'),

    /**
    * **[Food category](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#foodCategory)** (property)
    * 
    * To define a category of Food.
    */
    foodCategory: prefixer('foodCategory'),

    /**
    * **[Food ingredient](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#foodIngredient)** (property)
    * 
    * The Food ingredients or Food items.
    */
    foodIngredient: prefixer('foodIngredient'),

    /**
    * **[Format version identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#formatId)** (property)
    * 
    * A version identifier attributed to a Format.
    */
    formatId: prefixer('formatId'),

    /**
    * **[Format version identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#formatVersionId)** (property)
    * 
    * A version identifier attributed to a Format.
    */
    formatVersionId: prefixer('formatVersionId'),

    /**
    * **[Frame height](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameHeight)** (property)
    * 
    * The height of a video frame.
    */
    frameHeight: prefixer('frameHeight'),

    /**
    * **[Height](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#height)** (property)
    * 
    * The height of e.g. a video frame typically
    * expressed as a number of lines or the height of a picture/image expressed in millimeters
    * or else.
    */
    height: prefixer('height'),

    /**
    * **[Frame height unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameHeightUnit)** (property)
    * 
    * The unit used to measure the height of a frame.
    */
    frameHeightUnit: prefixer('frameHeightUnit'),

    /**
    * **[Height unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#heightUnit)** (property)
    * 
    * To specify a unit to express height.
    */
    heightUnit: prefixer('heightUnit'),

    /**
    * **[Frame rate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameRate)** (property)
    * 
    * The unit used to express the frame rate of a MediaResource in frames/second.
    */
    frameRate: prefixer('frameRate'),

    /**
    * **[Frame size unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameSizeUnit)** (property)
    * 
    * The unit used to express the frame width or
    * height. The unit by default is 'pixel'.
    */
    frameSizeUnit: prefixer('frameSizeUnit'),

    /**
    * **[Frame width](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameWidth)** (property)
    * 
    * The width of a video frame.
    */
    frameWidth: prefixer('frameWidth'),

    /**
    * **[Width](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#width)** (property)
    * 
    * The width of e.g. a video frame typically
    * expressed as a number of pixels, or picture/image in millimeters.
    */
    width: prefixer('width'),

    /**
    * **[Frame width unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#frameWidthUnit)** (property)
    * 
    * The unit used to measure the width of a frame.
    */
    frameWidthUnit: prefixer('frameWidthUnit'),

    /**
    * **[Width unit](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#widthUnit)** (property)
    * 
    * The unit used to measure a width e.g. in pixels
    * or number of lines or millimeters or else.
    */
    widthUnit: prefixer('widthUnit'),

    /**
    * **[Free access](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#free)** (property)
    * 
    * A flag to indicate that the access to the PublicationEvent is 'free'.
    */
    free: prefixer('free'),

    /**
    * **[Gender](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#gender)** (property)
    * 
    * The gender of a Person e.g. male or female.
    */
    gender: prefixer('gender'),

    /**
    * **[Geographical blocking](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#geoBlocking)** (property)
    * 
    * To identify geographical areas where content cannor be accessed.
    */
    geoBlocking: prefixer('geoBlocking'),

    /**
    * **[Given name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#givenName)** (property)
    * 
    * The given name of a Person.
    */
    givenName: prefixer('givenName'),

    /**
    * **[Group description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#groupDescription)** (property)
    * 
    * A textual description of a
    * Group.
    */
    groupDescription: prefixer('groupDescription'),

    /**
    * **[Group identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#groupId)** (property)
    * 
    * An identifier attributed to a Group.
    */
    groupId: prefixer('groupId'),

    /**
    * **[Group name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#groupName)** (property)
    * 
    * The name attributed to a Group.
    */
    groupName: prefixer('groupName'),

    /**
    * **[Group identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#groupType)** (property)
    * 
    * A type attributed to a Group.
    */
    groupType: prefixer('groupType'),

    /**
    * **[Access conditions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAccessConditions)** (property)
    * 
    * Range: string or AccessConditions.
    */
    hasAccessConditions: prefixer('hasAccessConditions'),

    /**
    * **[Rights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isCoveredBy)** (property)
    * 
    * Range: a link to Rights or open text (string).
    */
    isCoveredBy: prefixer('isCoveredBy'),

    /**
    * **[Action related agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasActionRelatedAgent)** (property)
    * 
    * Range: string or Agent.
    */
    hasActionRelatedAgent: prefixer('hasActionRelatedAgent'),

    /**
    * **[Action related scene](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasActionRelatedScene)** (property)
    * 
    * Range: string or Scene.
    */
    hasActionRelatedScene: prefixer('hasActionRelatedScene'),

    /**
    * **[Affiliation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAffiliation)** (property)
    * 
    * A property to establish the relation between a
    * Contact/Person and an Organisation.
    */
    hasAffiliation: prefixer('hasAffiliation'),

    /**
    * **[Biography](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentBiography)** (property)
    * 
    * Range: a string or an anyURI (e,g, a URL to a webpage) or a Biography.
    */
    hasAgentBiography: prefixer('hasAgentBiography'),

    /**
    * **[Country of residence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentCountryOfResidence)** (property)
    * 
    * Range: string or CountryCode
    */
    hasAgentCountryOfResidence: prefixer('hasAgentCountryOfResidence'),

    /**
    * **[Language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentLanguage)** (property)
    * 
    * Range: a string or Language.
    */
    hasAgentLanguage: prefixer('hasAgentLanguage'),

    /**
    * **[Agent member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentMember)** (property)
    * 
    * Range: string or Agent.
    */
    hasAgentMember: prefixer('hasAgentMember'),

    /**
    * **[Nationality](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentNationality)** (property)
    * 
    * Range: a string or CountryCode.
    */
    hasAgentNationality: prefixer('hasAgentNationality'),

    /**
    * **[Place of residence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAgentPlaceOfResidence)** (property)
    * 
    * To indicate the place of residence of an Agent.
    */
    hasAgentPlaceOfResidence: prefixer('hasAgentPlaceOfResidence'),

    /**
    * **[Ancillary data](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAncillaryData)** (property)
    * 
    * To identify ancillary data in the media resource.
    */
    hasAncillaryData: prefixer('hasAncillaryData'),

    /**
    * **[Ancillary data format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAncillaryDataFormat)** (property)
    * 
    * Range: string or AncillaryDataFormat
    */
    hasAncillaryDataFormat: prefixer('hasAncillaryDataFormat'),

    /**
    * **[Format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasFormat)** (property)
    * 
    * Range: string, Format or any Format-related Concept
    */
    hasFormat: prefixer('hasFormat'),

    /**
    * **[Animal breed code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnimalBreedCode)** (property)
    * 
    * To associate a breed code with an animal.
    */
    hasAnimalBreedCode: prefixer('hasAnimalBreedCode'),

    /**
    * **[Animal colour code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnimalColourCode)** (property)
    * 
    * To associate a colour code with an animal.
    */
    hasAnimalColourCode: prefixer('hasAnimalColourCode'),

    /**
    * **[Animal role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnimalRole)** (property)
    * 
    * To identify the role of an animal.
    */
    hasAnimalRole: prefixer('hasAnimalRole'),

    /**
    * **[Annotation body](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationBody)** (property)
    * 
    * To define the Annotation has a string or instance of an EBUCore class.
    */
    hasAnnotationBody: prefixer('hasAnnotationBody'),

    /**
    * **[Annotation confidence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationPurpose)** (property)
    * 
    * To define the purpose of an Annotation.
    */
    hasAnnotationPurpose: prefixer('hasAnnotationPurpose'),

    /**
    * **[Annotation related agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationRelatedAgent)** (property)
    * 
    * To identify an Agent subject of the Annotation.
    */
    hasAnnotationRelatedAgent: prefixer('hasAnnotationRelatedAgent'),

    /**
    * **[Annotation related artefact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationRelatedArtefact)** (property)
    * 
    * To identify an Artefact subject of the Annotation.
    */
    hasAnnotationRelatedArtefact: prefixer('hasAnnotationRelatedArtefact'),

    /**
    * **[Annotation related event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationRelatedEvent)** (property)
    * 
    * To identify an Event subject of the Annotation.
    */
    hasAnnotationRelatedEvent: prefixer('hasAnnotationRelatedEvent'),

    /**
    * **[Annotation related location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationRelatedLocation)** (property)
    * 
    * To identify a Location subject of the Annotation.
    */
    hasAnnotationRelatedLocation: prefixer('hasAnnotationRelatedLocation'),

    /**
    * **[Annotation target](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAnnotationTarget)** (property)
    * 
    * To define the target object to which the Annotation applies.
    */
    hasAnnotationTarget: prefixer('hasAnnotationTarget'),

    /**
    * **[Buyer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactBuyer)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactBuyer: prefixer('hasArtefactBuyer'),

    /**
    * **[Creator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactCreator)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactCreator: prefixer('hasArtefactCreator'),

    /**
    * **[Location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactLocation)** (property)
    * 
    * Range: string or Location
    */
    hasArtefactLocation: prefixer('hasArtefactLocation'),

    /**
    * **[Owner](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactOwner)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactOwner: prefixer('hasArtefactOwner'),

    /**
    * **[Artefact price currency](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactPriceCurrency)** (property)
    * 
    * Range: string or CurrencyCode
    */
    hasArtefactPriceCurrency: prefixer('hasArtefactPriceCurrency'),

    /**
    * **[Associated agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRelatedAgent)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactRelatedAgent: prefixer('hasArtefactRelatedAgent'),

    /**
    * **[Associated editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRelatedEditorialObject)** (property)
    * 
    * Range: string or EditorialObject
    */
    hasArtefactRelatedEditorialObject: prefixer('hasArtefactRelatedEditorialObject'),

    /**
    * **[Associated location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRelatedLocation)** (property)
    * 
    * Range: string or Location
    */
    hasArtefactRelatedLocation: prefixer('hasArtefactRelatedLocation'),

    /**
    * **[Associated physical resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRelatedPhysicalResource)** (property)
    * 
    * Range: string or PhysicalResource
    */
    hasArtefactRelatedPhysicalResource: prefixer('hasArtefactRelatedPhysicalResource'),

    /**
    * **[Associated resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRelatedResource)** (property)
    * 
    * Range: string or Resource
    */
    hasArtefactRelatedResource: prefixer('hasArtefactRelatedResource'),

    /**
    * **[Retailer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactRetailer)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactRetailer: prefixer('hasArtefactRetailer'),

    /**
    * **[Supplier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasArtefactSupplier)** (property)
    * 
    * Range: string or Agent
    */
    hasArtefactSupplier: prefixer('hasArtefactSupplier'),

    /**
    * **[Related business object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssetRelatedBusinessObject)** (property)
    * 
    * To associate a BusinessObject with an Asset.
    */
    hasAssetRelatedBusinessObject: prefixer('hasAssetRelatedBusinessObject'),

    /**
    * **[Related editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssetRelatedEditorialObject)** (property)
    * 
    * To associate an EditorialObject with an Asset.
    */
    hasAssetRelatedEditorialObject: prefixer('hasAssetRelatedEditorialObject'),

    /**
    * **[Asset related media resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssetRelatedMediaResource)** (property)
    * 
    * To identify a related MediaResource.
    */
    hasAssetRelatedMediaResource: prefixer('hasAssetRelatedMediaResource'),

    /**
    * **[Asset related resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssetRelatedResource)** (property)
    * 
    * To identify a related Resource.
    */
    hasAssetRelatedResource: prefixer('hasAssetRelatedResource'),

    /**
    * **[Associated asset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssociatedAsset)** (property)
    * 
    * To identify an associated asset.
    */
    hasAssociatedAsset: prefixer('hasAssociatedAsset'),

    /**
    * **[Relation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAssociatedRelation)** (property)
    * 
    * To define a Relation.
    */
    hasAssociatedRelation: prefixer('hasAssociatedRelation'),

    /**
    * **[Audience score recording technique](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudienceScoreRecordingTechnique)** (property)
    * 
    * Range: string or AudienceScorerecordingTechnique.
    */
    hasAudienceScoreRecordingTechnique: prefixer('hasAudienceScoreRecordingTechnique'),

    /**
    * **[Audio codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioCodec)** (property)
    * 
    * Range:string or AudioCodec
    */
    hasAudioCodec: prefixer('hasAudioCodec'),

    /**
    * **[Codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCodec)** (property)
    * 
    * Range: string or Codec
    */
    hasCodec: prefixer('hasCodec'),

    /**
    * **[Audio content type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioContentType)** (property)
    * 
    * Range:string or AudioContent_Type.
    */
    hasAudioContentType: prefixer('hasAudioContentType'),

    /**
    * **[Audio description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioDescription)** (property)
    * 
    * To signal the presence of
    * AudioDescription.
    */
    hasAudioDescription: prefixer('hasAudioDescription'),

    /**
    * **[Audio encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioEncodingFormat)** (property)
    * 
    * Range: string or AudioEncodingFormat
    */
    hasAudioEncodingFormat: prefixer('hasAudioEncodingFormat'),

    /**
    * **[Audio programme type.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioProgrammeType)** (property)
    * 
    * Range:string or AudioProgramme_Type
    */
    hasAudioProgrammeType: prefixer('hasAudioProgrammeType'),

    /**
    * **[Audio track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAudioTrack)** (property)
    * 
    * To identify AudioTracks in the Resource.
    */
    hasAudioTrack: prefixer('hasAudioTrack'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAwardRelatedAgent)** (property)
    * 
    * Range: string or Agent.
    */
    hasAwardRelatedAgent: prefixer('hasAwardRelatedAgent'),

    /**
    * **[Business object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAwardRelatedBusinessObject)** (property)
    * 
    * To link a BusinessObject to an Award.
    */
    hasAwardRelatedBusinessObject: prefixer('hasAwardRelatedBusinessObject'),

    /**
    * **[Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasAwardRelatedEvent)** (property)
    * 
    * An Event e.g. a ceremony, associated to an Award.
    */
    hasAwardRelatedEvent: prefixer('hasAwardRelatedEvent'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasBeenAwarded)** (property)
    * 
    * Range: a string or an Award.
    */
    hasBeenAwarded: prefixer('hasBeenAwarded'),

    /**
    * **[Captioning](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCaptioning)** (property)
    * 
    * To signal the presence of
    * Captioning.
    */
    hasCaptioning: prefixer('hasCaptioning'),

    /**
    * **[Captioning format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCaptioningFormat)** (property)
    * 
    * Range: string or CaptioningFormat
    */
    hasCaptioningFormat: prefixer('hasCaptioningFormat'),

    /**
    * **[Captioning source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCaptioningSource)** (property)
    * 
    * Range: string or Agent
    */
    hasCaptioningSource: prefixer('hasCaptioningSource'),

    /**
    * **[Cast member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCastMember)** (property)
    * 
    * A member of the cast.
    */
    hasCastMember: prefixer('hasCastMember'),

    /**
    * **[Cast role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCastRole)** (property)
    * 
    * Range: a string or a Role/Concept from a controlled vocabulary.
    */
    hasCastRole: prefixer('hasCastRole'),

    /**
    * **[Channel logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasChannelLogo)** (property)
    * 
    * The logo of a Publication Channel
    */
    hasChannelLogo: prefixer('hasChannelLogo'),

    /**
    * **[Logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLogo)** (property)
    * 
    * Logos can be used in a variety of contexts.
    * Logo can be associated with an Organisation or a Service or a PublicationChannel.
    */
    hasLogo: prefixer('hasLogo'),

    /**
    * **[Publication event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasChannelPublicationEvent)** (property)
    * 
    * To associate PublicationEvents with
    * PublicationChannels.
    */
    hasChannelPublicationEvent: prefixer('hasChannelPublicationEvent'),

    /**
    * **[Character](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCharacter)** (property)
    * 
    * Range: a string or a "fictitious" person - Character.
    */
    hasCharacter: prefixer('hasCharacter'),

    /**
    * **[Codec vendor](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCodecVendor)** (property)
    * 
    * Range: string or Agent.
    */
    hasCodecVendor: prefixer('hasCodecVendor'),

    /**
    * **[Colour space](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasColourSpace)** (property)
    * 
    * Range: string or Concept
    */
    hasColourSpace: prefixer('hasColourSpace'),

    /**
    * **[Contact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContact)** (property)
    * 
    * Range: a link to a Contact or a string.
    */
    hasContact: prefixer('hasContact'),

    /**
    * **[Container codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContainerCodec)** (property)
    * 
    * Range: string or ContainerCodec
    */
    hasContainerCodec: prefixer('hasContainerCodec'),

    /**
    * **[Container encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContainerEncodingFormat)** (property)
    * 
    * Range: string or ContainerEncodingFormat
    */
    hasContainerEncodingFormat: prefixer('hasContainerEncodingFormat'),

    /**
    * **[Mime type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContainerMimeType)** (property)
    * 
    * Range: string or MimeType
    */
    hasContainerMimeType: prefixer('hasContainerMimeType'),

    /**
    * **[Editorial format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContentEditorialFormat)** (property)
    * 
    * Range: string or ContentEditorialFormat.
    */
    hasContentEditorialFormat: prefixer('hasContentEditorialFormat'),

    /**
    * **[Contributor](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasContributor)** (property)
    * 
    * Range: string or Agent
    */
    hasContributor: prefixer('hasContributor'),

    /**
    * **[Copyright](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCopyright)** (property)
    * 
    * Range: string or Copyright.
    */
    hasCopyright: prefixer('hasCopyright'),

    /**
    * **[Costume type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCostumeType)** (property)
    * 
    * Range: a string or Costume_type e.g. a Concept code from a vocabulary, e.g. Getty.
    */
    hasCostumeType: prefixer('hasCostumeType'),

    /**
    * **[Country of birth](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCountryOfBirth)** (property)
    * 
    * Range: string or CountryCode
    */
    hasCountryOfBirth: prefixer('hasCountryOfBirth'),

    /**
    * **[Country of death](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCountryOfDeath)** (property)
    * 
    * Range: string or CountryCode
    */
    hasCountryOfDeath: prefixer('hasCountryOfDeath'),

    /**
    * **[Coverage](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCoverage)** (property)
    * 
    * Range: string or Event or Location
    */
    hasCoverage: prefixer('hasCoverage'),

    /**
    * **[Coverage restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCoverageRestrictions)** (property)
    * 
    * Range: string or CoverageRestrictions.
    */
    hasCoverageRestrictions: prefixer('hasCoverageRestrictions'),

    /**
    * **[Creation location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCreationLocation)** (property)
    * 
    * Range: string or Location.
    */
    hasCreationLocation: prefixer('hasCreationLocation'),

    /**
    * **[Creative Commons](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCreativeCommons)** (property)
    * 
    * Range: string or Creative Commons.
    */
    hasCreativeCommons: prefixer('hasCreativeCommons'),

    /**
    * **[Creator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCreator)** (property)
    * 
    * Range: string or Agent.
    */
    hasCreator: prefixer('hasCreator'),

    /**
    * **[Crew member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCrewMember)** (property)
    * 
    * A member of the crew.
    */
    hasCrewMember: prefixer('hasCrewMember'),

    /**
    * **[Crew role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCrewRole)** (property)
    * 
    * Range: a string or a Role/Concept from a controlled vocabulary.
    */
    hasCrewRole: prefixer('hasCrewRole'),

    /**
    * **[Cuisine origin](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCuisineOrigin)** (property)
    * 
    * Range: a string or CountryCode
    */
    hasCuisineOrigin: prefixer('hasCuisineOrigin'),

    /**
    * **[Cuisine style](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasCuisineStyle)** (property)
    * 
    * Range: a string or CuisineStyle
    */
    hasCuisineStyle: prefixer('hasCuisineStyle'),

    /**
    * **[Data format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDataFormat)** (property)
    * 
    * Range: string or DataFormat
    */
    hasDataFormat: prefixer('hasDataFormat'),

    /**
    * **[Data track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDataTrack)** (property)
    * 
    * To identify DataTracks in the Resource.
    */
    hasDataTrack: prefixer('hasDataTrack'),

    /**
    * **[Department](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDepartment)** (property)
    * 
    * Range: string or Department.
    */
    hasDepartment: prefixer('hasDepartment'),

    /**
    * **[Disclaimer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDisclaimer)** (property)
    * 
    * Range: string or Disclaimer.
    */
    hasDisclaimer: prefixer('hasDisclaimer'),

    /**
    * **[Document format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDocumentFormat)** (property)
    * 
    * Range: string or Document format
    */
    hasDocumentFormat: prefixer('hasDocumentFormat'),

    /**
    * **[Dopesheet](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDopesheet)** (property)
    * 
    * Range: string or Dopesheet.
    */
    hasDopesheet: prefixer('hasDopesheet'),

    /**
    * **[Dubbed language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasDubbedLanguage)** (property)
    * 
    * Range: string or Language.
    */
    hasDubbedLanguage: prefixer('hasDubbedLanguage'),

    /**
    * **[Language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLanguage)** (property)
    * 
    * Range: string or Language.
    */
    hasLanguage: prefixer('hasLanguage'),

    /**
    * **[EIDR](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEidrIdentifier)** (property)
    * 
    * Range: string or Identifier.
    */
    hasEidrIdentifier: prefixer('hasEidrIdentifier'),

    /**
    * **[Identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIdentifier)** (property)
    * 
    * Range: string or Identifier.
    */
    hasIdentifier: prefixer('hasIdentifier'),

    /**
    * **[Emotion related agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEmotionRelatedAgent)** (property)
    * 
    * Range: String or Agent
    */
    hasEmotionRelatedAgent: prefixer('hasEmotionRelatedAgent'),

    /**
    * **[Emotion related scene](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEmotionRelatedScene)** (property)
    * 
    * Range: string or Scene
    */
    hasEmotionRelatedScene: prefixer('hasEmotionRelatedScene'),

    /**
    * **[Encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEncodingFormat)** (property)
    * 
    * Range: string or Encoding format
    */
    hasEncodingFormat: prefixer('hasEncodingFormat'),

    /**
    * **[Episode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEpisode)** (property)
    * 
    * Range: string or Episode.
    */
    hasEpisode: prefixer('hasEpisode'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedAgent)** (property)
    * 
    * Range: string or Agent
    */
    hasEventRelatedAgent: prefixer('hasEventRelatedAgent'),

    /**
    * **[Artefact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedArtefact)** (property)
    * 
    * An artefact related to an Event.
    */
    hasEventRelatedArtefact: prefixer('hasEventRelatedArtefact'),

    /**
    * **[Business object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedBusinessObject)** (property)
    * 
    * A BusinessObject relates to an Event.
    */
    hasEventRelatedBusinessObject: prefixer('hasEventRelatedBusinessObject'),

    /**
    * **[Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedEvent)** (property)
    * 
    * An Event relates to an Event.
    */
    hasEventRelatedEvent: prefixer('hasEventRelatedEvent'),

    /**
    * **[Location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedLocation)** (property)
    * 
    * Range: a Location or a string
    */
    hasEventRelatedLocation: prefixer('hasEventRelatedLocation'),

    /**
    * **[Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventRelatedResource)** (property)
    * 
    * A Resource relates to an Event.
    */
    hasEventRelatedResource: prefixer('hasEventRelatedResource'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasEventType)** (property)
    * 
    * To define a type of Event.
    */
    hasEventType: prefixer('hasEventType'),

    /**
    * **[Exploitation Issues](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasExploitationIssues)** (property)
    * 
    * Range: string or Exploitation Issues.
    */
    hasExploitationIssues: prefixer('hasExploitationIssues'),

    /**
    * **[File format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasFileFormat)** (property)
    * 
    * Range: string or FileFormat.
    */
    hasFileFormat: prefixer('hasFileFormat'),

    /**
    * **[Food style](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasFoodStyle)** (property)
    * 
    * Range: string or FoodStyle.
    */
    hasFoodStyle: prefixer('hasFoodStyle'),

    /**
    * **[Format identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasFormatId)** (property)
    * 
    * Range: Identifier or string or anyURI.
    */
    hasFormatId: prefixer('hasFormatId'),

    /**
    * **[Generation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasGeneration)** (property)
    * 
    * Identifies the generation of a version of a resource, i.e. master,
    * edit master, distribution copy, etc.
    */
    hasGeneration: prefixer('hasGeneration'),

    /**
    * **[Genre](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasGenre)** (property)
    * 
    * To define a Genre/category associated to the
    * BusinesssObject.
    */
    hasGenre: prefixer('hasGenre'),

    /**
    * **[IMedia Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIMediaIdentifier)** (property)
    * 
    * Range: string or Identifier.
    */
    hasIMediaIdentifier: prefixer('hasIMediaIdentifier'),

    /**
    * **[IPR restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIPRRestrictions)** (property)
    * 
    * Range: string or IPR Restrictions.
    */
    hasIPRRestrictions: prefixer('hasIPRRestrictions'),

    /**
    * **[Identification picture](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIdPicture)** (property)
    * 
    * A locator / URI or a Picture.
    */
    hasIdPicture: prefixer('hasIdPicture'),

    /**
    * **[Identifier type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIdentifierType)** (property)
    * 
    * Range: Concept or string
    */
    hasIdentifierType: prefixer('hasIdentifierType'),

    /**
    * **[Image codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasImageCodec)** (property)
    * 
    * Range: string or Codec
    */
    hasImageCodec: prefixer('hasImageCodec'),

    /**
    * **[Image format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasImageFormat)** (property)
    * 
    * Range: string or ImageFormat
    */
    hasImageFormat: prefixer('hasImageFormat'),

    /**
    * **[ISAN](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasIsanIdentifier)** (property)
    * 
    * Range: string or Identifier.
    */
    hasIsanIdentifier: prefixer('hasIsanIdentifier'),

    /**
    * **[Career event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasKeyCareerEvent)** (property)
    * 
    * Range: string or KeyCareerEvent
    */
    hasKeyCareerEvent: prefixer('hasKeyCareerEvent'),

    /**
    * **[Personal event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasKeyPersonalEvent)** (property)
    * 
    * Range: string or KeyPersonalEvent
    */
    hasKeyPersonalEvent: prefixer('hasKeyPersonalEvent'),

    /**
    * **[Keyword](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasKeyword)** (property)
    * 
    * Range: Keyword or string or any URI from a controlled vocabulary
    */
    hasKeyword: prefixer('hasKeyword'),

    /**
    * **[Subject](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSubject)** (property)
    * 
    * Range: string, anyURI or Subject
    */
    hasSubject: prefixer('hasSubject'),

    /**
    * **[Licensing](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLicensing)** (property)
    * 
    * Range: string or Licensing.
    */
    hasLicensing: prefixer('hasLicensing'),

    /**
    * **[Locationcode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationCode)** (property)
    * 
    * Range: string or LocationCode.
    */
    hasLocationCode: prefixer('hasLocationCode'),

    /**
    * **[Picture](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationPicture)** (property)
    * 
    * A picture associated with a Location.
    */
    hasLocationPicture: prefixer('hasLocationPicture'),

    /**
    * **[Artefact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationRelatedArtefact)** (property)
    * 
    * Range: a string or an Artefact.
    */
    hasLocationRelatedArtefact: prefixer('hasLocationRelatedArtefact'),

    /**
    * **[Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationRelatedEvent)** (property)
    * 
    * Range: a string or an Event.
    */
    hasLocationRelatedEvent: prefixer('hasLocationRelatedEvent'),

    /**
    * **[Related resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationRelatedResource)** (property)
    * 
    * To identify a Resource associated with a Location.
    */
    hasLocationRelatedResource: prefixer('hasLocationRelatedResource'),

    /**
    * **[Locationcode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocationType)** (property)
    * 
    * Range: string or LocationType.
    */
    hasLocationType: prefixer('hasLocationType'),

    /**
    * **[Locator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasLocator)** (property)
    * 
    * A locator from where the MediaResource can be accessed.
    */
    hasLocator: prefixer('hasLocator'),

    /**
    * **[Manifestation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasManifestation)** (property)
    * 
    * A manifestation is the physical embodiment of work e.g. a tape, a file...
    */
    hasManifestation: prefixer('hasManifestation'),

    /**
    * **[Master](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMaster)** (property)
    * 
    * To identify the master of a Resource
    */
    hasMaster: prefixer('hasMaster'),

    /**
    * **[Fragment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMediaFragment)** (property)
    * 
    * To define relation to MediaFragments
    * withiin a MediaResource.
    */
    hasMediaFragment: prefixer('hasMediaFragment'),

    /**
    * **[Media fragment source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isMediaFragmentOf)** (property)
    * 
    * To identify the Media Resource to which a Media Fragment belongs to
    */
    isMediaFragmentOf: prefixer('isMediaFragmentOf'),

    /**
    * **[Medium](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMedium)** (property)
    * 
    * Range: string or Medium
    */
    hasMedium: prefixer('hasMedium'),

    /**
    * **[Member.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMember)** (property)
    * 
    * To establish group/collection relationship between EditorialObjects.
    */
    hasMember: prefixer('hasMember'),

    /**
    * **[Publication  plan member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMemberPublicationPlan)** (property)
    * 
    * To identify a PublicationPlan that forms part of another PublicationPlan.
    */
    hasMemberPublicationPlan: prefixer('hasMemberPublicationPlan'),

    /**
    * **[Metadata track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMetadataTrack)** (property)
    * 
    * To identify MetadataTracks in the Resource.
    */
    hasMetadataTrack: prefixer('hasMetadataTrack'),

    /**
    * **[Mime type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasMimeType)** (property)
    * 
    * Range: string or MimeType
    */
    hasMimeType: prefixer('hasMimeType'),

    /**
    * **[Object/asset type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasObjectType)** (property)
    * 
    * Range: string or ObjectType.
    */
    hasObjectType: prefixer('hasObjectType'),

    /**
    * **[Organisation logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasOrganisationLogo)** (property)
    * 
    * The logo representing an Organisation
    */
    hasOrganisationLogo: prefixer('hasOrganisationLogo'),

    /**
    * **[Staff](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasOrganisationStaff)** (property)
    * 
    * Range: string or Staff.
    */
    hasOrganisationStaff: prefixer('hasOrganisationStaff'),

    /**
    * **[Original language](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasOriginalLanguage)** (property)
    * 
    * Range: string or Language.
    */
    hasOriginalLanguage: prefixer('hasOriginalLanguage'),

    /**
    * **[Parent editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasParentEditorialObject)** (property)
    * 
    * To link a EditorialOject to a parent.
    */
    hasParentEditorialObject: prefixer('hasParentEditorialObject'),

    /**
    * **[Parent resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasParentMediaResource)** (property)
    * 
    * To link a MediaResource to a parent.
    */
    hasParentMediaResource: prefixer('hasParentMediaResource'),

    /**
    * **[Part](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPart)** (property)
    * 
    * To define Parts (segments, fragments, shots, etc.)
    * within an EditorialObject.
    */
    hasPart: prefixer('hasPart'),

    /**
    * **[Part type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPartType)** (property)
    * 
    * A type of Part.
    */
    hasPartType: prefixer('hasPartType'),

    /**
    * **[Participating agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasParticipatingAgent)** (property)
    * 
    * To identify participating Agents.
    */
    hasParticipatingAgent: prefixer('hasParticipatingAgent'),

    /**
    * **[Pictogram](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPictogram)** (property)
    * 
    * Range: a locator/URI or a Picture.
    */
    hasPictogram: prefixer('hasPictogram'),

    /**
    * **[Birth place](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPlaceOfBirth)** (property)
    * 
    * To identify the place of birth.
    */
    hasPlaceOfBirth: prefixer('hasPlaceOfBirth'),

    /**
    * **[Death place](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPlaceOfDeath)** (property)
    * 
    * To identify the place of death.
    */
    hasPlaceOfDeath: prefixer('hasPlaceOfDeath'),

    /**
    * **[Producer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasProducer)** (property)
    * 
    * Range: string or Agent.
    */
    hasProducer: prefixer('hasProducer'),

    /**
    * **[Production location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasProductionLocation)** (property)
    * 
    * Range: a Location or string
    */
    hasProductionLocation: prefixer('hasProductionLocation'),

    /**
    * **[Provenance](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasProvenance)** (property)
    * 
    * Range: string, anyURI or Concept.
    */
    hasProvenance: prefixer('hasProvenance'),

    /**
    * **[Provenance target](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasProvenanceTarget)** (property)
    * 
    * The instance of an object sourced by the Provenance.
    */
    hasProvenanceTarget: prefixer('hasProvenanceTarget'),

    /**
    * **[Publication event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationEvent)** (property)
    * 
    * To associate PublicationEvents with
    * PublicationChannels or as elements of a PublicationHistory or PublicationPlanning.
    */
    hasPublicationEvent: prefixer('hasPublicationEvent'),

    /**
    * **[Publication history](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationHistory)** (property)
    * 
    * To provide the history of publication of an EditorailObject or MediaResource.
    */
    hasPublicationHistory: prefixer('hasPublicationHistory'),

    /**
    * **[Publication medium](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationMedium)** (property)
    * 
    * Range: string or PublicationMedium.
    */
    hasPublicationMedium: prefixer('hasPublicationMedium'),

    /**
    * **[Publication plan member.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationPlanMember)** (property)
    * 
    * To identify a subplan of a publication plan.
    */
    hasPublicationPlanMember: prefixer('hasPublicationPlanMember'),

    /**
    * **[Publication plan type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationPlanType)** (property)
    * 
    * Range: string or PublicationPlan_type.
    */
    hasPublicationPlanType: prefixer('hasPublicationPlanType'),

    /**
    * **[Publication region](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublicationRegion)** (property)
    * 
    * Range: string or Location
    */
    hasPublicationRegion: prefixer('hasPublicationRegion'),

    /**
    * **[Publisher](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasPublisher)** (property)
    * 
    * To identify an Agent involved in the publication of the Resource or BusinessObject.
    */
    hasPublisher: prefixer('hasPublisher'),

    /**
    * **[Rating](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRating)** (property)
    * 
    * Range: a string or a Rating.
    */
    hasRating: prefixer('hasRating'),

    /**
    * **[Rating source / agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRatingProvider)** (property)
    * 
    * Range: string or Agent.
    */
    hasRatingProvider: prefixer('hasRatingProvider'),

    /**
    * **[Rating source / agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRatingSource)** (property)
    * 
    * Range: string or Agent.
    */
    hasRatingSource: prefixer('hasRatingSource'),

    /**
    * **[Related animal](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAnimal)** (property)
    * 
    * To identify animals associate with an Asset.
    */
    hasRelatedAnimal: prefixer('hasRelatedAnimal'),

    /**
    * **[Related artefact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedArtefact)** (property)
    * 
    * Range: string or Artefact.
    */
    hasRelatedArtefact: prefixer('hasRelatedArtefact'),

    /**
    * **[Related asset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAsset)** (property)
    * 
    * To identify related Assets.
    */
    hasRelatedAsset: prefixer('hasRelatedAsset'),

    /**
    * **[Audio content](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAudioContent)** (property)
    * 
    * To identify related Audio Content
    */
    hasRelatedAudioContent: prefixer('hasRelatedAudioContent'),

    /**
    * **[Audio object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAudioObject)** (property)
    * 
    * To identify related Audio Objects
    */
    hasRelatedAudioObject: prefixer('hasRelatedAudioObject'),

    /**
    * **[Audio programme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAudioProgramme)** (property)
    * 
    * A related audio programme
    */
    hasRelatedAudioProgramme: prefixer('hasRelatedAudioProgramme'),

    /**
    * **[Audio track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAudioTrack)** (property)
    * 
    * To identify related Audio Tracks
    */
    hasRelatedAudioTrack: prefixer('hasRelatedAudioTrack'),

    /**
    * **[Related award](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedAward)** (property)
    * 
    * Range: string or Award.
    */
    hasRelatedAward: prefixer('hasRelatedAward'),

    /**
    * **[Related editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedEditorialObject)** (property)
    * 
    * To identify related EditorialObjects.
    */
    hasRelatedEditorialObject: prefixer('hasRelatedEditorialObject'),

    /**
    * **[Related essence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedEssence)** (property)
    * 
    * To establish a relation between a MediaResource and an Essence.
    */
    hasRelatedEssence: prefixer('hasRelatedEssence'),

    /**
    * **[Event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedEvent)** (property)
    * 
    * A property to identify the
    * Events, all real or fictional, covered by the
    * EditorialObject.
    */
    hasRelatedEvent: prefixer('hasRelatedEvent'),

    /**
    * **[Image](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedImage)** (property)
    * 
    * To associate an Image with a BusinessObject.
    */
    hasRelatedImage: prefixer('hasRelatedImage'),

    /**
    * **[Location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedLocation)** (property)
    * 
    * A property to identify the
    * Locations, all real or fictional, covered by the
    * EditorialObject.
    */
    hasRelatedLocation: prefixer('hasRelatedLocation'),

    /**
    * **[Media fragment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedMediaFragment)** (property)
    * 
    * To associate a Part of an Asset with a MediaFragment within the association MediaResource instantiating the Asset.
    */
    hasRelatedMediaFragment: prefixer('hasRelatedMediaFragment'),

    /**
    * **[Related media resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedMediaResource)** (property)
    * 
    * To identify a MediaResource associated with an Asset or a BusinessObject or a PublicationEvent or another Resource.
    */
    hasRelatedMediaResource: prefixer('hasRelatedMediaResource'),

    /**
    * **[Picture](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedPicture)** (property)
    * 
    * To associate a Picture with a BusinessObject or a Resource.
    */
    hasRelatedPicture: prefixer('hasRelatedPicture'),

    /**
    * **[Publication channel](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedPublicationChannel)** (property)
    * 
    * Range: string or PublicationChannel
    */
    hasRelatedPublicationChannel: prefixer('hasRelatedPublicationChannel'),

    /**
    * **[Publication event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedPublicationEvent)** (property)
    * 
    * To identify the PublicationEvent associated with a MediaResource (manifestation of an EditorialObject).
    */
    hasRelatedPublicationEvent: prefixer('hasRelatedPublicationEvent'),

    /**
    * **[Related record](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedRecord)** (property)
    * 
    * Range, a string a URI or a Record.
    */
    hasRelatedRecord: prefixer('hasRelatedRecord'),

    /**
    * **[Related resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedResource)** (property)
    * 
    * To identify a Resource associated with an Asset or a BusinessObject or a PublicationEvent or another Resource.
    */
    hasRelatedResource: prefixer('hasRelatedResource'),

    /**
    * **[Related Service](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedService)** (property)
    * 
    * Range: string or Service.
    */
    hasRelatedService: prefixer('hasRelatedService'),

    /**
    * **[Related text line](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelatedTextLine)** (property)
    * 
    * A TextLine or free text related to an EditorialObject.
    */
    hasRelatedTextLine: prefixer('hasRelatedTextLine'),

    /**
    * **[Relation source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRelationSource)** (property)
    * 
    * Range: string or Agent.
    */
    hasRelationSource: prefixer('hasRelationSource'),

    /**
    * **[Locator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasResourceLocator)** (property)
    * 
    * A locator from where the Resource can be accessed.
    */
    hasResourceLocator: prefixer('hasResourceLocator'),

    /**
    * **[Review](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasReview)** (property)
    * 
    * Range: string or Review.
    */
    hasReview: prefixer('hasReview'),

    /**
    * **[Rights clearance](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRightsClearance)** (property)
    * 
    * Range: string or Rights Clearance.
    */
    hasRightsClearance: prefixer('hasRightsClearance'),

    /**
    * **[Contact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRightsContact)** (property)
    * 
    * Range: a string or a Contact.
    */
    hasRightsContact: prefixer('hasRightsContact'),

    /**
    * **[Rights holder](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRightsHolder)** (property)
    * 
    * Range: a string or an Agent.
    */
    hasRightsHolder: prefixer('hasRightsHolder'),

    /**
    * **[Role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasRole)** (property)
    * 
    * Range: a string or a Role/Concept from a controlled vocabulary.
    */
    hasRole: prefixer('hasRole'),

    /**
    * **[Season](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSeason)** (property)
    * 
    * To identiify Seasons in a Series.
    */
    hasSeason: prefixer('hasSeason'),

    /**
    * **[Service genre](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasServiceGenre)** (property)
    * 
    * Range: string or Genre
    */
    hasServiceGenre: prefixer('hasServiceGenre'),

    /**
    * **[Service logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasServiceLogo)** (property)
    * 
    * The Logo characterising a Service
    */
    hasServiceLogo: prefixer('hasServiceLogo'),

    /**
    * **[Shooting location](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasShootingLocation)** (property)
    * 
    * Range: Location or string
    */
    hasShootingLocation: prefixer('hasShootingLocation'),

    /**
    * **[Accessibility - signing](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSigning)** (property)
    * 
    * A locator/URI to a resource or a Signing resource.
    */
    hasSigning: prefixer('hasSigning'),

    /**
    * **[Signing format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSigningFormat)** (property)
    * 
    * Range: string or SigningFormat.
    */
    hasSigningFormat: prefixer('hasSigningFormat'),

    /**
    * **[Signing source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSigningSource)** (property)
    * 
    * Range: string or Agent.
    */
    hasSigningSource: prefixer('hasSigningSource'),

    /**
    * **[Source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSource)** (property)
    * 
    * To identify the source of a MediaResource.
    */
    hasSource: prefixer('hasSource'),

    /**
    * **[member of Staff](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStaffMember)** (property)
    * 
    * Range: string or Staff.
    */
    hasStaffMember: prefixer('hasStaffMember'),

    /**
    * **[Staff role](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStaffRole)** (property)
    * 
    * Range: a string or a Role/Concept from a controlled vocabulary.
    */
    hasStaffRole: prefixer('hasStaffRole'),

    /**
    * **[Publication plan stakeholder](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStakeholder)** (property)
    * 
    * Range: Agent or string
    */
    hasStakeholder: prefixer('hasStakeholder'),

    /**
    * **[Standard](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStandard)** (property)
    * 
    * Identifies the technical video standard of a MediaResource, i.e. NTSC or PAL.
    */
    hasStandard: prefixer('hasStandard'),

    /**
    * **[Storage identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStorageId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    hasStorageId: prefixer('hasStorageId'),

    /**
    * **[Storage type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasStorageType)** (property)
    * 
    * Range:; string or Storage_Type
    */
    hasStorageType: prefixer('hasStorageType'),

    /**
    * **[Subtitling](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSubtitling)** (property)
    * 
    * Range: string or Subtitling
    */
    hasSubtitling: prefixer('hasSubtitling'),

    /**
    * **[Subtitling format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSubtitlingFormat)** (property)
    * 
    * Range: string or SubtitlingFormat
    */
    hasSubtitlingFormat: prefixer('hasSubtitlingFormat'),

    /**
    * **[Subtitling source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasSubtitlingSource)** (property)
    * 
    * Range: a string or an Agent.
    */
    hasSubtitlingSource: prefixer('hasSubtitlingSource'),

    /**
    * **[Target audience](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTargetAudience)** (property)
    * 
    * Range: string or TargetAudience.
    */
    hasTargetAudience: prefixer('hasTargetAudience'),

    /**
    * **[Target platform](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTargetPlatform)** (property)
    * 
    * To specify a target platform.
    */
    hasTargetPlatform: prefixer('hasTargetPlatform'),

    /**
    * **[Team member](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTeamMember)** (property)
    * 
    * Range: a Person or a string
    */
    hasTeamMember: prefixer('hasTeamMember'),

    /**
    * **[Text line identifier.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineId)** (property)
    * 
    * Range: string or Identifier.
    */
    hasTextLineId: prefixer('hasTextLineId'),

    /**
    * **[Text line related agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineRelatedAgent)** (property)
    * 
    * Range: string or Agent.
    */
    hasTextLineRelatedAgent: prefixer('hasTextLineRelatedAgent'),

    /**
    * **[Text line related character](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineRelatedCharacter)** (property)
    * 
    * Range: string or Character.
    */
    hasTextLineRelatedCharacter: prefixer('hasTextLineRelatedCharacter'),

    /**
    * **[Text line related scene](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineRelatedScene)** (property)
    * 
    * Range: string or Scene.
    */
    hasTextLineRelatedScene: prefixer('hasTextLineRelatedScene'),

    /**
    * **[Text line source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineSource)** (property)
    * 
    * Range: string or Agent.
    */
    hasTextLineSource: prefixer('hasTextLineSource'),

    /**
    * **[Text line type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTextLineType)** (property)
    * 
    * Range: string or TextLine_Type
    */
    hasTextLineType: prefixer('hasTextLineType'),

    /**
    * **[Theme](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTheme)** (property)
    * 
    * Range: a Concept, anyURI or a string
    */
    hasTheme: prefixer('hasTheme'),

    /**
    * **[Timecode track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTimecodeTrack)** (property)
    * 
    * To identify a timecode track with a MediaResource.
    */
    hasTimecodeTrack: prefixer('hasTimecodeTrack'),

    /**
    * **[Timeline track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTimelineTrack)** (property)
    * 
    * To associate a TimelineTrack with an EditorialObject
    */
    hasTimelineTrack: prefixer('hasTimelineTrack'),

    /**
    * **[Timeline track part](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTimelineTrackPart)** (property)
    * 
    * To associate an EditorialObject to a TimelineTrackPart
    */
    hasTimelineTrackPart: prefixer('hasTimelineTrackPart'),

    /**
    * **[Timeline track type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTimelineTrackType)** (property)
    * 
    * Range: string or anyURI or TimelineTrack_Type.
    */
    hasTimelineTrackType: prefixer('hasTimelineTrackType'),

    /**
    * **[Topic](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTopic)** (property)
    * 
    * Range: a Topic, anyURI or a string
    */
    hasTopic: prefixer('hasTopic'),

    /**
    * **[Track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTrack)** (property)
    * 
    * To associate audio/data/video tracks with a MediaResource.
    */
    hasTrack: prefixer('hasTrack'),

    /**
    * **[Track part source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTrackPart)** (property)
    * 
    * An element to identify a part of a track by a title, a start time and an end time in both the media source and media destinationn.
    */
    hasTrackPart: prefixer('hasTrackPart'),

    /**
    * **[Track purpose](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasTrackPurpose)** (property)
    * 
    * Range: string or TrackPurpose.
    */
    hasTrackPurpose: prefixer('hasTrackPurpose'),

    /**
    * **[Type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasType)** (property)
    * 
    * An type of Asset.
    */
    hasType: prefixer('hasType'),

    /**
    * **[Usage restrictions](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasUsageRestrictions)** (property)
    * 
    * Range: string or UsageRestrictions.
    */
    hasUsageRestrictions: prefixer('hasUsageRestrictions'),

    /**
    * **[Usage rights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasUsageRights)** (property)
    * 
    * Range: string or UsageRights.
    */
    hasUsageRights: prefixer('hasUsageRights'),

    /**
    * **[Version](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasVersion)** (property)
    * 
    * To identify another version of an Asset, BusinessObject or Resource.
    */
    hasVersion: prefixer('hasVersion'),

    /**
    * **[Version of](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isVersionOf)** (property)
    * 
    * To identify related versions.
    */
    isVersionOf: prefixer('isVersionOf'),

    /**
    * **[Video codec](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasVideoCodec)** (property)
    * 
    * Range: string or VideoCodec
    */
    hasVideoCodec: prefixer('hasVideoCodec'),

    /**
    * **[Audio encoding format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasVideoEncodingFormat)** (property)
    * 
    * Range: string or VideoEncodingFormat
    */
    hasVideoEncodingFormat: prefixer('hasVideoEncodingFormat'),

    /**
    * **[Video track](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasVideoTrack)** (property)
    * 
    * To identify VideoTracks in the Resource.
    */
    hasVideoTrack: prefixer('hasVideoTrack'),

    /**
    * **[Wrapping type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hasWrappingType)** (property)
    * 
    * Range: string or WrappingType.
    */
    hasWrappingType: prefixer('hasWrappingType'),

    /**
    * **[Hash code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hashValue)** (property)
    * 
    * The hash value associated to a Resource. There
    * are different methods / algorithms to calculate hash values, which can be defined as
    * subproperties.
    */
    hashValue: prefixer('hashValue'),

    /**
    * **[Highlights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#highlights)** (property)
    * 
    * To provide highlights.
    */
    highlights: prefixer('highlights'),

    /**
    * **[Hobbies](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#hobbies)** (property)
    * 
    * The hobbies of a Person.
    */
    hobbies: prefixer('hobbies'),

    /**
    * **[I-frame/Gop size](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#iFrameSize)** (property)
    * 
    * The distance between 2 I-frames also known as the gop size.
    */
    iFrameSize: prefixer('iFrameSize'),

    /**
    * **[Date of creation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#idDateOfCreation)** (property)
    * 
    * The date when the identifier was generated.
    */
    idDateOfCreation: prefixer('idDateOfCreation'),

    /**
    * **[Identifier value](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#identifierValue)** (property)
    * 
    * Range: string or anyURI.
    */
    identifierValue: prefixer('identifierValue'),

    /**
    * **[Inches per second](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#inchesPerSecond)** (property)
    * 
    * Identifies the inches per second at which an analog audio tape should be played back for human consumption.
    */
    inchesPerSecond: prefixer('inchesPerSecond'),

    /**
    * **[Playback speed](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#playbackSpeed)** (property)
    * 
    * Identifies the rate of units against time at which the resource should be played back for human consumption.  If the unit of measure is known, use sub-properties framesPerSecond or inchesPerSecond.
    */
    playbackSpeed: prefixer('playbackSpeed'),

    /**
    * **[Business object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#instantiates)** (property)
    * 
    * To link a particular manifestation of a
    * BusinessObject to the corresponding Resource.
    */
    instantiates: prefixer('instantiates'),

    /**
    * **[Animal groom](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isAnimalGroom)** (property)
    * 
    * To identify the groom / care taker of an animal.
    */
    isAnimalGroom: prefixer('isAnimalGroom'),

    /**
    * **[Animal owner](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isAnimalOwner)** (property)
    * 
    * To identify the owner of an animal.
    */
    isAnimalOwner: prefixer('isAnimalOwner'),

    /**
    * **[Media resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isAnnotatedMediaResource)** (property)
    * 
    * To link an Annotation to a MediaResource.
    */
    isAnnotatedMediaResource: prefixer('isAnnotatedMediaResource'),

    /**
    * **[Agent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isAnnotationBy)** (property)
    * 
    * To link an Annotation to an Agent who created it.
    */
    isAnnotationBy: prefixer('isAnnotationBy'),

    /**
    * **[Provenance target](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isAttributedTo)** (property)
    * 
    * Tassociate an Agent with a Provenance instance.
    */
    isAttributedTo: prefixer('isAttributedTo'),

    /**
    * **[Brand](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isBrand)** (property)
    * 
    * Range: a string or Brand
    */
    isBrand: prefixer('isBrand'),

    /**
    * **[Fictional character.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isCharacter)** (property)
    * 
    * Range: string or Agent.
    */
    isCharacter: prefixer('isCharacter'),

    /**
    * **[Parent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isChildOf)** (property)
    * 
    * To link a BusinessOject or Resource to a parent.
    */
    isChildOf: prefixer('isChildOf'),

    /**
    * **[Media Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isComposedOf)** (property)
    * 
    * To identify mediaResources used to compose an Essence.
    */
    isComposedOf: prefixer('isComposedOf'),

    /**
    * **[Permissions](http://www.w3.org/ns/ma-ont#hasPermissions)** (property)
    * 
    * To define permissions as defined in the W3C media ontology (ma-ont)
    */
    'ma:hasPermissions': prefixer('ma:hasPermissions'),

    /**
    * **[Derived from](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isDerivedFrom)** (property)
    * 
    * Identifies a content-based relationship between two resources.
    */
    isDerivedFrom: prefixer('isDerivedFrom'),

    /**
    * **[Platform/Service/PublicationChannel](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isDistributedOn)** (property)
    * 
    * Range: Service or string.
    */
    isDistributedOn: prefixer('isDistributedOn'),

    /**
    * **[Same editorial format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isEditorialFormatOf)** (property)
    * 
    * To identify an Editorial Object based on the same Editorial format
    */
    isEditorialFormatOf: prefixer('isEditorialFormatOf'),

    /**
    * **[Parent season / series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isEpisodeOf)** (property)
    * 
    * Range: Series or string.
    */
    isEpisodeOf: prefixer('isEpisodeOf'),

    /**
    * **[Parent season / series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isEpisodeOfSeason)** (property)
    * 
    * The Episode of a Series or a Season.
    */
    isEpisodeOfSeason: prefixer('isEpisodeOfSeason'),

    /**
    * **[Parent season / series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isEpisodeOfSeries)** (property)
    * 
    * The Episode of a Series or a Season.
    */
    isEpisodeOfSeries: prefixer('isEpisodeOfSeries'),

    /**
    * **[Fictitious contact](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isFictitiousPerson)** (property)
    * 
    * Range: a string or a FictitiousPerson.
    */
    isFictitiousPerson: prefixer('isFictitiousPerson'),

    /**
    * **[Media Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isInstantiatedBy)** (property)
    * 
    * To identify a MediaResource instantiating an EditorialObject.
    */
    isInstantiatedBy: prefixer('isInstantiatedBy'),

    /**
    * **[Issuer](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isIssuedBy)** (property)
    * 
    * Range: Agent or String
    */
    isIssuedBy: prefixer('isIssuedBy'),

    /**
    * **[Derived media resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isMasterOf)** (property)
    * 
    * To identify the master of a derived media resource.
    */
    isMasterOf: prefixer('isMasterOf'),

    /**
    * **[Member of](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isMemberOf)** (property)
    * 
    * Range: string or Group.
    */
    isMemberOf: prefixer('isMemberOf'),

    /**
    * **[Parent publication  plan](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isMemberOfPublicationPlan)** (property)
    * 
    * To identify a parent Publication Plan
    */
    isMemberOfPublicationPlan: prefixer('isMemberOfPublicationPlan'),

    /**
    * **[Next](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isNextInSequence)** (property)
    * 
    * A link to an Asset following the current Asset in an ordered sequence.
    */
    isNextInSequence: prefixer('isNextInSequence'),

    /**
    * **[Operator, owner](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isOperatedBy)** (property)
    * 
    * Range: string or Service.
    */
    isOperatedBy: prefixer('isOperatedBy'),

    /**
    * **[Owner](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isOwnedBy)** (property)
    * 
    * Range: string or Agent.
    */
    isOwnedBy: prefixer('isOwnedBy'),

    /**
    * **[Child](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isParentOf)** (property)
    * 
    * To link a Asset to a parent Asset.
    */
    isParentOf: prefixer('isParentOf'),

    /**
    * **[Editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isPartOf)** (property)
    * 
    * To identify the editorial object to which belongs a part.
    */
    isPartOf: prefixer('isPartOf'),

    /**
    * **[Identification picture locator](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isPictureIdLocator)** (property)
    * 
    * Range: e.g. a string, URL or Locator.
    */
    isPictureIdLocator: prefixer('isPictureIdLocator'),

    /**
    * **[Rated business object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isRatingRelatedToBusinessObject)** (property)
    * 
    * To identify the BusinessObject associated with a Rating.
    */
    isRatingRelatedToBusinessObject: prefixer('isRatingRelatedToBusinessObject'),

    /**
    * **[Rated Resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isRatingRelatedToResource)** (property)
    * 
    * To identify the resource associated with a Rating.
    */
    isRatingRelatedToResource: prefixer('isRatingRelatedToResource'),

    /**
    * **[Reference source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isReferencedBy)** (property)
    * 
    * To described references between assets.
    */
    isReferencedBy: prefixer('isReferencedBy'),

    /**
    * **[Service](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isReleasedBy)** (property)
    * 
    * Range: Service or string
    */
    isReleasedBy: prefixer('isReleasedBy'),

    /**
    * **[Replacement](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isReplacedBy)** (property)
    * 
    * To identify substitutions.
    */
    isReplacedBy: prefixer('isReplacedBy'),

    /**
    * **[Required](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isRequiredBy)** (property)
    * 
    * To express strong relations between Assets, BusinessObjects or Resources.
    */
    isRequiredBy: prefixer('isRequiredBy'),

    /**
    * **[Publication event](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isScheduledOn)** (property)
    * 
    * To associatre a PublicationEvent with an EditorialObject.
    */
    isScheduledOn: prefixer('isScheduledOn'),

    /**
    * **[Series](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isSeasonOf)** (property)
    * 
    * Range: Series or string.
    */
    isSeasonOf: prefixer('isSeasonOf'),

    /**
    * **[Brand](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isSeriesOf)** (property)
    * 
    * Range: Brand or string.
    */
    isSeriesOf: prefixer('isSeriesOf'),

    /**
    * **[Editorial Object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isTimelineTrackPartOf)** (property)
    * 
    * To associate an EditorialObject with a part of the TimelineTrack.
    */
    isTimelineTrackPartOf: prefixer('isTimelineTrackPartOf'),

    /**
    * **[Track part source](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#isTrackPartOf)** (property)
    * 
    * An element to identify a part of a track by a title, a start time and an end time in both the media source and media destination.
    */
    isTrackPartOf: prefixer('isTrackPartOf'),

    /**
    * **[Line number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#lineNumber)** (property)
    * 
    * To provide the number of the line on which
    * ancillary data is being carried and the equivalent in the digital domain.
    */
    lineNumber: prefixer('lineNumber'),

    /**
    * **[Link to logo](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#linkToLogo)** (property)
    * 
    * Range: string or Logo
    */
    linkToLogo: prefixer('linkToLogo'),

    /**
    * **[Link to Sticker](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#linkToSticker)** (property)
    * 
    * Range: anyURI or Sticker.
    */
    linkToSticker: prefixer('linkToSticker'),

    /**
    * **[live](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#live)** (property)
    * 
    * A flag to signal that content is live
    */
    live: prefixer('live'),

    /**
    * **[Local familiy name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#localFamiliyName)** (property)
    * 
    * To provide a family name in its local expression.
    */
    localFamiliyName: prefixer('localFamiliyName'),

    /**
    * **[Local given name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#localGivenName)** (property)
    * 
    * To provide a given name in its local expression.
    */
    localGivenName: prefixer('localGivenName'),

    /**
    * **[Address](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddress)** (property)
    * 
    * To provide the address of a
    * Location.
    */
    locationAddress: prefixer('locationAddress'),

    /**
    * **[Area](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddressArea)** (property)
    * 
    * To provide the Area part of an
    * Adrress.
    */
    locationAddressArea: prefixer('locationAddressArea'),

    /**
    * **[Country](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddressCountry)** (property)
    * 
    * To provide the country name and or country
    * code.
    */
    locationAddressCountry: prefixer('locationAddressCountry'),

    /**
    * **[Adress line](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddressLine)** (property)
    * 
    * To provide an address line.
    */
    locationAddressLine: prefixer('locationAddressLine'),

    /**
    * **[Locality](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddressLocality)** (property)
    * 
    * To provide the name of a city, village,
    * etc.
    */
    locationAddressLocality: prefixer('locationAddressLocality'),

    /**
    * **[Postal code](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAddressPostalCode)** (property)
    * 
    * To provide an address postal
    * code.
    */
    locationAddressPostalCode: prefixer('locationAddressPostalCode'),

    /**
    * **[Altitude](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationAltitude)** (property)
    * 
    * To define the altitude of a Location in
    * meters.
    */
    locationAltitude: prefixer('locationAltitude'),

    /**
    * **[Coordinate system](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationCoordinateSystemName)** (property)
    * 
    * To specify the name of the gps coordinate
    * system used for the Location.
    */
    locationCoordinateSystemName: prefixer('locationCoordinateSystemName'),

    /**
    * **[Location description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationDescription)** (property)
    * 
    * To provide a description of a particular Location.
    */
    locationDescription: prefixer('locationDescription'),

    /**
    * **[Location identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationId)** (property)
    * 
    * An identifier attributed to a Location.
    */
    locationId: prefixer('locationId'),

    /**
    * **[Latitude](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationLatitude)** (property)
    * 
    * The latitude of the Location.
    */
    locationLatitude: prefixer('locationLatitude'),

    /**
    * **[Longitude](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationLongitude)** (property)
    * 
    * To define the longitude of the
    * Location.
    */
    locationLongitude: prefixer('locationLongitude'),

    /**
    * **[Location name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationName)** (property)
    * 
    * To provide a namefor a particular Location.
    */
    locationName: prefixer('locationName'),

    /**
    * **[Region](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationRegion)** (property)
    * 
    * Range: string or RegionCode
    */
    locationRegion: prefixer('locationRegion'),

    /**
    * **[Location type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationTimeType)** (property)
    * 
    * A type of time at a Location.
    */
    locationTimeType: prefixer('locationTimeType'),

    /**
    * **[Location type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locationType)** (property)
    * 
    * A type of Location.
    */
    locationType: prefixer('locationType'),

    /**
    * **[Locator target information](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#locatorTargetInformation)** (property)
    * 
    * Information on the locator target.
    */
    locatorTargetInformation: prefixer('locatorTargetInformation'),

    /**
    * **[Log](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#log)** (property)
    * 
    * To log everything in the content following predefined rules and criterias, as a neutral sequence of (possibly timed) textual descriptions.
    */
    log: prefixer('log'),

    /**
    * **[Integrated loudness](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessIntegratedLoudness)** (property)
    * 
    * The value for integrated loudness measured at AudioProgramme or AudioContent level.
    */
    loudnessIntegratedLoudness: prefixer('loudnessIntegratedLoudness'),

    /**
    * **[Loudness parameters](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessParameters)** (property)
    * 
    * To provide loudness parameters.
    */
    loudnessParameters: prefixer('loudnessParameters'),

    /**
    * **[Max momentary loudness](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessMaxMomentary)** (property)
    * 
    * The value for maximum momentary loudness measured at AudioProgramme or AudioContent level.
    */
    loudnessMaxMomentary: prefixer('loudnessMaxMomentary'),

    /**
    * **[Max short term loudness](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessMaxShortTerm)** (property)
    * 
    * The value for maximum max short term loudness measured at AudioProgramme or AudioContent level.
    */
    loudnessMaxShortTerm: prefixer('loudnessMaxShortTerm'),

    /**
    * **[Max true peak loudness](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessMaxTruepeak)** (property)
    * 
    * The value for maximum true peak loudness measured at AudioProgramme or AudioContent level.
    */
    loudnessMaxTruepeak: prefixer('loudnessMaxTruepeak'),

    /**
    * **[Loudness method](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessMethod)** (property)
    * 
    * The method for loudness measurement at AudioProgramme or AudioContent level.
    */
    loudnessMethod: prefixer('loudnessMethod'),

    /**
    * **[Loudness range](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#loudnessRange)** (property)
    * 
    * The loudness range measured at AudioProgramme or AudioContent level.
    */
    loudnessRange: prefixer('loudnessRange'),

    /**
    * **[Main title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#mainTitle)** (property)
    * 
    * Specifies the main title or name given to the
    * EditorialObject.
    */
    mainTitle: prefixer('mainTitle'),

    /**
    * **[Title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#title)** (property)
    * 
    * All value of the EBU title status
    * classification scheme
    * (http://www.ebu.ch/metadata/cs/web/ebu_TitleStatusCodeCS_p.xml.htm) are candidates
    * subproperties of the title property as implemented for an example with
    * alternativeTitle.
    */
    title: prefixer('title'),

    /**
    * **[Marital Status](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#maritalStatus)** (property)
    * 
    * To identify the marital status of a Person.
    */
    maritalStatus: prefixer('maritalStatus'),

    /**
    * **[MediaResource description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#mediaResourceDescription)** (property)
    * 
    * A description of a MediaResource.
    */
    mediaResourceDescription: prefixer('mediaResourceDescription'),

    /**
    * **[Media resource Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#mediaResourceId)** (property)
    * 
    * Range: Identifier or string
    */
    mediaResourceId: prefixer('mediaResourceId'),

    /**
    * **[Media resource type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#mediaResourceType)** (property)
    * 
    * To identify a type of MediaResource, e.g. a template'.
    */
    mediaResourceType: prefixer('mediaResourceType'),

    /**
    * **[Midroll ad allowed](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#midRollAdAllowed)** (property)
    * 
    * A flag to indicate whether it is allowed to insert ad breaks in mid-roll.
    */
    midRollAdAllowed: prefixer('midRollAdAllowed'),

    /**
    * **[Middle name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#middleName)** (property)
    * 
    * To provide one or more middle names for a Person.
    */
    middleName: prefixer('middleName'),

    /**
    * **[Nickname](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#nickName)** (property)
    * 
    * The nickname of a Person.
    */
    nickName: prefixer('nickName'),

    /**
    * **[Noise filter](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#noiseFilter)** (property)
    * 
    * A flag to signal that a noise filter has been
    * used.
    */
    noiseFilter: prefixer('noiseFilter'),

    /**
    * **[Not rated](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#notRated)** (property)
    * 
    * A flag to indicate that the EditorialObejct has not been rated.
    */
    notRated: prefixer('notRated'),

    /**
    * **[Number of audio tracks](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#numberOfAudioTracks)** (property)
    * 
    * To provide the number of audio tracks.
    */
    numberOfAudioTracks: prefixer('numberOfAudioTracks'),

    /**
    * **[Number of tracks](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#numberOfTracks)** (property)
    * 
    * The number of Tracks composing the MediaResource.
    */
    numberOfTracks: prefixer('numberOfTracks'),

    /**
    * **[Number of video tracks](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#numberOfVideoTracks)** (property)
    * 
    * To provide the number of video tracks.
    */
    numberOfVideoTracks: prefixer('numberOfVideoTracks'),

    /**
    * **[Occupation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#occupation)** (property)
    * 
    * The job / occupation name of a Person.
    */
    occupation: prefixer('occupation'),

    /**
    * **[PublicationEvent](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#offers)** (property)
    * 
    * To identify the PublicationEvents provided through a Service.
    */
    offers: prefixer('offers'),

    /**
    * **[Office email](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#officeEmailAddress)** (property)
    * 
    * To provide the professional/office email
    * address of an Agent (Contact/Person or Organisation).
    */
    officeEmailAddress: prefixer('officeEmailAddress'),

    /**
    * **[Telephone (private)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#officeMobileTelephoneNumber)** (property)
    * 
    * To provide the office mobile telephone number of an
    * Agent (Contact/Person).
    */
    officeMobileTelephoneNumber: prefixer('officeMobileTelephoneNumber'),

    /**
    * **[Telephone (private)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#officeTelephoneNumber)** (property)
    * 
    * To provide the office telephone number of an
    * Agent (Contact/Person).
    */
    officeTelephoneNumber: prefixer('officeTelephoneNumber'),

    /**
    * **[Ordered flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#orderedFlag)** (property)
    * 
    * A flag to indicate that a EditorialObject is member of an ordered group or is an ordered group (e.g. Series)
    */
    orderedFlag: prefixer('orderedFlag'),

    /**
    * **[Organisation description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#organisationDescription)** (property)
    * 
    * To provide a description of an Organisation.
    */
    organisationDescription: prefixer('organisationDescription'),

    /**
    * **[Organisation identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#organisationId)** (property)
    * 
    * Range: string or Identifier
    */
    organisationId: prefixer('organisationId'),

    /**
    * **[Organisation name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#organisationName)** (property)
    * 
    * To provide the full name of an Organisation.
    */
    organisationName: prefixer('organisationName'),

    /**
    * **[Asset type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#organisationType)** (property)
    * 
    * Range: string or anyURI or Concept.
    */
    organisationType: prefixer('organisationType'),

    /**
    * **[Orientation](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#orientation)** (property)
    * 
    * The orientation of a Document or an Image i.e. landscape or
    * portrait.
    */
    orientation: prefixer('orientation'),

    /**
    * **[Original title.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#originalTitle)** (property)
    * 
    * The original title used to identify the work.
    */
    originalTitle: prefixer('originalTitle'),

    /**
    * **[Package size (in bytes)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#packageByteSize)** (property)
    * 
    * The size of a media package in
    * Bytes.
    */
    packageByteSize: prefixer('packageByteSize'),

    /**
    * **[Package name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#packageName)** (property)
    * 
    * The name of a media package in
    * Bytes.
    */
    packageName: prefixer('packageName'),

    /**
    * **[Part definition](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partDefinition)** (property)
    * 
    * A definition associated with the Part.
    */
    partDefinition: prefixer('partDefinition'),

    /**
    * **[Part definition](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partDescription)** (property)
    * 
    * A description associated with the Part.
    */
    partDescription: prefixer('partDescription'),

    /**
    * **[Part identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partId)** (property)
    * 
    * Range: a string or Identifier
    */
    partId: prefixer('partId'),

    /**
    * **[Part name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partName)** (property)
    * 
    * A name associated with the Part.
    */
    partName: prefixer('partName'),

    /**
    * **[Part number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partNumber)** (property)
    * 
    * The number associated to a Part as one among
    * many.
    */
    partNumber: prefixer('partNumber'),

    /**
    * **[Part total number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#partTotalNumber)** (property)
    * 
    * The total number of Parts associated with an EditorialObject.
    */
    partTotalNumber: prefixer('partTotalNumber'),

    /**
    * **[Description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personDescription)** (property)
    * 
    * To provide a description of a Person.
    */
    personDescription: prefixer('personDescription'),

    /**
    * **[Person height](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personHeight)** (property)
    * 
    * To indicate the height of a person.
    */
    personHeight: prefixer('personHeight'),

    /**
    * **[Person identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personId)** (property)
    * 
    * Range: an Identifier or anyURI or string.
    */
    personId: prefixer('personId'),

    /**
    * **[Person name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personName)** (property)
    * 
    * To provide e.g. compound names.
    */
    personName: prefixer('personName'),

    /**
    * **[Person type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personType)** (property)
    * 
    * A type attributed to a Person.
    */
    personType: prefixer('personType'),

    /**
    * **[Person weight](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#personWeight)** (property)
    * 
    * To indicate the weight of a person.
    */
    personWeight: prefixer('personWeight'),

    /**
    * **[Playlist](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#playlist)** (property)
    * 
    * To provide a playlist.
    */
    playlist: prefixer('playlist'),

    /**
    * **[Essence](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#playsOut)** (property)
    * 
    * To identify the Essence used in a PublicationEvent
    */
    playsOut: prefixer('playsOut'),

    /**
    * **[Position](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#position)** (property)
    * 
    * To indicate the position of an EditorialObject in an ordered
    * group.
    */
    position: prefixer('position'),

    /**
    * **[Private email](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#privateEmailAddress)** (property)
    * 
    * To provide the private email address of an
    * Agent (Contact/Person)
    */
    privateEmailAddress: prefixer('privateEmailAddress'),

    /**
    * **[Homepage (private)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#privateHomepage)** (property)
    * 
    * To provide an private web homepage of an Agent
    * (Contact/Person).
    */
    privateHomepage: prefixer('privateHomepage'),

    /**
    * **[Telephone (private)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#privateMobileTelephoneNumber)** (property)
    * 
    * To provide the private mobile telephone number of an
    * Agent (Contact/Person).
    */
    privateMobileTelephoneNumber: prefixer('privateMobileTelephoneNumber'),

    /**
    * **[Telephone (private)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#privateTelephoneNumber)** (property)
    * 
    * To provide the private telephone number of an
    * Agent (Contact/Person).
    */
    privateTelephoneNumber: prefixer('privateTelephoneNumber'),

    /**
    * **[Production synopsis](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#productionSynopsis)** (property)
    * 
    * A synopsis or summary provided by the producer at the time of production.
    */
    productionSynopsis: prefixer('productionSynopsis'),

    /**
    * **[Promotional information](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#promotionalInformation)** (property)
    * 
    * To provide textual promotional information.
    */
    promotionalInformation: prefixer('promotionalInformation'),

    /**
    * **[Provenance creation date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceDateCreated)** (property)
    * 
    * The date of creation of a Provenance instance.
    */
    provenanceDateCreated: prefixer('provenanceDateCreated'),

    /**
    * **[Provenance modification date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceDateModified)** (property)
    * 
    * The date of modification of a Provenance instance.
    */
    provenanceDateModified: prefixer('provenanceDateModified'),

    /**
    * **[Provenance description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceDescription)** (property)
    * 
    * To describe a Provenance.
    */
    provenanceDescription: prefixer('provenanceDescription'),

    /**
    * **[Provenance Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceId)** (property)
    * 
    * To identify a Provenance.
    */
    provenanceId: prefixer('provenanceId'),

    /**
    * **[Provenance name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceName)** (property)
    * 
    * To name a Provenance.
    */
    provenanceName: prefixer('provenanceName'),

    /**
    * **[Provenance type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#provenanceType)** (property)
    * 
    * Range: string, anyURI or Concept.
    */
    provenanceType: prefixer('provenanceType'),

    /**
    * **[Publication status](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#pubStatus)** (property)
    * 
    * To indicate a publication status.
    */
    pubStatus: prefixer('pubStatus'),

    /**
    * **[PublicationChannel description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationChannelDescription)** (property)
    * 
    * To provide a description of a PublicationChannel e.g. a TV channel or website.
    */
    publicationChannelDescription: prefixer('publicationChannelDescription'),

    /**
    * **[Publication channel identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationChannelId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    publicationChannelId: prefixer('publicationChannelId'),

    /**
    * **[PublicationChannel name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationChannelName)** (property)
    * 
    * To provide a name to a PublicationChannel e.g. a TV channel or website.
    */
    publicationChannelName: prefixer('publicationChannelName'),

    /**
    * **[Publication Channel type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationChannelType)** (property)
    * 
    * Range: string or PublicationChannel_Type.
    */
    publicationChannelType: prefixer('publicationChannelType'),

    /**
    * **[PublicationEvent duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationDuration)** (property)
    * 
    * The actual duration of a PublicationEvent.
    */
    publicationDuration: prefixer('publicationDuration'),

    /**
    * **[PublicationEvent end date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEndDateTime)** (property)
    * 
    * The actual end date and time of a PublicationEvent.
    */
    publicationEndDateTime: prefixer('publicationEndDateTime'),

    /**
    * **[PublicationEvent abstract](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventAbstract)** (property)
    * 
    * To provide an abstract for a PublicationEvent.
    */
    publicationEventAbstract: prefixer('publicationEventAbstract'),

    /**
    * **[PublicationEvent  description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventDescription)** (property)
    * 
    * To provide the description of a PublicationEvent.
    */
    publicationEventDescription: prefixer('publicationEventDescription'),

    /**
    * **[Publication event identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    publicationEventId: prefixer('publicationEventId'),

    /**
    * **[PublicationEvent name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventName)** (property)
    * 
    * To provide a name to a PublicationEvent.
    */
    publicationEventName: prefixer('publicationEventName'),

    /**
    * **[PublicationEvent title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventTitle)** (property)
    * 
    * To provide a title for a PublicationEvent.
    */
    publicationEventTitle: prefixer('publicationEventTitle'),

    /**
    * **[Publication event type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationEventType)** (property)
    * 
    * A type of PublicationEvent.
    */
    publicationEventType: prefixer('publicationEventType'),

    /**
    * **[PublicationPlan description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanDescription)** (property)
    * 
    * A description of a PublicationPlan.
    */
    publicationPlanDescription: prefixer('publicationPlanDescription'),

    /**
    * **[PublicationPlan end date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanEndDate)** (property)
    * 
    * The end date of a PublicationPlan
    */
    publicationPlanEndDate: prefixer('publicationPlanEndDate'),

    /**
    * **[Publication plan identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    publicationPlanId: prefixer('publicationPlanId'),

    /**
    * **[Publication plan name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanName)** (property)
    * 
    * A name attributed to a PublicationPlan.
    */
    publicationPlanName: prefixer('publicationPlanName'),

    /**
    * **[PublicationPlan start date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanStartDate)** (property)
    * 
    * The start date of a PublicationPlan
    */
    publicationPlanStartDate: prefixer('publicationPlanStartDate'),

    /**
    * **[PublicationPlan status](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationPlanStatus)** (property)
    * 
    * To provide a status regarding the PublicationPlan.
    */
    publicationPlanStatus: prefixer('publicationPlanStatus'),

    /**
    * **[Schedule date](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationScheduleDate)** (property)
    * 
    * To express specifically the schedule date to which a PublicationEvent is related in particular if the broacdast time is after midnight. For example, the schedule date would be May 29th and the programme is published at 1 am on May 30th, while still associated in the schedule with the night of May 29th.
    */
    publicationScheduleDate: prefixer('publicationScheduleDate'),

    /**
    * **[Publication start date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publicationStartDateTime)** (property)
    * 
    * The actual start date and time of a PublicationEvent.
    */
    publicationStartDateTime: prefixer('publicationStartDateTime'),

    /**
    * **[Publication end date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publishedEndDateTime)** (property)
    * 
    * The end date and time of a PublicationEvent as
    * scheduled.
    */
    publishedEndDateTime: prefixer('publishedEndDateTime'),

    /**
    * **[Publication start date & time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publishedStartDateTime)** (property)
    * 
    * The start date and time of a PublicationEvent
    * as scheduled.
    */
    publishedStartDateTime: prefixer('publishedStartDateTime'),

    /**
    * **[Published title.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publishedTitle)** (property)
    * 
    * The title used to identify the work at publication time.
    */
    publishedTitle: prefixer('publishedTitle'),

    /**
    * **[Editorial object](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#publishes)** (property)
    * 
    * The editorial object associated to a PublicationEvent.
    */
    publishes: prefixer('publishes'),

    /**
    * **[Rating name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingDescription)** (property)
    * 
    * To associate a description with a Rating.
    */
    ratingDescription: prefixer('ratingDescription'),

    /**
    * **[Rating Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingId)** (property)
    * 
    * Range: string or anyURI or Identifier.
    */
    ratingId: prefixer('ratingId'),

    /**
    * **[Rating name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingName)** (property)
    * 
    * To associate a name with a Rating.
    */
    ratingName: prefixer('ratingName'),

    /**
    * **[Rating scale (top value)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingScaleMax)** (property)
    * 
    * The maximum value of the scale used for the Rating
    * of a MediaResource.
    */
    ratingScaleMax: prefixer('ratingScaleMax'),

    /**
    * **[Rating scale (min. value)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingScaleMin)** (property)
    * 
    * The minimum value of the scale used for rating
    * a MediaResource.
    */
    ratingScaleMin: prefixer('ratingScaleMin'),

    /**
    * **[Rating environment](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingSystemEnvironment)** (property)
    * 
    * To identify the environment in which rating applies.
    */
    ratingSystemEnvironment: prefixer('ratingSystemEnvironment'),

    /**
    * **[Rating system](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingSystemName)** (property)
    * 
    * To identify a Rating system by its name.
    */
    ratingSystemName: prefixer('ratingSystemName'),

    /**
    * **[Rating type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingType)** (property)
    * 
    * Range: string or anyURI or Concept.
    */
    ratingType: prefixer('ratingType'),

    /**
    * **[Rating](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#ratingValue)** (property)
    * 
    * To express a free text Rating value defined in
    * a rating classification scheme.
    */
    ratingValue: prefixer('ratingValue'),

    /**
    * **[Ready for publication](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#readyForPublication)** (property)
    * 
    * A flag to indicate that the Essence is ready for publication.
    */
    readyForPublication: prefixer('readyForPublication'),

    /**
    * **[Reason](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#reason)** (property)
    * 
    * A reason given for a rating.
    */
    reason: prefixer('reason'),

    /**
    * **[References](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#references)** (property)
    * 
    * To express a reference between Assets, BusinessObjects or Resources.
    */
    references: prefixer('references'),

    /**
    * **[Region delimiter (x-axis)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#regionDelimX)** (property)
    * 
    * To define the top left corner of a zone on
    * the x-axis. If present with regionDelimy, the zone definition is complemented by the
    * associated values of the height and width.
    */
    regionDelimX: prefixer('regionDelimX'),

    /**
    * **[Region delimiter (y-axis)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#regionDelimY)** (property)
    * 
    * To define the bottom right corner of a zone on
    * the y-axis. If present with regionDelimX, the zone definition is complemented by the
    * associated values of the height and width.
    */
    regionDelimY: prefixer('regionDelimY'),

    /**
    * **[Relation Type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationIdentifier)** (property)
    * 
    * Range: string or Identifier.
    */
    relationIdentifier: prefixer('relationIdentifier'),

    /**
    * **[Link](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationLink)** (property)
    * 
    * To define a link in a Relation.
    */
    relationLink: prefixer('relationLink'),

    /**
    * **[Relation Note](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationNote)** (property)
    * 
    * A note to provide additional information about a Relation.
    */
    relationNote: prefixer('relationNote'),

    /**
    * **[Relation Ordered group flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationOrderedGroupFlag)** (property)
    * 
    * A boolean to define if a Relation is defined within and ordered group.
    */
    relationOrderedGroupFlag: prefixer('relationOrderedGroupFlag'),

    /**
    * **[Relation Running Order Number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationRunningOrderNumber)** (property)
    * 
    * The order number in a list.
    */
    relationRunningOrderNumber: prefixer('relationRunningOrderNumber'),

    /**
    * **[Total number of group members.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationTotalNumberOfGroupMembers)** (property)
    * 
    * Total number of group members in a Relation.
    */
    relationTotalNumberOfGroupMembers: prefixer('relationTotalNumberOfGroupMembers'),

    /**
    * **[Relation Type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#relationType)** (property)
    * 
    * Range: string or Relation_Type.
    */
    relationType: prefixer('relationType'),

    /**
    * **[Replaces](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#replaces)** (property)
    * 
    * To identify substitution.
    */
    replaces: prefixer('replaces'),

    /**
    * **[Related asset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#represents)** (property)
    * 
    * To establish a relation between a BusinessObject and an Asset.
    */
    represents: prefixer('represents'),

    /**
    * **[Requires](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#requires)** (property)
    * 
    * To express dependency.
    */
    requires: prefixer('requires'),

    /**
    * **[Resolution](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resolution)** (property)
    * 
    * To define the resolution of an Asset e.g. video, image...
    */
    resolution: prefixer('resolution'),

    /**
    * **[Resource description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceDescription)** (property)
    * 
    * A desciprtion of a Resource.
    */
    resourceDescription: prefixer('resourceDescription'),

    /**
    * **[File size](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceFileSize)** (property)
    * 
    * Provides the size of a Resource in bytes.
    */
    resourceFileSize: prefixer('resourceFileSize'),

    /**
    * **[File name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceFilename)** (property)
    * 
    * The name of the file containing the
    * Resource.
    */
    resourceFilename: prefixer('resourceFilename'),

    /**
    * **[Resource id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceId)** (property)
    * 
    * An identifier associated to a Resource.
    */
    resourceId: prefixer('resourceId'),

    /**
    * **[Resource id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceIdType)** (property)
    * 
    * Range: Resource_type or anyURI or string
    */
    resourceIdType: prefixer('resourceIdType'),

    /**
    * **[Locator target information](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceLocatorTargetInformation)** (property)
    * 
    * Information on the Resource locator target.
    */
    resourceLocatorTargetInformation: prefixer('resourceLocatorTargetInformation'),

    /**
    * **[Resource name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceName)** (property)
    * 
    * The name given to a Resource.
    */
    resourceName: prefixer('resourceName'),

    /**
    * **[Resource offset](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceOffset)** (property)
    * 
    * The start offset within a Resource.
    */
    resourceOffset: prefixer('resourceOffset'),

    /**
    * **[Resource offset normal playtime](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceOffsetNormalPlaytime)** (property)
    * 
    * The resource offset in normal play time
    */
    resourceOffsetNormalPlaytime: prefixer('resourceOffsetNormalPlaytime'),

    /**
    * **[Resource offset number edit units](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceOffsetNumberEditUnit)** (property)
    * 
    * The resource offset in edit units
    */
    resourceOffsetNumberEditUnit: prefixer('resourceOffsetNumberEditUnit'),

    /**
    * **[Resource offset timecode.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceOffsetTimecode)** (property)
    * 
    * The resource offset in timecode
    */
    resourceOffsetTimecode: prefixer('resourceOffsetTimecode'),

    /**
    * **[Resource offset timecode (dropframe).](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#resourceOffsetTimecodedropframe)** (property)
    * 
    * The resource offset in timecode dropframe
    */
    resourceOffsetTimecodedropframe: prefixer('resourceOffsetTimecodedropframe'),

    /**
    * **[Rights clearance flag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsClearanceFlag)** (property)
    * 
    * A flag to indicate that righst have been cleared
    */
    rightsClearanceFlag: prefixer('rightsClearanceFlag'),

    /**
    * **[Rights duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsDuration)** (property)
    * 
    * To define the duration of the period when Rights are applicable.
    */
    rightsDuration: prefixer('rightsDuration'),

    /**
    * **[Rights end date time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsEndDateTime)** (property)
    * 
    * To define the end time until when Rights are applicable.
    */
    rightsEndDateTime: prefixer('rightsEndDateTime'),

    /**
    * **[Rights](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsExpression)** (property)
    * 
    * To express an expression of Rights.
    */
    rightsExpression: prefixer('rightsExpression'),

    /**
    * **[Rights identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    rightsId: prefixer('rightsId'),

    /**
    * **[Rights web resource](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsLink)** (property)
    * 
    * A link to e.g. a webpage where an expression of
    * the rights can be found and consulted.
    */
    rightsLink: prefixer('rightsLink'),

    /**
    * **[Rights start date time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsStartDateTime)** (property)
    * 
    * To define the start time since when Rights are applicable.
    */
    rightsStartDateTime: prefixer('rightsStartDateTime'),

    /**
    * **[Excluded territories](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsTerritoryExcludes)** (property)
    * 
    * Range: string or CountryCode.
    */
    rightsTerritoryExcludes: prefixer('rightsTerritoryExcludes'),

    /**
    * **[Included territories](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsTerritoryIncludes)** (property)
    * 
    * Range: string or CountryCode.
    */
    rightsTerritoryIncludes: prefixer('rightsTerritoryIncludes'),

    /**
    * **[Rights type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#rightsType)** (property)
    * 
    * Range: a string or a Rights_Type or a ContractType.
    */
    rightsType: prefixer('rightsType'),

    /**
    * **[role Id](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#roleId)** (property)
    * 
    * Range: string or anyURI.
    */
    roleId: prefixer('roleId'),

    /**
    * **[Role type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#roleType)** (property)
    * 
    * To define a type of Role (not the Role itself).
    */
    roleType: prefixer('roleType'),

    /**
    * **[Salutation title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#salutationTitle)** (property)
    * 
    * To provide a salutation title e.g M. Ms, Dr, Pr.
    */
    salutationTitle: prefixer('salutationTitle'),

    /**
    * **[Sample Rate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#sampleRate)** (property)
    * 
    * The frequency at which audio is sampled per second. Also called sampling rate.
    */
    sampleRate: prefixer('sampleRate'),

    /**
    * **[Sample size](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#sampleSize)** (property)
    * 
    * The size of an audio sample in
    * bits. Also called bit depth.
    */
    sampleSize: prefixer('sampleSize'),

    /**
    * **[Sample type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#sampleType)** (property)
    * 
    * The type of audio sample.
    */
    sampleType: prefixer('sampleType'),

    /**
    * **[Scanning format](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#scanningFormat)** (property)
    * 
    * To define the scanning format for a
    * MediaResource. For video, the two main values are "interlaced" or
    * "progressive".
    */
    scanningFormat: prefixer('scanningFormat'),

    /**
    * **[Script](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#script)** (property)
    * 
    * To provide a script.
    */
    script: prefixer('script'),

    /**
    * **[Season number](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#seasonNumber)** (property)
    * 
    * To provide a Season number.
    */
    seasonNumber: prefixer('seasonNumber'),

    /**
    * **[Service description](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#serviceDescription)** (property)
    * 
    * A description of the Service.
    */
    serviceDescription: prefixer('serviceDescription'),

    /**
    * **[Service identiifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#serviceId)** (property)
    * 
    * Range: string or Identifier.
    */
    serviceId: prefixer('serviceId'),

    /**
    * **[Service name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#serviceName)** (property)
    * 
    * The name of the Service.
    */
    serviceName: prefixer('serviceName'),

    /**
    * **[Service type](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#serviceType)** (property)
    * 
    * Range: string or Service_type
    */
    serviceType: prefixer('serviceType'),

    /**
    * **[Shot log](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#shotLog)** (property)
    * 
    * Provides a shot-by-shot description of a MediaResource.
    */
    shotLog: prefixer('shotLog'),

    /**
    * **[Start time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#start)** (property)
    * 
    * Start timestamp e.g. the start time for a MediaResource.
    */
    start: prefixer('start'),

    /**
    * **[Start time (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startEditUnits)** (property)
    * 
    * A start time expressed as a number of edit
    * units.
    */
    startEditUnits: prefixer('startEditUnits'),

    /**
    * **[Start time (normal play time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startNormalPlayTime)** (property)
    * 
    * A start time expressed as a normal play time.
    */
    startNormalPlayTime: prefixer('startNormalPlayTime'),

    /**
    * **[Startoffset  time (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startOffsetEditUnit)** (property)
    * 
    * A start offset time expressed as a number of edit
    * units.
    */
    startOffsetEditUnit: prefixer('startOffsetEditUnit'),

    /**
    * **[Startoffset  time (edit units)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startOffsetNormalPlayTime)** (property)
    * 
    * A start offset time expressed as normal play time.
    */
    startOffsetNormalPlayTime: prefixer('startOffsetNormalPlayTime'),

    /**
    * **[Start offset time (timecode)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startOffsetTimecode)** (property)
    * 
    * A start offset time expressed as
    * timecode.
    */
    startOffsetTimecode: prefixer('startOffsetTimecode'),

    /**
    * **[Start offset time (timecode, drop frames)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startOffsetTimecodeDropFrame)** (property)
    * 
    * A start offset time expressed as
    * timecode with drop frames.
    */
    startOffsetTimecodeDropFrame: prefixer('startOffsetTimecodeDropFrame'),

    /**
    * **[Start time (timecode)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startTimecode)** (property)
    * 
    * A start time expressed as
    * timecode.
    */
    startTimecode: prefixer('startTimecode'),

    /**
    * **[Start time (timecode, drop frames)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#startTimecodeDropFrame)** (property)
    * 
    * A start time expressed as
    * timecode with drop frames.
    */
    startTimecodeDropFrame: prefixer('startTimecodeDropFrame'),

    /**
    * **[Subtitle](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#subtitle)** (property)
    * 
    * A complementary subtitle.
    */
    subtitle: prefixer('subtitle'),

    /**
    * **[Suffix](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#suffix)** (property)
    * 
    * To provide a suffix associated with a Person name e.g. Jr.
    */
    suffix: prefixer('suffix'),

    /**
    * **[Summary](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#summary)** (property)
    * 
    * To provide a summary.
    */
    summary: prefixer('summary'),

    /**
    * **[Synopsis](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#synopsis)** (property)
    * 
    * To provide a summary.
    */
    synopsis: prefixer('synopsis'),

    /**
    * **[Table of content](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#tableOfContent)** (property)
    * 
    * to provide a table of content.
    */
    tableOfContent: prefixer('tableOfContent'),

    /**
    * **[Tag](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#tag)** (property)
    * 
    * To provide a list of tags.
    */
    tag: prefixer('tag'),

    /**
    * **[Target audience system](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#targetAudienceSystem)** (property)
    * 
    * To define the system used to provide a TargetAudience.
    */
    targetAudienceSystem: prefixer('targetAudienceSystem'),

    /**
    * **[Text line box height.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineBoxHeight)** (property)
    * 
    * The height of the text box containing the TextLine.
    */
    textLineBoxHeight: prefixer('textLineBoxHeight'),

    /**
    * **[Text line box top left corner Y position.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineBoxTopLeftCornerLineNumber)** (property)
    * 
    * The coordinates on a vertical axis of the position of the top left corner of the text box containing the TextLine.
    */
    textLineBoxTopLeftCornerLineNumber: prefixer('textLineBoxTopLeftCornerLineNumber'),

    /**
    * **[Text line box top left Coner X position.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineBoxTopLeftCornerPixelNumber)** (property)
    * 
    * The coordinates on an horizontal axis of the position of the top left corner of the text box containing the TextLine.
    */
    textLineBoxTopLeftCornerPixelNumber: prefixer('textLineBoxTopLeftCornerPixelNumber'),

    /**
    * **[Text line box width.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineBoxWidth)** (property)
    * 
    * The width of the text box containing the TextLine.
    */
    textLineBoxWidth: prefixer('textLineBoxWidth'),

    /**
    * **[Text line](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineContent)** (property)
    * 
    * To provide the content of a text line.
    */
    textLineContent: prefixer('textLineContent'),

    /**
    * **[Text line end in edit units](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineEndEditUnits)** (property)
    * 
    * The end time of a TextLine expressed as a number of edit units.
    */
    textLineEndEditUnits: prefixer('textLineEndEditUnits'),

    /**
    * **[Text line end time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineEndTime)** (property)
    * 
    * The end time point of a TextLine in a Scene.
    */
    textLineEndTime: prefixer('textLineEndTime'),

    /**
    * **[Text line end in normal play time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineEndNormalPlayTime)** (property)
    * 
    * The end time of a TextLine expressed as a normal play time.
    */
    textLineEndNormalPlayTime: prefixer('textLineEndNormalPlayTime'),

    /**
    * **[Text line end timecode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineEndTimecode)** (property)
    * 
    * The end time of a TextLine expressed as timecode.
    */
    textLineEndTimecode: prefixer('textLineEndTimecode'),

    /**
    * **[Text line end timecode drop frames](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineEndTimecodeDropFrame)** (property)
    * 
    * The end time of a TextLine expressed as timecode with drop frames.
    */
    textLineEndTimecodeDropFrame: prefixer('textLineEndTimecodeDropFrame'),

    /**
    * **[Text line order](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineOrder)** (property)
    * 
    * The order in which a text line can be found e.g. in a scene.
    */
    textLineOrder: prefixer('textLineOrder'),

    /**
    * **[Text line start in edit units](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineStartEditUnits)** (property)
    * 
    * The start time of a TextLine expressed as a number of edit units.
    */
    textLineStartEditUnits: prefixer('textLineStartEditUnits'),

    /**
    * **[Text line start time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineStartTime)** (property)
    * 
    * The start time point of a TextLine in a Scene.
    */
    textLineStartTime: prefixer('textLineStartTime'),

    /**
    * **[Text line start in normal play time](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineStartNormalPlayTime)** (property)
    * 
    * The start time of a TextLine expressed as a normal play time.
    */
    textLineStartNormalPlayTime: prefixer('textLineStartNormalPlayTime'),

    /**
    * **[Text line start timecode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineStartTimecode)** (property)
    * 
    * The start time of a TextLine expressed as timecode.
    */
    textLineStartTimecode: prefixer('textLineStartTimecode'),

    /**
    * **[Text line start timecode drop frames](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#textLineStartTimecodeDropFrame)** (property)
    * 
    * The start time of a TextLine expressed as timecode with drop frames.
    */
    textLineStartTimecodeDropFrame: prefixer('textLineStartTimecodeDropFrame'),

    /**
    * **[Time created.](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timeCreated)** (property)
    * 
    * the tie of creation of an Asset.
    */
    timeCreated: prefixer('timeCreated'),

    /**
    * **[TimelineTrack duration](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timelineTrackDuration)** (property)
    * 
    * To express the duration of a TimelineTrack.
    */
    timelineTrackDuration: prefixer('timelineTrackDuration'),

    /**
    * **[Duration (edit unit)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timelineTrackDurationEditUnits)** (property)
    * 
    * To provide a duration as a number of edit units.
    */
    timelineTrackDurationEditUnits: prefixer('timelineTrackDurationEditUnits'),

    /**
    * **[Duration (time)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timelineTrackDurationNormalPlayTime)** (property)
    * 
    * To provide a duration as normal
    * time.
    */
    timelineTrackDurationNormalPlayTime: prefixer('timelineTrackDurationNormalPlayTime'),

    /**
    * **[Duration (timecode)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timelineTrackDurationTimecode)** (property)
    * 
    * The duration expressed as a
    * timecode.
    */
    timelineTrackDurationTimecode: prefixer('timelineTrackDurationTimecode'),

    /**
    * **[Duration (timecode, drop frame)](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#timelineTrackDurationTimecodeDropFrame)** (property)
    * 
    * The duration expressed as a
    * timecode with drop frames.
    */
    timelineTrackDurationTimecodeDropFrame: prefixer('timelineTrackDurationTimecodeDropFrame'),

    /**
    * **[Total number of episodes](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#totalNumberOfEpisodes)** (property)
    * 
    * To provide the total number of episodes in a Series or a Season.
    */
    totalNumberOfEpisodes: prefixer('totalNumberOfEpisodes'),

    /**
    * **[Total number of Group members](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#totalNumberOfGroupMembers)** (property)
    * 
    * To provide the total number of members in a Group.
    */
    totalNumberOfGroupMembers: prefixer('totalNumberOfGroupMembers'),

    /**
    * **[Definition](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#trackDefinition)** (property)
    * 
    * To provide a definition associated to a
    * Track.
    */
    trackDefinition: prefixer('trackDefinition'),

    /**
    * **[Track identifier](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#trackId)** (property)
    * 
    * Range: Identifier, anyURI, string
    */
    trackId: prefixer('trackId'),

    /**
    * **[Track name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#trackName)** (property)
    * 
    * To provide  name of a
    * Track.
    */
    trackName: prefixer('trackName'),

    /**
    * **[Track name](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#trackType)** (property)
    * 
    * Range: string or Track_Type
    */
    trackType: prefixer('trackType'),

    /**
    * **[Translation title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#translationTitle)** (property)
    * 
    * A translated version of the title.
    */
    translationTitle: prefixer('translationTitle'),

    /**
    * **[Username](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#username)** (property)
    * 
    * The username by which a Person is
    * known e.g. when attributing a rating value.
    */
    username: prefixer('username'),

    /**
    * **[Version](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#version)** (property)
    * 
    * To provide information on the current version of an EditorialObject.
    */
    version: prefixer('version'),

    /**
    * **[Version title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#versionTitle)** (property)
    * 
    * An alternative title specific to a verison of content.
    */
    versionTitle: prefixer('versionTitle'),

    /**
    * **[Video bitrate](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#videoBitRate)** (property)
    * 
    * The video bitrate. To provide the bitrate at which the MediaResource can be played
    * in bits/second. Current bitrate if constant, and average bitrate if
    * variable.
    */
    videoBitRate: prefixer('videoBitRate'),

    /**
    * **[Video bitrate max](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#videoBitRateMax)** (property)
    * 
    * The maximum video bitrate.
    */
    videoBitRateMax: prefixer('videoBitRateMax'),

    /**
    * **[Video bitrate mode](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#videoBitRateMode)** (property)
    * 
    * The video bitrate mode.
    */
    videoBitRateMode: prefixer('videoBitRateMode'),

    /**
    * **[Video encoding level](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#videoEncodingLevel)** (property)
    * 
    * The encoding level as defined in specifications.
    */
    videoEncodingLevel: prefixer('videoEncodingLevel'),

    /**
    * **[Video encoding profile](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#videoEncodingProfile)** (property)
    * 
    * The encoding level as defined in specifications.
    */
    videoEncodingProfile: prefixer('videoEncodingProfile'),

    /**
    * **[Word count](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#wordCount)** (property)
    * 
    * The number of words contained in a
    * document.
    */
    wordCount: prefixer('wordCount'),

    /**
    * **[Working title](http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#workingTitle)** (property)
    * 
    * A title used while content is not complete.
    */
    workingTitle: prefixer('workingTitle'),

    /**
    * **[Group member](http://xmlns.com/foaf/0.1/member)** (property)
    * 
    * To identify an Agent member of a Group.
    */
    'foaf:member': prefixer('foaf:member'),

    /**
    * **[Name](http://xmlns.com/foaf/0.1/name)** (property)
    * 
    * To name an Agent.
    */
    'foaf:name': prefixer('foaf:name'),

  
  };

export default ebucore

