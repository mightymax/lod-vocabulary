// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2000/10/swap/math#');

/**
 * [math](http://www.w3.org/2000/10/swap/math#})
 */
const math = {
  /**
    * **[Function](http://www.w3.org/2000/10/swap/math#Function)** (class)
    * 
    * A math:Function is unique in terms of math:EqualTo.
    */
    Function: prefixer('Function'),

    /**
    * **[List](http://www.w3.org/2000/10/swap/math#List)** (class)
    * 
    * The class of things that are DAML lists were all of the
    * members are math:Value items.
    */
    List: prefixer('List'),

    /**
    * **[TwoMemberedList](http://www.w3.org/2000/10/swap/math#TwoMemberedList)** (class)
    * 
    * This is the class of things that are math lists with only two members.
    */
    TwoMemberedList: prefixer('TwoMemberedList'),

    /**
    * **[Value](http://www.w3.org/2000/10/swap/math#Value)** (class)
    * 
    * The class of things that are numeric float values as in Python.
    */
    Value: prefixer('Value'),

    /**
    * **[memberCount](http://www.w3.org/2000/10/swap/math#memberCount)** (property)
    * 
    * The number of items in a list. The subject is a list,
    * the object is calculated as the number of members.
    */
    memberCount: prefixer('memberCount'),

    /**
    * **[negation](http://www.w3.org/2000/10/swap/math#absoluteValue)** (property)
    * 
    * The object is calulated as the absolute value of the subject.
    */
    absoluteValue: prefixer('absoluteValue'),

    /**
    * **[atan2](http://www.w3.org/2000/10/swap/math#atan2)** (property)
    * 
    * The subject is a pair of numbers. The object is calulated as the arc tangent value of the ratio of the two subject values.
    */
    atan2: prefixer('atan2'),

    /**
    * **[cos](http://www.w3.org/2000/10/swap/math#cos)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the cosine value of the subject.
    */
    cos: prefixer('cos'),

    /**
    * **[degrees](http://www.w3.org/2000/10/swap/math#degrees)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the conversion in degrees of the value of the subject.
    */
    degrees: prefixer('degrees'),

    /**
    * **[difference](http://www.w3.org/2000/10/swap/math#difference)** (property)
    * 
    * The subject is a pair of numbers. The object
    * is calculated by subtracting the second number of the pair from the first.
    * 
    */
    difference: prefixer('difference'),

    /**
    * **[exponentiation](http://www.w3.org/2000/10/swap/math#exponentiation)** (property)
    * 
    * The subject is a pair of numbers. The object
    * is calculated by raising the first number of the power of the second.
    * 
    */
    exponentiation: prefixer('exponentiation'),

    /**
    * **[integerQuotient](http://www.w3.org/2000/10/swap/math#integerQuotient)** (property)
    * 
    * The subject is a pair of integer numbers. The object
    * is calculated by dividing the first number of the pair by the second, ignoring remainder.
    * 
    */
    integerQuotient: prefixer('integerQuotient'),

    /**
    * **[negation](http://www.w3.org/2000/10/swap/math#negation)** (property)
    * 
    * The subject or object is calculated to be the negation of the other.
    */
    negation: prefixer('negation'),

    /**
    * **[product](http://www.w3.org/2000/10/swap/math#product)** (property)
    * 
    * The subject is a list of numbers.
    * The object is calculated as the arithmentic product of those numbers.
    * 
    */
    product: prefixer('product'),

    /**
    * **[quotient](http://www.w3.org/2000/10/swap/math#quotient)** (property)
    * 
    * The subject is a pair of numbers. The object
    * is calculated by dividing the first number of the pair by the second.
    * 
    */
    quotient: prefixer('quotient'),

    /**
    * **[remainder](http://www.w3.org/2000/10/swap/math#remainder)** (property)
    * 
    * The subject is a pair of integers. The object
    * is calculated by dividing the first number of the pair by the second and taking the remainder.
    * 
    */
    remainder: prefixer('remainder'),

    /**
    * **[rounded](http://www.w3.org/2000/10/swap/math#rounded)** (property)
    * 
    * The object is calulated as the subject rounded to the nearest integer.
    */
    rounded: prefixer('rounded'),

    /**
    * **[sin](http://www.w3.org/2000/10/swap/math#sin)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the sine value of the subject.
    */
    sin: prefixer('sin'),

    /**
    * **[sinh](http://www.w3.org/2000/10/swap/math#sinh)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the hyperbolic sine value of the subject.
    */
    sinh: prefixer('sinh'),

    /**
    * **[sum](http://www.w3.org/2000/10/swap/math#sum)** (property)
    * 
    * The subject is a list of numbers.
    * The object is calculated as the arithmentic sum of those numbers.
    * 
    */
    sum: prefixer('sum'),

    /**
    * **[tan](http://www.w3.org/2000/10/swap/math#tan)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the tangent value of the subject.
    */
    tan: prefixer('tan'),

    /**
    * **[tanh](http://www.w3.org/2000/10/swap/math#tanh)** (property)
    * 
    * The subject is an angle expressed in radians. The object is calulated as the hyperbolic tangent value of the subject.
    */
    tanh: prefixer('tanh'),

    /**
    * **[equalTo](http://www.w3.org/2000/10/swap/math#equalTo)** (property)
    * 
    * True iff the subject is a string representation of a number which  is EQUAL TO a number of which the object is a string representation.
    */
    equalTo: prefixer('equalTo'),

    /**
    * **[greaterThan](http://www.w3.org/2000/10/swap/math#greaterThan)** (property)
    * 
    * True iff the subject is a string representation of a number which  is greater than the number of which the object is a string representation.
    */
    greaterThan: prefixer('greaterThan'),

    /**
    * **[lessThan](http://www.w3.org/2000/10/swap/math#lessThan)** (property)
    * 
    * True iff the subject is a string representation of a number which  is LESS than a number of which the object is a string representation.
    */
    lessThan: prefixer('lessThan'),

    /**
    * **[notEqualTo](http://www.w3.org/2000/10/swap/math#notEqualTo)** (property)
    * 
    * True iff the subject is a string representation of a number which  is NOT EQUAL to a number of which the object is a string representation.
    */
    notEqualTo: prefixer('notEqualTo'),

    /**
    * **[notGreaterThan](http://www.w3.org/2000/10/swap/math#notGreaterThan)** (property)
    * 
    * True iff the subject is a string representation of a number which is NOT greater than the number of which the object is a string representation.
    */
    notGreaterThan: prefixer('notGreaterThan'),

    /**
    * **[notlessThan](http://www.w3.org/2000/10/swap/math#notLessThan)** (property)
    * 
    * True iff the subject is a string representation of a number which  is NOT LESS than a number of which the object is a string representation.
    */
    notLessThan: prefixer('notLessThan'),

  
  };

export default math

