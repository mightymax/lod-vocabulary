// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/ns/solid/terms#');

/**
 * [solid](http://www.w3.org/ns/solid/terms#})
 */
const solid = {
  /**
    * **[Account](http://www.w3.org/ns/solid/terms#Account)** (class)
    * 
    * A Solid account.
    */
    Account: prefixer('Account'),

    /**
    * **[Inbox](http://www.w3.org/ns/solid/terms#Inbox)** (class)
    * 
    * A resource containing notifications.
    */
    Inbox: prefixer('Inbox'),

    /**
    * **[Insert/delete patch](http://www.w3.org/ns/solid/terms#InsertDeletePatch)** (class)
    * 
    * A class of patch expressing insertions, deletions, and conditional modifications to a resource that has an RDF-based representation.
    */
    InsertDeletePatch: prefixer('InsertDeletePatch'),

    /**
    * **[Patch](http://www.w3.org/ns/solid/terms#Patch)** (class)
    * 
    * A patch expresses conditional modifications to a resource that has an RDF-based representation.
    */
    Patch: prefixer('Patch'),

    /**
    * **[Listed Type Index](http://www.w3.org/ns/solid/terms#ListedDocument)** (class)
    * 
    * Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.
    */
    ListedDocument: prefixer('ListedDocument'),

    /**
    * **[Notification](http://www.w3.org/ns/solid/terms#Notification)** (class)
    * 
    * A notification resource.
    */
    Notification: prefixer('Notification'),

    /**
    * **[Timeline](http://www.w3.org/ns/solid/terms#Timeline)** (class)
    * 
    * A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.
    */
    Timeline: prefixer('Timeline'),

    /**
    * **[Type index](http://www.w3.org/ns/solid/terms#TypeIndex)** (class)
    * 
    * A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.
    */
    TypeIndex: prefixer('TypeIndex'),

    /**
    * **[Type Registration](http://www.w3.org/ns/solid/terms#TypeRegistration)** (class)
    * 
    * The registered types that map a RDF classes/types to their locations using either `instance` or `instanceContainer` property.
    */
    TypeRegistration: prefixer('TypeRegistration'),

    /**
    * **[Unlisted Type Index](http://www.w3.org/ns/solid/terms#UnlistedDocument)** (class)
    * 
    * Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.
    */
    UnlistedDocument: prefixer('UnlistedDocument'),

    /**
    * **[account](http://www.w3.org/ns/solid/terms#account)** (property)
    * 
    * A solid account belonging to an Agent.
    */
    account: prefixer('account'),

    /**
    * **[deletes](http://www.w3.org/ns/solid/terms#deletes)** (property)
    * 
    * The triple patterns this patch removes from the document.
    */
    deletes: prefixer('deletes'),

    /**
    * **[registry class](http://www.w3.org/ns/solid/terms#forClass)** (property)
    * 
    * A class that is used to map an listed or unlisted type index.
    */
    forClass: prefixer('forClass'),

    /**
    * **[inbox (deprecated)](http://www.w3.org/ns/solid/terms#inbox)** (property)
    * 
    * Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
    */
    inbox: prefixer('inbox'),

    /**
    * **[inserts](http://www.w3.org/ns/solid/terms#inserts)** (property)
    * 
    * The triple patterns this patch adds to the document.
    */
    inserts: prefixer('inserts'),

    /**
    * **[instance](http://www.w3.org/ns/solid/terms#instance)** (property)
    * 
    * Maps a type to an individual resource, typically an index or a directory listing resource.
    */
    instance: prefixer('instance'),

    /**
    * **[instance container](http://www.w3.org/ns/solid/terms#instanceContainer)** (property)
    * 
    * Maps a type to a container which the client would have to list to get the instances of that type.
    */
    instanceContainer: prefixer('instanceContainer'),

    /**
    * **[loginEndpoint](http://www.w3.org/ns/solid/terms#loginEndpoint)** (property)
    * 
    * The login URI of a given server.
    */
    loginEndpoint: prefixer('loginEndpoint'),

    /**
    * **[logoutEndpoint](http://www.w3.org/ns/solid/terms#logoutEndpoint)** (property)
    * 
    * The logout URI of a given server.
    */
    logoutEndpoint: prefixer('logoutEndpoint'),

    /**
    * **[notification](http://www.w3.org/ns/solid/terms#notification)** (property)
    * 
    * Notification resource for an inbox.
    */
    notification: prefixer('notification'),

    /**
    * **[OIDC issuer](http://www.w3.org/ns/solid/terms#oidcIssuer)** (property)
    * 
    * The preferred OpenID Connect issuer URI for a given WebID.
    */
    oidcIssuer: prefixer('oidcIssuer'),

    /**
    * **[owner](http://www.w3.org/ns/solid/terms#owner)** (property)
    * 
    * A person or social entity that is considered to have control, rights, and responsibilities over a data storage.
    */
    owner: prefixer('owner'),

    /**
    * **[patches](http://www.w3.org/ns/solid/terms#patches)** (property)
    * 
    * The document to which this patch applies.
    */
    patches: prefixer('patches'),

    /**
    * **[private type index](http://www.w3.org/ns/solid/terms#privateTypeIndex)** (property)
    * 
    * Points to an unlisted type index resource.
    */
    privateTypeIndex: prefixer('privateTypeIndex'),

    /**
    * **[public type index](http://www.w3.org/ns/solid/terms#publicTypeIndex)** (property)
    * 
    * Points to a listed type index resource.
    */
    publicTypeIndex: prefixer('publicTypeIndex'),

    /**
    * **[type index](http://www.w3.org/ns/solid/terms#typeIndex)** (property)
    * 
    * Points to a TypeIndex resource.
    */
    typeIndex: prefixer('typeIndex'),

    /**
    * **[read](http://www.w3.org/ns/solid/terms#read)** (property)
    * 
    * Indicates if a message has been read or not. This property should have a boolean datatype.
    */
    read: prefixer('read'),

    /**
    * **[Non-volatile memory quota](http://www.w3.org/ns/solid/terms#storageQuota)** (property)
    * 
    * The quota of non-volatile memory that is available for the account (in bytes)
    */
    storageQuota: prefixer('storageQuota'),

    /**
    * **[Non-volatile memory usage](http://www.w3.org/ns/solid/terms#storageUsage)** (property)
    * 
    * The amount of non-volatile memory that the account have used (in bytes)
    */
    storageUsage: prefixer('storageUsage'),

    /**
    * **[timeline](http://www.w3.org/ns/solid/terms#timeline)** (property)
    * 
    * Timeline for a given resource.
    */
    timeline: prefixer('timeline'),

    /**
    * **[where](http://www.w3.org/ns/solid/terms#where)** (property)
    * 
    * The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
    */
    where: prefixer('where'),

  
  };

export default solid

