// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2004/02/skos/core#');

/**
 * [skos](http://www.w3.org/2004/02/skos/core#})
 */
const skos = {
  /**
    * **[Collection](http://www.w3.org/2004/02/skos/core#Collection)** (class)
    * 
    * A meaningful collection of concepts.
    */
    Collection: prefixer('Collection'),

    /**
    * **[Concept](http://www.w3.org/2004/02/skos/core#Concept)** (class)
    * 
    * An idea or notion; a unit of thought.
    */
    Concept: prefixer('Concept'),

    /**
    * **[Concept Scheme](http://www.w3.org/2004/02/skos/core#ConceptScheme)** (class)
    * 
    * A set of concepts, optionally including statements about semantic relationships between those concepts.
    */
    ConceptScheme: prefixer('ConceptScheme'),

    /**
    * **[Ordered Collection](http://www.w3.org/2004/02/skos/core#OrderedCollection)** (class)
    * 
    * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
    */
    OrderedCollection: prefixer('OrderedCollection'),

    /**
    * **[definition](http://www.w3.org/2004/02/skos/core#definition)** (property)
    * 
    * A statement or formal explanation of the meaning of a concept.
    */
    definition: prefixer('definition'),

    /**
    * **[scope note](http://www.w3.org/2004/02/skos/core#scopeNote)** (property)
    * 
    * A note that helps to clarify the meaning and/or the use of a concept.
    */
    scopeNote: prefixer('scopeNote'),

    /**
    * **[example](http://www.w3.org/2004/02/skos/core#example)** (property)
    * 
    * An example of the use of a concept.
    */
    example: prefixer('example'),

    /**
    * **[alternative label](http://www.w3.org/2004/02/skos/core#altLabel)** (property)
    * 
    * An alternative lexical label for a resource.
    */
    altLabel: prefixer('altLabel'),

    /**
    * **[has broader match](http://www.w3.org/2004/02/skos/core#broadMatch)** (property)
    * 
    * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
    */
    broadMatch: prefixer('broadMatch'),

    /**
    * **[has broader](http://www.w3.org/2004/02/skos/core#broader)** (property)
    * 
    * Relates a concept to a concept that is more general in meaning.
    */
    broader: prefixer('broader'),

    /**
    * **[is in mapping relation with](http://www.w3.org/2004/02/skos/core#mappingRelation)** (property)
    * 
    * Relates two concepts coming, by convention, from different schemes, and that have comparable meanings
    */
    mappingRelation: prefixer('mappingRelation'),

    /**
    * **[has narrower match](http://www.w3.org/2004/02/skos/core#narrowMatch)** (property)
    * 
    * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
    */
    narrowMatch: prefixer('narrowMatch'),

    /**
    * **[has broader transitive](http://www.w3.org/2004/02/skos/core#broaderTransitive)** (property)
    * 
    * skos:broaderTransitive is a transitive superproperty of skos:broader.
    */
    broaderTransitive: prefixer('broaderTransitive'),

    /**
    * **[has narrower](http://www.w3.org/2004/02/skos/core#narrower)** (property)
    * 
    * Relates a concept to a concept that is more specific in meaning.
    */
    narrower: prefixer('narrower'),

    /**
    * **[is in semantic relation with](http://www.w3.org/2004/02/skos/core#semanticRelation)** (property)
    * 
    * Links a concept to a concept related by meaning.
    */
    semanticRelation: prefixer('semanticRelation'),

    /**
    * **[has narrower transitive](http://www.w3.org/2004/02/skos/core#narrowerTransitive)** (property)
    * 
    * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
    */
    narrowerTransitive: prefixer('narrowerTransitive'),

    /**
    * **[change note](http://www.w3.org/2004/02/skos/core#changeNote)** (property)
    * 
    * A note about a modification to a concept.
    */
    changeNote: prefixer('changeNote'),

    /**
    * **[note](http://www.w3.org/2004/02/skos/core#note)** (property)
    * 
    * A general note, for any purpose.
    */
    note: prefixer('note'),

    /**
    * **[has close match](http://www.w3.org/2004/02/skos/core#closeMatch)** (property)
    * 
    * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
    */
    closeMatch: prefixer('closeMatch'),

    /**
    * **[editorial note](http://www.w3.org/2004/02/skos/core#editorialNote)** (property)
    * 
    * A note for an editor, translator or maintainer of the vocabulary.
    */
    editorialNote: prefixer('editorialNote'),

    /**
    * **[has exact match](http://www.w3.org/2004/02/skos/core#exactMatch)** (property)
    * 
    * skos:exactMatch is used to link two concepts, indicating a high degree of confidence that the concepts can be used interchangeably across a wide range of information retrieval applications. skos:exactMatch is a transitive property, and is a sub-property of skos:closeMatch.
    */
    exactMatch: prefixer('exactMatch'),

    /**
    * **[has top concept](http://www.w3.org/2004/02/skos/core#hasTopConcept)** (property)
    * 
    * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
    */
    hasTopConcept: prefixer('hasTopConcept'),

    /**
    * **[is top concept in scheme](http://www.w3.org/2004/02/skos/core#topConceptOf)** (property)
    * 
    * Relates a concept to the concept scheme that it is a top level concept of.
    */
    topConceptOf: prefixer('topConceptOf'),

    /**
    * **[hidden label](http://www.w3.org/2004/02/skos/core#hiddenLabel)** (property)
    * 
    * A lexical label for a resource that should be hidden when generating visual displays of the resource, but should still be accessible to free text search operations.
    */
    hiddenLabel: prefixer('hiddenLabel'),

    /**
    * **[history note](http://www.w3.org/2004/02/skos/core#historyNote)** (property)
    * 
    * A note about the past state/use/meaning of a concept.
    */
    historyNote: prefixer('historyNote'),

    /**
    * **[is in scheme](http://www.w3.org/2004/02/skos/core#inScheme)** (property)
    * 
    * Relates a resource (for example a concept) to a concept scheme in which it is included.
    */
    inScheme: prefixer('inScheme'),

    /**
    * **[has member](http://www.w3.org/2004/02/skos/core#member)** (property)
    * 
    * Relates a collection to one of its members.
    */
    member: prefixer('member'),

    /**
    * **[has member list](http://www.w3.org/2004/02/skos/core#memberList)** (property)
    * 
    * Relates an ordered collection to the RDF list containing its members.
    */
    memberList: prefixer('memberList'),

    /**
    * **[notation](http://www.w3.org/2004/02/skos/core#notation)** (property)
    * 
    * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
    */
    notation: prefixer('notation'),

    /**
    * **[preferred label](http://www.w3.org/2004/02/skos/core#prefLabel)** (property)
    * 
    * The preferred lexical label for a resource, in a given language.
    */
    prefLabel: prefixer('prefLabel'),

    /**
    * **[has related](http://www.w3.org/2004/02/skos/core#related)** (property)
    * 
    * Relates a concept to a concept with which there is an associative semantic relationship.
    */
    related: prefixer('related'),

    /**
    * **[has related match](http://www.w3.org/2004/02/skos/core#relatedMatch)** (property)
    * 
    * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
    */
    relatedMatch: prefixer('relatedMatch'),

  
  };

export default skos

