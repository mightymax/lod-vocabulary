// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('https://www.ica.org/standards/RiC/ontology#');

/**
 * [rico](https://www.ica.org/standards/RiC/ontology#})
 */
const rico = {
  /**
    * **[RiC-CM corresponding component](https://www.ica.org/standards/RiC/ontology#RiCCMCorrespondingComponent)** (property)
    * 
    * When it exists, specifies the identifier and name of RiC-CM
    * component that corresponds to the annotated class or property.
    */
    RiCCMCorrespondingComponent: prefixer('RiCCMCorrespondingComponent'),

    /**
    * **[close to](https://www.ica.org/standards/RiC/ontology#closeTo)** (property)
    * 
    * An annotation property for recording a possible mapping to a
    * component in another model or ontology
    */
    closeTo: prefixer('closeTo'),

    /**
    * **[Accumulation Relation](https://www.ica.org/standards/RiC/ontology#AccumulationRelation)** (class)
    * 
    * Connects at least one Record Resource or Instantiation to at
    * least one Agent, when the Agent accumulates it, be it intentionally (collecting it) or
    * not (receiving it in the course of its activities).
    */
    AccumulationRelation: prefixer('AccumulationRelation'),

    /**
    * **[Agent Origination Relation](https://www.ica.org/standards/RiC/ontology#AgentOriginationRelation)** (class)
    * 
    * Connects at least one Record Resource or an Instantiation to at
    * least one Agent that creates or accumulates the Record Resource, receives it, or sends
    * it.
    */
    AgentOriginationRelation: prefixer('AgentOriginationRelation'),

    /**
    * **[Activity](https://www.ica.org/standards/RiC/ontology#Activity)** (class)
    * 
    * Activity is a kind of Event. Activity is specifically used to
    * designate purposeful human activity. Activity may be understood from two perspectives.
    * First it can be understood as leading to an end. The end is the purpose of the Activity,
    * or why the Activity is performed. Second, it can be understood in terms of the processes
    * that lead to achieving the end, how the end is realized through coordinated actions.
    * Purpose and process are complementary understandings of Activity. Together the two
    * perspectives address why the Activity is performed, the expected ends or outcomes; and
    * how the Activity fulfills the purpose. While activity has an intended end, it also has
    * unintended consequences and results, or side-effects. By and large, these may not be the
    * focus of the description, but they are, unquestionably, context. |In a corporate or
    * government context an Activity may also be called a 'function'. An Activity exists in a
    * specific social and cultural context, and within that context is subject to change over
    * time. An Activity may be composed of other Activities.
    */
    Activity: prefixer('Activity'),

    /**
    * **[Event](https://www.ica.org/standards/RiC/ontology#Event)** (class)
    * 
    * An event may be natural, human, or a combination of natural
    * and human. Events have temporal and spatial boundaries. An event may actively involve
    * some agent(s) and affect any entity. An event may be discrete, happening at a specific
    * moment in time, or may occur over an extended period of time. Events may have events as
    * parts, and events may precede or follow one another. Multiple agents may participate in
    * the same event, and in different roles.
    */
    Event: prefixer('Event'),

    /**
    * **[Activity Documentation Relation](https://www.ica.org/standards/RiC/ontology#ActivityDocumentationRelation)** (class)
    * 
    * Connects at least one Record Resource or Instantiation to at
    * least one Activity, when the Record Resource or Instantiation results from the
    * activity.
    */
    ActivityDocumentationRelation: prefixer('ActivityDocumentationRelation'),

    /**
    * **[Provenance Relation](https://www.ica.org/standards/RiC/ontology#ProvenanceRelation)** (class)
    * 
    * This relation stands for organic and for functional
    * provenance.
    */
    ProvenanceRelation: prefixer('ProvenanceRelation'),

    /**
    * **[Activity Type](https://www.ica.org/standards/RiC/ontology#ActivityType)** (class)
    * 
    * Can be extended with any number of subclasses, e.g.
    * “function/action” and “activity domain”. This allows for a faceted approach that enables
    * an Activity to be categorized using a combination of components, general or more
    * specific. For example, “monitoring” can be used in combination with “election polls” or
    * “water resources”.
    */
    ActivityType: prefixer('ActivityType'),

    /**
    * **[Type](https://www.ica.org/standards/RiC/ontology#Type)** (class)
    * 
    * A superclass for any category of some thing. A type
    * characterizes an entity.
    */
    Type: prefixer('Type'),

    /**
    * **[Agent](https://www.ica.org/standards/RiC/ontology#Agent)** (class)
    * 
    * An Agent may have one or more identities; an identity is a
    * constellation of properties or relations that together “identify” the Agent. A Person or
    * Group commonly has one identity, though each also may have one or more alternative
    * identities. Such alternative identities may be shared by more than one Person or Group.
    * Alternative identities include but are not limited to pseudonyms, heteronyms, DBA (Doing
    * Business As), and trade identities. An alternative identity should not be confused with
    * a Position in a Group, for example, presidents, prime ministers, governors, popes,
    * royalty, or bishops. Nor should an alternative identity be confused with a variant name
    * or identifier of the same identity. Agent also includes entities created by a Person or
    * Group that act on behalf of the creating Agent in an autonomous or semi-autonomous
    * manner. Examples of a Mechanism include software agents, robots, and space and
    * underwater probes that generate data (records) in the course of Activity assigned to and
    * in conformance with the instructions given to them by the creating Person or
    * Group.
    */
    Agent: prefixer('Agent'),

    /**
    * **[Thing](https://www.ica.org/standards/RiC/ontology#Thing)** (class)
    * 
    * Includes all RiC entities as well as any concept, material
    * thing, or event that may be the subject of a Record Resource or associated with an
    * Activity. Examples of entities not explicitly addressed in RiC includes but is not
    * limited to the following: abstract concepts; cultural movements, named periods and
    * events; named things, objects and works; legendary, mythical or fictitious figures,
    * characters or beings.
    */
    Thing: prefixer('Thing'),

    /**
    * **[Agent Control Relation](https://www.ica.org/standards/RiC/ontology#AgentControlRelation)** (class)
    * 
    * Connects at least one Agent, to at least another Agent, when the
    * first one(s) control(s) in a way the activities of the second one(s).
    */
    AgentControlRelation: prefixer('AgentControlRelation'),

    /**
    * **[Agent Hierarchical Relation](https://www.ica.org/standards/RiC/ontology#AgentHierarchicalRelation)** (class)
    * 
    * Connects at least one Agent to at least another Agent, when the
    * first one is hierarchically superior to the second one.
    */
    AgentHierarchicalRelation: prefixer('AgentHierarchicalRelation'),

    /**
    * **[Authority Relation](https://www.ica.org/standards/RiC/ontology#AuthorityRelation)** (class)
    * 
    * Would probably rarely be used as such (use its
    * sub-categories)
    */
    AuthorityRelation: prefixer('AuthorityRelation'),

    /**
    * **[Agent Relation](https://www.ica.org/standards/RiC/ontology#AgentToAgentRelation)** (class)
    * 
    * Connects at least two Agents.
    */
    AgentToAgentRelation: prefixer('AgentToAgentRelation'),

    /**
    * **[Agent Name](https://www.ica.org/standards/RiC/ontology#AgentName)** (class)
    * 
    * A label, title or term designating an Agent in order to make it
    * distinguishable from other similar entities.
    */
    AgentName: prefixer('AgentName'),

    /**
    * **[Name](https://www.ica.org/standards/RiC/ontology#Name)** (class)
    * 
    * A label, title or term designating the entity in order to make
    * it distinguishable from other similar entities.
    */
    Name: prefixer('Name'),

    /**
    * **[Agent Temporal Relation](https://www.ica.org/standards/RiC/ontology#AgentTemporalRelation)** (class)
    * 
    * Connects at least one Agent, to at least another Agent, that
    * succeeds it chronologically for, for instance, fullfilling some functions or performing
    * some activities.
    */
    AgentTemporalRelation: prefixer('AgentTemporalRelation'),

    /**
    * **[Temporal Relation](https://www.ica.org/standards/RiC/ontology#TemporalRelation)** (class)
    * 
    * Connects at least one Thing to at least one Thing that follows
    * it in chronological order.
    */
    TemporalRelation: prefixer('TemporalRelation'),

    /**
    * **[Relation](https://www.ica.org/standards/RiC/ontology#Relation)** (class)
    * 
    * Use when direct, binary object properties are not enough, e.g.
    * when you need to record a date, a location or any other descriptive element for a
    * relation (till RDF-Star becomes a W3C recommendation and provides a lighter method for
    * doing so); or when the relation invloves more than two entities (n-ary relation). It is
    * recommended to use the subclasses of the Relation class.
    */
    Relation: prefixer('Relation'),

    /**
    * **[Appellation](https://www.ica.org/standards/RiC/ontology#Appellation)** (class)
    * 
    * A concept of any kind that is used for designating an Entity and
    * referring to it.
    */
    Appellation: prefixer('Appellation'),

    /**
    * **[Concept](https://www.ica.org/standards/RiC/ontology#Concept)** (class)
    * 
    * An idea, unit of thought, abstract cultural object or
    * category
    */
    Concept: prefixer('Concept'),

    /**
    * **[Appellation Relation](https://www.ica.org/standards/RiC/ontology#AppellationRelation)** (class)
    * 
    * The relation between an Appellation and at least one Thing that
    * the Appellation designates.
    */
    AppellationRelation: prefixer('AppellationRelation'),

    /**
    * **[Authorship Relation](https://www.ica.org/standards/RiC/ontology#AuthorshipRelation)** (class)
    * 
    * Connects at least one Record to at least one Person, Group or
    * Position that is responsible for conceiving and formulating the information contained in
    * the Record.
    */
    AuthorshipRelation: prefixer('AuthorshipRelation'),

    /**
    * **[Creation Relation](https://www.ica.org/standards/RiC/ontology#CreationRelation)** (class)
    * 
    * Connects at least one Record Resource or Instantiation to at
    * least one Agent, when the Agent is either responsible for all or some of the content of
    * the Record Resource, or is a contributor to the genesis or production of the
    * Instantiation.
    */
    CreationRelation: prefixer('CreationRelation'),

    /**
    * **[Carrier Extent](https://www.ica.org/standards/RiC/ontology#CarrierExtent)** (class)
    * 
    * Countable characteristics of a record resource carrier
    * expressed as a quantity.
    */
    CarrierExtent: prefixer('CarrierExtent'),

    /**
    * **[Extent](https://www.ica.org/standards/RiC/ontology#Extent)** (class)
    * 
    * Physical or logical extent of a resource
    */
    Extent: prefixer('Extent'),

    /**
    * **[Carrier Type](https://www.ica.org/standards/RiC/ontology#CarrierType)** (class)
    * 
    * Carrier Type information is essential for assessing
    * authenticity, conservation needs and the availability, access and use of Record
    * Resources. Carrier Type determines the environmental conditions of storage and the
    * prerequisites and possible ways to access and use of the records. Should not be confused
    * with Content Type, that categorizes a Record Resource, nor with Representation Type that
    * categorizes an Instantiation. The Carrier Type depends on the media type that is
    * required to access the records and is independent of its content
    */
    CarrierType: prefixer('CarrierType'),

    /**
    * **[Child Relation](https://www.ica.org/standards/RiC/ontology#ChildRelation)** (class)
    * 
    * Connects at lest one Person, to at least another Person, when
    * the first has child the second one.
    */
    ChildRelation: prefixer('ChildRelation'),

    /**
    * **[Descendance Relation](https://www.ica.org/standards/RiC/ontology#DescendanceRelation)** (class)
    * 
    * Connects at least one Person to at least another Person, when
    * the first has/have descendant the second one(s).
    */
    DescendanceRelation: prefixer('DescendanceRelation'),

    /**
    * **[Content Type](https://www.ica.org/standards/RiC/ontology#ContentType)** (class)
    * 
    * Should not be confused with Representation Type or Carrier
    * Type of a related Instantiation since the form of communication can be independent of
    * the representation or carrier, for example, a map (Content Type: cartographic image) can
    * be represented as a sketch (Representation Type: graphic) or as a GIS-coded elements
    * (Representation Type: computer).
    */
    ContentType: prefixer('ContentType'),

    /**
    * **[Coordinates](https://www.ica.org/standards/RiC/ontology#Coordinates)** (class)
    * 
    * Longitudinal and latitudinal information of a
    * Place.
    */
    Coordinates: prefixer('Coordinates'),

    /**
    * **[Corporate Body](https://www.ica.org/standards/RiC/ontology#CorporateBody)** (class)
    * 
    * Corporate Body is a kind of Group.
    */
    CorporateBody: prefixer('CorporateBody'),

    /**
    * **[Group](https://www.ica.org/standards/RiC/ontology#Group)** (class)
    * 
    * Group is a kind of Agent. A Group has a socially recognized
    * identity. Each member of the Group plays a particular role or roles (that is has a
    * particular Position) in the coordinated activity of the Group. Corporate bodies and
    * families are kinds of groups, though other kinds of groups are possible. For example,
    * the “electorate” -- all of the voters in a given election. Complex, large groups may be
    * subdivided into other groups.
    */
    Group: prefixer('Group'),

    /**
    * **[Corporate Body Type](https://www.ica.org/standards/RiC/ontology#CorporateBodyType)** (class)
    * 
    * Categorization of a Corporate Body.
    */
    CorporateBodyType: prefixer('CorporateBodyType'),

    /**
    * **[Correspondence Relation](https://www.ica.org/standards/RiC/ontology#CorrespondenceRelation)** (class)
    * 
    * Connects at least two Persons, when they correspond to each
    * other.
    */
    CorrespondenceRelation: prefixer('CorrespondenceRelation'),

    /**
    * **[Knowing Relation](https://www.ica.org/standards/RiC/ontology#KnowingRelation)** (class)
    * 
    * Connects at least two Persons that directly know each other
    * during their existence. This relation is symmetric.
    */
    KnowingRelation: prefixer('KnowingRelation'),

    /**
    * **[Date](https://www.ica.org/standards/RiC/ontology#Date)** (class)
    * 
    * Date includes both single dates, a date range, or a set of
    * non-contiguous single dates or date ranges. A date may be represented in natural
    * language, based on a digital standard, or both. Digital standard dates will typically be
    * based on ISO 8601, or Extended Date-Time Format (EDTF).
    */
    Date: prefixer('Date'),

    /**
    * **[Date Range](https://www.ica.org/standards/RiC/ontology#DateRange)** (class)
    * 
    * Chronological information associated with an entity that
    * contributes to its identification and contextualization, that implies or explicitly
    * states a start date and end date.
    */
    DateRange: prefixer('DateRange'),

    /**
    * **[Date Set](https://www.ica.org/standards/RiC/ontology#DateSet)** (class)
    * 
    * Primarily used in the description of Record Sets to describe
    * dates of member Records
    */
    DateSet: prefixer('DateSet'),

    /**
    * **[Demographic Group](https://www.ica.org/standards/RiC/ontology#DemographicGroup)** (class)
    * 
    * Can be extended with any number of subclasses, e.g. Age or
    * Religion. A demographic group may be defined as a subset of the general population.
    * Individuals may belong to several demographic groups
    */
    DemographicGroup: prefixer('DemographicGroup'),

    /**
    * **[Derivation Relation](https://www.ica.org/standards/RiC/ontology#DerivationRelation)** (class)
    * 
    * Connects an Instantiation to at least one Instantiation that is
    * derived from it.
    */
    DerivationRelation: prefixer('DerivationRelation'),

    /**
    * **[Instantiation to Instantiation Relation](https://www.ica.org/standards/RiC/ontology#InstantiationToInstantiationRelation)** (class)
    * 
    * Connects at least two instantiations
    */
    InstantiationToInstantiationRelation: prefixer('InstantiationToInstantiationRelation'),

    /**
    * **[Family Relation](https://www.ica.org/standards/RiC/ontology#FamilyRelation)** (class)
    * 
    * Connects at least two Persons, when they have some family link,
    * i.e. belong to the same family.
    */
    FamilyRelation: prefixer('FamilyRelation'),

    /**
    * **[Documentary Form Type](https://www.ica.org/standards/RiC/ontology#DocumentaryFormType)** (class)
    * 
    * Documentary Form Type plays an important role in determining
    * the type of information a Record may comprise, its status of perfection, and its
    * authenticity and reliability. Documentary form types exist in a specific social and
    * cultural context, and within that context, are subject to change over
    * time
    */
    DocumentaryFormType: prefixer('DocumentaryFormType'),

    /**
    * **[Event Relation](https://www.ica.org/standards/RiC/ontology#EventRelation)** (class)
    * 
    * Connects at least one Event to at least one Thing, when the
    * first is associated with the existence and lifecycle of the second one.
    */
    EventRelation: prefixer('EventRelation'),

    /**
    * **[Event Type](https://www.ica.org/standards/RiC/ontology#EventType)** (class)
    * 
    * Events of all kinds can be categorized. Curation event types
    * include creation; acquisition; transfer; arrangement; description; digitization, etc.
    * Biographical event types include birth, marriage, death, etc.
    */
    EventType: prefixer('EventType'),

    /**
    * **[Extent Type](https://www.ica.org/standards/RiC/ontology#ExtentType)** (class)
    * 
    * Categorization of the extent that is being measured
    */
    ExtentType: prefixer('ExtentType'),

    /**
    * **[Family](https://www.ica.org/standards/RiC/ontology#Family)** (class)
    * 
    * Family is a kind of Group. “Family” is used here as a general
    * term that encompasses a wide variety of familial groups. Other types of familial groups
    * include Dynasty, Clan, House, Tribe and others. Though family may be a recognized legal
    * group in specific contexts, the term may also be used for groups that are socially
    * recognized as families. A family may be a group of persons related either by
    * consanguinity or affinity or cohabitation or other social conventions. In some context,
    * a Family may be legally recognized as Corporate Body. For example, certain North
    * American peoples (tribes) retain self-government rights and have jurisdiction over
    * defined tribal lands.
    */
    Family: prefixer('Family'),

    /**
    * **[Family Type](https://www.ica.org/standards/RiC/ontology#FamilyType)** (class)
    * 
    * Family Type encompasses a wide variety of familial groups
    * related by consanguinity, affinity, cohabitation or other social conventions.
    */
    FamilyType: prefixer('FamilyType'),

    /**
    * **[Functional Equivalence Relation](https://www.ica.org/standards/RiC/ontology#FunctionalEquivalenceRelation)** (class)
    * 
    * Use for Instantiations which, from some point of view, in some
    * context and for some users at least, may be considered as equivalent. This equivalence
    * is usually based upon the fact that the Instantiations have at least the same
    * intellectual content (they instantiate the same Record Resource).
    */
    FunctionalEquivalenceRelation: prefixer('FunctionalEquivalenceRelation'),

    /**
    * **[Mechanism](https://www.ica.org/standards/RiC/ontology#Mechanism)** (class)
    * 
    * Mechanism is a kind of Agent. A Mechanism may have both
    * mechanical and software components, or may be exclusively software. A Mechanism acts in
    * the world producing physical or social effects, and frequently generates or modifies
    * Records.
    */
    Mechanism: prefixer('Mechanism'),

    /**
    * **[Person](https://www.ica.org/standards/RiC/ontology#Person)** (class)
    * 
    * Person is a kind of Agent. Most commonly, a human being
    * (biological person) has a single coeval social identity or persona. In everyday
    * discourse, this is the “real person.” Less common though not rare, over the course of a
    * lifetime, personae in addition to the coeval (or “original”) persona may be associated
    * with the human being. Such “alternative personae” are most often created by the original
    * person for specific purposes. Under some circumstances, an alternative persona might
    * eclipse or replace the original person (Mark Twain eclipsing Samuel Clemens; John Wayne
    * eclipsing Marion Mitchell Morrison), that is, the social (shared) alternative identity
    * becomes the predominate identity. Less common is whentwo or more persons collaborate to
    * create a shared persona. Persona shared by two or more Persons constitute a kind of
    * Group. Within the archival context, the original Person generally will be the focus of
    * the description, with alternative personae noted. Exceptionally, an alternative persona
    * may displace the coeval persona.s.
    */
    Person: prefixer('Person'),

    /**
    * **[Position](https://www.ica.org/standards/RiC/ontology#Position)** (class)
    * 
    * Position is a kind of Agent. Position is the intersection of a
    * Person and a Group. Position exists independently of the Person that holds the Position
    * within a Group. More than one Person may hold a Position. Position is commonly defined
    * in a Mandate, often called a position description or job description. The Mandate may
    * specify the work to be performed (Activity) as well as the competencies for performing
    * the Activity. A Position is often given a Name. A Position may be tied to a project or
    * to a set of tasks and thus have a defined duration. A Position may change over time, as
    * the Group that establishes it changes over time. Position is not to be confused with
    * Occupation or Activity. Within the records created by a Corporate Body, a Position may
    * be used to identify the record sets resulting from activities performed by one or more
    * persons holding the Position over time, without necessarily identifying or describing
    * the Person or persons, or identifying which records were created by each
    * Person.
    */
    Position: prefixer('Position'),

    /**
    * **[Group Subdivision Relation](https://www.ica.org/standards/RiC/ontology#GroupSubdivisionRelation)** (class)
    * 
    * Connects a Group and at least another Group, when the first one
    * as the second one(s) among its subdivisions.
    */
    GroupSubdivisionRelation: prefixer('GroupSubdivisionRelation'),

    /**
    * **[Whole Part Relation](https://www.ica.org/standards/RiC/ontology#WholePartRelation)** (class)
    * 
    * Connects a Thing to at least one constitutive or component part
    * of that Thing.
    */
    WholePartRelation: prefixer('WholePartRelation'),

    /**
    * **[Identifier](https://www.ica.org/standards/RiC/ontology#Identifier)** (class)
    * 
    * A word, number, letter, symbol, or any combination of these used
    * to uniquely identify or reference an individual instance of an entity within a specific
    * information domain.
    */
    Identifier: prefixer('Identifier'),

    /**
    * **[Identifier Type](https://www.ica.org/standards/RiC/ontology#IdentifierType)** (class)
    * 
    * For example, 'old identifier' ; 'ISNI' (for a person or
    * corporate body), etc.
    */
    IdentifierType: prefixer('IdentifierType'),

    /**
    * **[Instantiation](https://www.ica.org/standards/RiC/ontology#Instantiation)** (class)
    * 
    * A Record or Record Part must have been instantiated at least
    * once, though this instantiation may no longer exist at the moment of description. An
    * instantiation might also exist at the moment of description, but be destroyed at a later
    * moment in time, when, for example, a derived instantiation might become the only
    * remaining instantiation. A Record Set may have an instantiation, which is to say that it
    * is not a necessary condition. An Instantiation may be derived from another
    * Instantiation. A Record Resource may have many Instantiations simultaneously (for
    * instance, a record printed and saved in the same time as DOCX and PDF/A would have 3
    * concurrent instantiations) or through time (for example, copy of a record). Depending on
    * the context, a new instantiation may be seen as a new or as the same record resource.
    * During in the process of re-instantiation something is lost and something is preserved,
    * but it is up to the context and the Agent that produces or uses that Instantiation to
    * assess whether the two instantiations are functionally equivalent or not. For instance,
    * a postcard representing a town map from 1874 (Instantiation 1) is digitized and kept as
    * a JPEG file (Instantiation 2). The digital copy may be considered as instantiating the
    * "same" Record by an Agent considering the information transmitted by the Record (e.g.,
    * the urban landscape displayed), but as a" different" Record by an antiquarian more
    * focused on the materiality of the carrier. Successive instantiations may change the
    * perceivable boundaries of a Record Resource. For instance, a case file comprising many
    * records may be digitized and saved as one single PDF file, which, from management
    * perspective, may be treated as one Record. Similarly, a large Record Set (a fonds or a
    * series) may be maintained as one database. On the other hand, one record (main document
    * and its annexes) may be digitized in separate files and each one may be managed as a
    * discrete “physical” item. Instantiations may require mediation to communicate the
    * information in the Record Resource. While a traditional Record on paper can simply be
    * read by an Agent in order to understand the information, a vinyl recording, a video
    * cassette or a digital file needs a device (mediator) to codify or decodify the
    * information conveyed. This mediator may imply simple physical components (a turntable
    * needle, for example), or a complex gallery of software and hardware elements.
    * Instantiations are more than the mere informational content of Record Resource and may
    * be the focus of preservation and physical management of records. The use of particular
    * document types for records, such as a medieval charter, may have implications for the
    * authenticity of the records. Hence, the way a Record Resource is instantiated
    * contributes to the contextualizing of the content.record resource is instantiated
    * contributes to the contextualizing the content. Distinguishing the message conveyed
    * (Record Resource) and its physical representations (Instantiation) allows for the
    * efficient management of their descriptions, and preserve information about a Record
    * Resource even when no physical representation of it exists or is known to exist anymore.
    * The relations between distinct instantiations can then be expressed wherever they
    * coexist, and they can be related to the Record Resource they
    * instantiate.
    */
    Instantiation: prefixer('Instantiation'),

    /**
    * **[Instantiation Extent](https://www.ica.org/standards/RiC/ontology#InstantiationExtent)** (class)
    * 
    * Countable characteristics of an Instantiation expressed as a
    * quantity.
    */
    InstantiationExtent: prefixer('InstantiationExtent'),

    /**
    * **[Intellectual Property Rights Relation](https://www.ica.org/standards/RiC/ontology#IntellectualPropertyRightsRelation)** (class)
    * 
    * Can be used, when the record resource is a work, for
    * specifying the connection between the record resource and its
    * author(s).
    */
    IntellectualPropertyRightsRelation: prefixer('IntellectualPropertyRightsRelation'),

    /**
    * **[Knowing Of Relation](https://www.ica.org/standards/RiC/ontology#KnowingOfRelation)** (class)
    * 
    * Connects at least one Person to at least another one, when the
    * first one has some knowledge of the second one through time or space.
    */
    KnowingOfRelation: prefixer('KnowingOfRelation'),

    /**
    * **[Language](https://www.ica.org/standards/RiC/ontology#Language)** (class)
    * 
    * A spoken or written human language represented in the Record or
    * Record Part, or used by the Agent.
    */
    Language: prefixer('Language'),

    /**
    * **[Leadership Relation](https://www.ica.org/standards/RiC/ontology#LeadershipRelation)** (class)
    * 
    * Connects at least one Person and at least one Group, when the
    * first one leads the second one.
    */
    LeadershipRelation: prefixer('LeadershipRelation'),

    /**
    * **[Legal Status](https://www.ica.org/standards/RiC/ontology#LegalStatus)** (class)
    * 
    * A status defined by law.
    */
    LegalStatus: prefixer('LegalStatus'),

    /**
    * **[Management Relation](https://www.ica.org/standards/RiC/ontology#ManagementRelation)** (class)
    * 
    * Connects at least one Agent, and at least one Record Resource or
    * Instantiation that the Agent manages.
    */
    ManagementRelation: prefixer('ManagementRelation'),

    /**
    * **[Mandate](https://www.ica.org/standards/RiC/ontology#Mandate)** (class)
    * 
    * Mandate is a kind of Rule. A Mandate confers the authority or
    * competencies of Agents to perform a specified Activity. In addition to assigning an
    * Activity and delegating authority to perform the Activity to an Agent, a Mandate
    * commonly limits the Place (jurisdiction) and Date (time period) within which an Agent
    * may perform the Activity (where and when). Mandates exist in a specific social and
    * cultural context, and within that context are subject to change over time. While a
    * Mandate may be tacit, in whole or part, it may be explicitly expressed in a variety of
    * documentary sources (for example, constitutions, legislation, (legal) acts, statutes,
    * legal codes, ordinances, charges, charters, or mission statements). The evidence for
    * identifying a Mandate may be found in its entirety in one documentary source (for
    * example, a law or regulation), or may be found in two or more sources. A Mandate should
    * not be confused with the one or more documentary sources that serve as evidence of its
    * identity. A documentary source is a Record.
    */
    Mandate: prefixer('Mandate'),

    /**
    * **[Rule](https://www.ica.org/standards/RiC/ontology#Rule)** (class)
    * 
    * Rule can be related directly to Agent, Activity, or anything created or managed by agents, such as a Record Resource or Instantiation.
    * A Rule may be unwritten or written or otherwise documented. Unwritten rules may include though are not limited to the following:  social mores, customs, or community expectations. Written rules may include though are not limited to the following: constitutions, legislation, acts (legal), statutes, legal codes, ordinances, charters, mission statements, regulations, policies, procedures, instructions, codes of conduct or ethics, professional standards, work assignments or work plans.
    * The source or sources of some Rules are external to the Agent (for example, expressed in elections, social mores, customs, community expectations, laws, regulations, standards and best practice codes), while others are expressed within the Agent’s immediate context (for example, policies, or written or verbal instructions).
    * The evidence for identifying Rules may be found in their entirety in one documentary source (for example, a law or regulation) or may be found in two or more sources.
    * Rule should not be confused with the one or more documentary sources that serve as evidence of its identity. A documentary source is a Record.
    * 
    */
    Rule: prefixer('Rule'),

    /**
    * **[Mandate Relation](https://www.ica.org/standards/RiC/ontology#MandateRelation)** (class)
    * 
    * Connects at least one Mandate, and at least one Agent, when the
    * first gives the second one the authority or competencies to act. May also involve one to
    * many Activities that the Mandate(s) assign(s) to the Agent(s).
    */
    MandateRelation: prefixer('MandateRelation'),

    /**
    * **[Rule Relation](https://www.ica.org/standards/RiC/ontology#RuleRelation)** (class)
    * 
    * Connects at least one Rule to at least one Thing, when it is
    * associated with existence and lifecycle of the Thing.
    */
    RuleRelation: prefixer('RuleRelation'),

    /**
    * **[Membership Relation](https://www.ica.org/standards/RiC/ontology#MembershipRelation)** (class)
    * 
    * Connects a Group and at least one Person, when the first one has
    * the second one(s) among its members.
    */
    MembershipRelation: prefixer('MembershipRelation'),

    /**
    * **[Migration Relation](https://www.ica.org/standards/RiC/ontology#MigrationRelation)** (class)
    * 
    * Connects an Instantiation and at least another Instantiation,
    * when the first is migrated into the second one(s).
    */
    MigrationRelation: prefixer('MigrationRelation'),

    /**
    * **[Occupation Type](https://www.ica.org/standards/RiC/ontology#OccupationType)** (class)
    * 
    * Occupation Type should not be confused with Position where,
    * for example, an Agent with the Occupation Type “lawyer” holds the Position of “legal
    * counsel” in an agency. Occupation Type is related to, but should not be confused with
    * the domain or field of Activity (Actvitity Type), such as an archivist who works in the
    * domain of archival science. Occupation Type is a kind of Demographic
    * Group.
    */
    OccupationType: prefixer('OccupationType'),

    /**
    * **[Ownership Relation](https://www.ica.org/standards/RiC/ontology#OwnershipRelation)** (class)
    * 
    * Among other probably more rare use cases for archival
    * description, can be used between agents (a person owns a corporate body, a corporate
    * body owns a mechanism), or between agents and record resources
    */
    OwnershipRelation: prefixer('OwnershipRelation'),

    /**
    * **[Performance Relation](https://www.ica.org/standards/RiC/ontology#PerformanceRelation)** (class)
    * 
    * Connects at least one Activity to at least one Agent, when the
    * first is performed by the second one(s).
    */
    PerformanceRelation: prefixer('PerformanceRelation'),

    /**
    * **[Physical Location](https://www.ica.org/standards/RiC/ontology#PhysicalLocation)** (class)
    * 
    * Usually associated to one to many Places, and known during
    * some time. A location may be linked to one to many Coordinates.
    */
    PhysicalLocation: prefixer('PhysicalLocation'),

    /**
    * **[Place](https://www.ica.org/standards/RiC/ontology#Place)** (class)
    * 
    * A Place may be a jurisdiction, a manmade structure, or a
    * natural feature. A manmade structure or natural feature may also be a jurisdiction. A
    * Place may be referenced to a Physical Location on the earth, or (if you don't want to
    * use the PhysicalLocation class) directly to geographic coordinates. Both jurisdictions
    * and natural features are historical entities. A Place thus may have begin and end dates,
    * and changing boundaries that result from human or natural events. A Jurisdiction is the
    * bounded geographic area within which an Agent has the authority to perform specified
    * activities constrained by rules.
    */
    Place: prefixer('Place'),

    /**
    * **[Place Name](https://www.ica.org/standards/RiC/ontology#PlaceName)** (class)
    * 
    * A label, title or term designating a Place in order to make it
    * distinguishable from other similar entities.
    */
    PlaceName: prefixer('PlaceName'),

    /**
    * **[Place Relation](https://www.ica.org/standards/RiC/ontology#PlaceRelation)** (class)
    * 
    * Connects a Place and at least one Thing, when the first is
    * associated with the existence and lifecycle of the second one.
    */
    PlaceRelation: prefixer('PlaceRelation'),

    /**
    * **[Place Type](https://www.ica.org/standards/RiC/ontology#PlaceType)** (class)
    * 
    * Broadly, a Place may be a member of three broad categories:
    * jurisdiction, manmade structure, or a natural feature. Each of these three categories
    * can subdivided into narrower categories.
    */
    PlaceType: prefixer('PlaceType'),

    /**
    * **[Position Holding Relation](https://www.ica.org/standards/RiC/ontology#PositionHoldingRelation)** (class)
    * 
    * Connects at least one Person, and at least one Position that the
    * Person occupies.
    */
    PositionHoldingRelation: prefixer('PositionHoldingRelation'),

    /**
    * **[Position to Group Relation](https://www.ica.org/standards/RiC/ontology#PositionToGroupRelation)** (class)
    * 
    * Connects at least one Position, and a Group, when the first
    * one(s) exist(s) in/is defined within the second one.
    */
    PositionToGroupRelation: prefixer('PositionToGroupRelation'),

    /**
    * **[Production Technique Type](https://www.ica.org/standards/RiC/ontology#ProductionTechniqueType)** (class)
    * 
    * Categorization of the method used in the representation of
    * information on the Instantiation.
    */
    ProductionTechniqueType: prefixer('ProductionTechniqueType'),

    /**
    * **[Proxy](https://www.ica.org/standards/RiC/ontology#Proxy)** (class)
    * 
    * Useful for handling in RDF the sequencing of records or
    * records sets in the context of a Record set. A Record Resource has only one Proxy in the
    * context of one specific Record Set. It may have many Proxies simultaneously or through
    * time.
    */
    Proxy: prefixer('Proxy'),

    /**
    * **[Record](https://www.ica.org/standards/RiC/ontology#Record)** (class)
    * 
    * Record is a kind of Record Resource. A Record must have or
    * have had at least one Instantiation. A Record may have more than one Instantiation. A
    * re-instantiation of the record may be considered the same record or a new record,
    * depending on the context and of the functions that record serves. Such information may
    * serve a variety of purposes, though it always documents or is evidence of
    * Activity.
    */
    Record: prefixer('Record'),

    /**
    * **[Record Resource](https://www.ica.org/standards/RiC/ontology#RecordResource)** (class)
    * 
    * Producing a record resource may imply either its newly
    * creation or a reuse of previous existing information by combination, rearrangement,
    * selecting, reformatting etc. Records, Record Sets, and Record Parts are all evidence of
    * the activities of an Agent. More than one Agent may be involved in the creation of a
    * Record Resource. The role of the Agent in creating the Record Resource may take
    * different forms, for example, authoring of an individual record, accumulating a set of
    * records, or forming a set of records. Though a Record, Record Set, and Record Part,
    * under most circumstances, may be easily distinguished from one another, frequently
    * identifying the boundary of each and how the “bounded information regions” interrelate,
    * may present particular challenges. Documentary Forms provide the rules governing many
    * Records, providing criteria for identifying its boundary, and identifying its essential
    * Record Parts. Many Records, though, do not have well-established documentary forms,
    * particularly electronic records, where it may be difficult to determine whether
    * individual elements represented in separate bitstreams are record parts, records, or
    * record sets. For example, is a photograph represented independently in a bitstream
    * embedded in a text document a Record, or a Record Part ? Or is the same photograph
    * attached to an email, maintaining its independent representation, a Record or a Record
    * Part? When information is grouped for some purpose, for example, zip or tar “file
    * compression” for saving storage space, presents a further challenge. One file comprises
    * multiple bitstreams subjected to techniques that remove bits that can be losslessly
    * recovered when decompressed. Under what circumstances is such a compressed bitstream a
    * Record or a Record Set? Determining when an information object is a Record, Record Part,
    * or Record Set is based on perspective and judgement exercised in a particular context.
    * In one context, the Agent describing an information object may designate it a Record,
    * while another Agent in a different context may designate it a Record Part. Both
    * designations are supported by RiC, and the significance of the difference for users of
    * the records is ameliorated by the fact that attributes and relations employed in
    * describing each of the record entities are shared.
    */
    RecordResource: prefixer('RecordResource'),

    /**
    * **[Record Part](https://www.ica.org/standards/RiC/ontology#RecordPart)** (class)
    * 
    * Record Part is a kind of Record Resource. A Record Part may
    * itself have Record Parts.
    */
    RecordPart: prefixer('RecordPart'),

    /**
    * **[Record Resource Extent](https://www.ica.org/standards/RiC/ontology#RecordResourceExtent)** (class)
    * 
    * Countable characteristics of the content of the Record
    * Resource expressed as a quantity.
    */
    RecordResourceExtent: prefixer('RecordResourceExtent'),

    /**
    * **[Record Resource Genetic Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceGeneticRelation)** (class)
    * 
    * Connects two to more Record Resources when there is a genetic
    * relation between them. Genetic in this sense is as defined by diplomatics, i.e. the
    * process by which a Record Resource is developed.
    */
    RecordResourceGeneticRelation: prefixer('RecordResourceGeneticRelation'),

    /**
    * **[Record Resource to Record Resource Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceToRecordResourceRelation)** (class)
    * 
    * Connects at least two Record Resources.
    */
    RecordResourceToRecordResourceRelation: prefixer('RecordResourceToRecordResourceRelation'),

    /**
    * **[Record Resource Holding Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceHoldingRelation)** (class)
    * 
    * Connects at least one Agent, and one or more Record Resource or
    * Instantiation that the Agent holds.
    */
    RecordResourceHoldingRelation: prefixer('RecordResourceHoldingRelation'),

    /**
    * **[Record Resource to Instantiation Relation](https://www.ica.org/standards/RiC/ontology#RecordResourceToInstantiationRelation)** (class)
    * 
    * Connects a Record Resource to one or more Instantiations that
    * instantiate it.
    */
    RecordResourceToInstantiationRelation: prefixer('RecordResourceToInstantiationRelation'),

    /**
    * **[Record Set](https://www.ica.org/standards/RiC/ontology#RecordSet)** (class)
    * 
    * Record Set is a kind of Record Resource. The Record members in
    * a Record Set may physically reside together, though physical proximity is not essential.
    * In a particular context, an Agent (e.g. administrator, records manager, archivist,
    * end-user, etc.) may select the Record members of a Record Set based on a shared
    * attribute or attributes, or a shared Relation or Relations. The grouping of the Records
    * serves a purpose or purposes specific to the context of the Agent. All Record members of
    * a Record Set may share the attribute of having been accumulated by the same Agent, or
    * all share the same Documentary Form Type and are created over time by the same Activity.
    * A Record Set may represent the act of classifying the Records in accordance with a
    * formal classification scheme that may be based on Activity, subject, organizational
    * structure, or other criteria; an act of archival arrangement (e.g. based on common
    * provenance); or some other selection and grouping that fulfils a particular purpose or
    * purposes (e.g. a classification that reflects or supports the purposes of a researcher).
    * By exception, some Records are brought together based on their not belonging in the
    * context of selection to other designated groups: a ‘Miscellaneous’ series, for example.
    * A Record Set accumulated by an Agent in the course of life or work Activity should be
    * kept in a manner that preserves context and evidential value. Records Sets may also
    * contain other Records Sets. Both a Record Set and a Record may simultaneously be a
    * member of more than one Record Set, and over the course of its existence, a Record Set
    * or Record may be a member of an indeterminate number of Record Sets in an indeterminate
    * number of contexts. Record Sets and Records contained within a Record Set may be ordered
    * into a sequence based on a common property or relation, or common properties or
    * relations (e.g. alphabetical by Agent or related Place name; chronological order by an
    * allocated Date); or some other criterion (e.g. an imposed order by
    * relevance).
    */
    RecordSet: prefixer('RecordSet'),

    /**
    * **[Record Set Type](https://www.ica.org/standards/RiC/ontology#RecordSetType)** (class)
    * 
    * Four instances of Record Set Type are included for now in
    * RiC-O; they also are instances of skos:Concept and, as such, part of a SKOS vocabulary.
    * Record Set Type may also be used to categorize types of Record Set that have not
    * traditionally been considered archival, e.g. search result list.
    */
    RecordSetType: prefixer('RecordSetType'),

    /**
    * **[Record State](https://www.ica.org/standards/RiC/ontology#RecordState)** (class)
    * 
    * Can in particular refer to a record state of development or
    * its status of transmission once finished (draft, original, copy...). Specifying that a
    * record resource has state copy usually implies that another record resource existed or
    * exists, of which the one described is the copy. In such a case you can also use 'is copy
    * of' object property.
    */
    RecordState: prefixer('RecordState'),

    /**
    * **[Representation Type](https://www.ica.org/standards/RiC/ontology#RepresentationType)** (class)
    * 
    * Representation Type can be unmediated (which allows humans to
    * receive the message communicated without an intermediation of a device) and mediated
    * (which needs a device to decode the message). A lot of contemporary mediated types are
    * digital. Each Representation Type may present specific features: bit rate for audio,
    * resolution for digital images, encoding format for video etc. Depending of the type,
    * properties may thus be needed to describe their characteristics. Not be confused with
    * Content Type or Carrier Type since the form of representation can be independent of the
    * communication or carrier.
    */
    RepresentationType: prefixer('RepresentationType'),

    /**
    * **[Role Type](https://www.ica.org/standards/RiC/ontology#RoleType)** (class)
    * 
    * The role an agent plays in some context (usually in some
    * creation relation). Not to be confused with a position (position of an agent in some
    * group). For example, a person who is the head of some corporate body may play the role
    * of annotator (of a record) in a creation relation.
    */
    RoleType: prefixer('RoleType'),

    /**
    * **[Rule Type](https://www.ica.org/standards/RiC/ontology#RuleType)** (class)
    * 
    * For example, for rules that can be applied to record resources
    * : access rule, use rule, etc.
    */
    RuleType: prefixer('RuleType'),

    /**
    * **[Sequential Relation](https://www.ica.org/standards/RiC/ontology#SequentialRelation)** (class)
    * 
    * Connects at least one Thing to at least one Thing that follows
    * it in some sequence.
    */
    SequentialRelation: prefixer('SequentialRelation'),

    /**
    * **[Sibling Relation](https://www.ica.org/standards/RiC/ontology#SiblingRelation)** (class)
    * 
    * Connects at least two Persons, when they are
    * siblings.
    */
    SiblingRelation: prefixer('SiblingRelation'),

    /**
    * **[Single Date](https://www.ica.org/standards/RiC/ontology#SingleDate)** (class)
    * 
    * Chronological information associated with an entity that
    * contributes to its identification and contextualization, related to a single point in
    * time.
    */
    SingleDate: prefixer('SingleDate'),

    /**
    * **[Spouse Relation](https://www.ica.org/standards/RiC/ontology#SpouseRelation)** (class)
    * 
    * Connects at least two Persons, when they are
    * spouses.
    */
    SpouseRelation: prefixer('SpouseRelation'),

    /**
    * **[Teaching Relation](https://www.ica.org/standards/RiC/ontology#TeachingRelation)** (class)
    * 
    * Connects at least one Person to at least another Person, who is
    * their student.
    */
    TeachingRelation: prefixer('TeachingRelation'),

    /**
    * **[Title](https://www.ica.org/standards/RiC/ontology#Title)** (class)
    * 
    * A name that is used for a Record Resource or a
    * Rule
    */
    Title: prefixer('Title'),

    /**
    * **[Type Relation](https://www.ica.org/standards/RiC/ontology#TypeRelation)** (class)
    * 
    * may be useful at least for some types (e.g. demographic
    * group)
    */
    TypeRelation: prefixer('TypeRelation'),

    /**
    * **[accrual](https://www.ica.org/standards/RiC/ontology#accrual)** (property)
    * 
    * See also accrualStatus
    */
    accrual: prefixer('accrual'),

    /**
    * **[Unit Of Measurement](https://www.ica.org/standards/RiC/ontology#UnitOfMeasurement)** (class)
    * 
    * A definite magnitude of a quantity, defined and adopted by convention or by
    * law, that is used as a standard for measurement of the same kind of quantity. Can be
    * spacial units (cm, m), weigt (g, kg), time (s, h), storage (MB, TB) or more informal
    * units used in the archival context like number of boxes, pages or words.
    */
    UnitOfMeasurement: prefixer('UnitOfMeasurement'),

    /**
    * **[accrual status](https://www.ica.org/standards/RiC/ontology#accrualStatus)** (property)
    * 
    * A text statement or single words such as “Closed” to indicate
    * that no additional Record Resource will (or is anticipated to) be added to the Record
    * Set; “Open” to indicate that additional records or record sets will (or are expected to)
    * be added to the Record Set; or “Unknown” to indicate that this information is not
    * available, for example. See also accrual
    */
    accrualStatus: prefixer('accrualStatus'),

    /**
    * **[Work Relation](https://www.ica.org/standards/RiC/ontology#WorkRelation)** (class)
    * 
    * Connects at least two Agents that have some type of work
    * relation in the course of their activities.
    */
    WorkRelation: prefixer('WorkRelation'),

    /**
    * **[altimetric system](https://www.ica.org/standards/RiC/ontology#altimetricSystem)** (property)
    * 
    * Reference system used for altitude
    */
    altimetricSystem: prefixer('altimetricSystem'),

    /**
    * **[reference system](https://www.ica.org/standards/RiC/ontology#referenceSystem)** (property)
    * 
    * Framework or standard used to represent an
    * information.
    */
    referenceSystem: prefixer('referenceSystem'),

    /**
    * **[altitude](https://www.ica.org/standards/RiC/ontology#altitude)** (property)
    * 
    * Property of the Coordinates class. If you don't use this
    * class, use geographicalCoordinates property, a property of Place class.
    */
    altitude: prefixer('altitude'),

    /**
    * **[measure](https://www.ica.org/standards/RiC/ontology#measure)** (property)
    * 
    * The extent, quantity, amount, or degree of an entity, as
    * determined by measurement or calculation.
    */
    measure: prefixer('measure'),

    /**
    * **[authenticity note](https://www.ica.org/standards/RiC/ontology#authenticityNote)** (property)
    * 
    * For electronic records, it may include results from automated
    * means of checking the validity of signatures and timestamp.
    */
    authenticityNote: prefixer('authenticityNote'),

    /**
    * **[authorizing mandate](https://www.ica.org/standards/RiC/ontology#authorizingMandate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use the Mandate class for handling
    * mandates.
    */
    authorizingMandate: prefixer('authorizingMandate'),

    /**
    * **[rule followed](https://www.ica.org/standards/RiC/ontology#ruleFollowed)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use the Rule class for handling rules.
    */
    ruleFollowed: prefixer('ruleFollowed'),

    /**
    * **[beginning date](https://www.ica.org/standards/RiC/ontology#beginningDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    beginningDate: prefixer('beginningDate'),

    /**
    * **[date](https://www.ica.org/standards/RiC/ontology#date)** (property)
    * 
    * Provided for usability reasons, like its subproperties. May be
    * deprecated and removed later on. Use only if you don't use Date classes for handling
    * dates.
    */
    date: prefixer('date'),

    /**
    * **[birth date](https://www.ica.org/standards/RiC/ontology#birthDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    birthDate: prefixer('birthDate'),

    /**
    * **[calendar](https://www.ica.org/standards/RiC/ontology#calendar)** (property)
    * 
    * Used system of reckoning time in which the beginning, length,
    * and divisions of a year are defined, sometimes along with multiyear
    * cycles.
    */
    calendar: prefixer('calendar'),

    /**
    * **[date standard](https://www.ica.org/standards/RiC/ontology#dateStandard)** (property)
    * 
    * Identifier of the standard of the Normalized
    * date.
    */
    dateStandard: prefixer('dateStandard'),

    /**
    * **[carrier extent](https://www.ica.org/standards/RiC/ontology#carrierExtent)** (property)
    * 
    * For electronic resources, it indicates the size of storage
    * capacity (disk, tape, film etc.). Carrier Extent should not be confused with Record
    * Resource Extent or Instantiation Extent. For a given Record Resource, the Instantiation
    * Extent may vary, based on format, density of information on the carrier, etc. For
    * example, 1500 words (Record Resource Extent) may have Instantiation Extent 3kb as a Word
    * document and 5kb as a PDF file, and instantiations may be represented on a CD of 700mb
    * (Carrier Extent). Use if you don't use CarrierExtent class and its properties for
    * handling such information.
    */
    carrierExtent: prefixer('carrierExtent'),

    /**
    * **[physical or logical extent](https://www.ica.org/standards/RiC/ontology#physicalOrLogicalExtent)** (property)
    * 
    * Provided for usability reasons. Use only if you cannot use the
    * subproperties (particularly if the same free text is being used in your current metadata
    * for describing the record resource, carrier and instantiation extent).
    */
    physicalOrLogicalExtent: prefixer('physicalOrLogicalExtent'),

    /**
    * **[certainty](https://www.ica.org/standards/RiC/ontology#certainty)** (property)
    * 
    * Qualifies the level of certitude of the accuracy of a Date, an
    * Event or a Relation.
    */
    certainty: prefixer('certainty'),

    /**
    * **[classification](https://www.ica.org/standards/RiC/ontology#classification)** (property)
    * 
    * No further statement is made here about the nature of the
    * qualifier, nor about the relation it has with the Record Resource or with the management
    * of the Record Resource. The value of this property may in turn be used as a criterion
    * for identifying the qualified Record Resource as a member of a Record
    * Set.
    */
    classification: prefixer('classification'),

    /**
    * **[conditions of access](https://www.ica.org/standards/RiC/ontology#conditionsOfAccess)** (property)
    * 
    * This property provides information about the accessibility of
    * a Record Resource, as well as the physical, technical or legal limitations that exist
    * for providing access to it.
    */
    conditionsOfAccess: prefixer('conditionsOfAccess'),

    /**
    * **[conditions of use](https://www.ica.org/standards/RiC/ontology#conditionsOfUse)** (property)
    * 
    * Terms and circumstances affecting the use of a Record Resource
    * after access has been provided. Includes conditions governing reproduction of the Record
    * Resource under applicable copyright (intellectual property) and/or property legislation,
    * and of the Instantiation, due to conservation status.
    */
    conditionsOfUse: prefixer('conditionsOfUse'),

    /**
    * **[creation date](https://www.ica.org/standards/RiC/ontology#creationDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    creationDate: prefixer('creationDate'),

    /**
    * **[date qualifier](https://www.ica.org/standards/RiC/ontology#dateQualifier)** (property)
    * 
    * Indicates the precision of a date. It specifies if, and to what
    * extent, the value is an estimation.
    */
    dateQualifier: prefixer('dateQualifier'),

    /**
    * **[death date](https://www.ica.org/standards/RiC/ontology#deathDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    deathDate: prefixer('deathDate'),

    /**
    * **[end date](https://www.ica.org/standards/RiC/ontology#endDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    endDate: prefixer('endDate'),

    /**
    * **[deletion date](https://www.ica.org/standards/RiC/ontology#deletionDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    deletionDate: prefixer('deletionDate'),

    /**
    * **[descriptive note](https://www.ica.org/standards/RiC/ontology#descriptiveNote)** (property)
    * 
    * Descriptive information about an entity that is not otherwise
    * addressed.
    */
    descriptiveNote: prefixer('descriptiveNote'),

    /**
    * **[expressed date](https://www.ica.org/standards/RiC/ontology#expressedDate)** (property)
    * 
    * Natural language expression of a Date.
    */
    expressedDate: prefixer('expressedDate'),

    /**
    * **[textual value](https://www.ica.org/standards/RiC/ontology#textualValue)** (property)
    * 
    * A textual expression of an Appellation or Date.
    */
    textualValue: prefixer('textualValue'),

    /**
    * **[geodesic system](https://www.ica.org/standards/RiC/ontology#geodesicSystem)** (property)
    * 
    * Reference system used for geographical
    * coordinates.
    */
    geodesicSystem: prefixer('geodesicSystem'),

    /**
    * **[geographical coordinates](https://www.ica.org/standards/RiC/ontology#geographicalCoordinates)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use PhysicalLocation and Coordinates classes with Place.
    * Coordinates may be based on ISO 6709 Standard representation of geographic point
    * location by coordinates.
    */
    geographicalCoordinates: prefixer('geographicalCoordinates'),

    /**
    * **[height](https://www.ica.org/standards/RiC/ontology#height)** (property)
    * 
    * Vertical dimension of an entity.
    */
    height: prefixer('height'),

    /**
    * **[history](https://www.ica.org/standards/RiC/ontology#history)** (property)
    * 
    * History can alternatively be represented by a series of
    * related Events.
    */
    history: prefixer('history'),

    /**
    * **[identifier](https://www.ica.org/standards/RiC/ontology#identifier)** (property)
    * 
    * Use only if you don't use Identifier class for handling
    * identifiers. Within a given domain (a closed system), identifiers are used to uniquely
    * reference instances of an entity. Identifiers are instruments of control that facilitate
    * management of the entities within the domain. The formulation of identifiers commonly is
    * based on rules.
    */
    identifier: prefixer('identifier'),

    /**
    * **[Instantiation extent](https://www.ica.org/standards/RiC/ontology#instantiationExtent)** (property)
    * 
    * For a given Record Resource, the Instantiation Extent may
    * vary, based on format, density of information on the carrier, etc. For example, a file
    * of 1500 words (Record Resource Extent) may have Instantiation Extent 3kb as a Word
    * document and 5kb as a PDF file, and instantiations may be represented on a CD of 700mb
    * (Carrier Extent). Use if you don't use InstantiationExtent class and its properties for
    * handling such information.
    */
    instantiationExtent: prefixer('instantiationExtent'),

    /**
    * **[Instantiation structure](https://www.ica.org/standards/RiC/ontology#instantiationStructure)** (property)
    * 
    * Information about the physical arrangement and composition of an
    * Instantiation.
    */
    instantiationStructure: prefixer('instantiationStructure'),

    /**
    * **[structure](https://www.ica.org/standards/RiC/ontology#structure)** (property)
    * 
    * Use only if you cannot use the subproperties (particularly if
    * the same free text is being used in your current metadata for describing the record
    * resource and the instantiation structure).
    */
    structure: prefixer('structure'),

    /**
    * **[integrity](https://www.ica.org/standards/RiC/ontology#integrity)** (property)
    * 
    * The information about integrity may be generated manually or
    * automatically.
    */
    integrity: prefixer('integrity'),

    /**
    * **[last modification date](https://www.ica.org/standards/RiC/ontology#lastModificationDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    lastModificationDate: prefixer('lastModificationDate'),

    /**
    * **[modification date](https://www.ica.org/standards/RiC/ontology#modificationDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    modificationDate: prefixer('modificationDate'),

    /**
    * **[latitude](https://www.ica.org/standards/RiC/ontology#latitude)** (property)
    * 
    * Property of the Coordinates class. If you don't use this
    * class, use geographicalCoordinates property, a property of Place class.
    */
    latitude: prefixer('latitude'),

    /**
    * **[location](https://www.ica.org/standards/RiC/ontology#location)** (property)
    * 
    * Use only if you don't use PhysicalLocation class with Place.
    * Use the geographicalCoordinates property, or the Coordinates class, record the
    * geographical coordinates of the Place.s
    */
    location: prefixer('location'),

    /**
    * **[longitude](https://www.ica.org/standards/RiC/ontology#longitude)** (property)
    * 
    * Property of the Coordinates class. If you don't use this
    * class, use geographicalCoordinates property, a property of Place class.
    */
    longitude: prefixer('longitude'),

    /**
    * **[name](https://www.ica.org/standards/RiC/ontology#name)** (property)
    * 
    * Use only if you don't use Name class for handling
    * names.
    */
    name: prefixer('name'),

    /**
    * **[normalized date value](https://www.ica.org/standards/RiC/ontology#normalizedDateValue)** (property)
    * 
    * Date representation based on a standard, preferably
    * machine-readable.
    */
    normalizedDateValue: prefixer('normalizedDateValue'),

    /**
    * **[normalized value](https://www.ica.org/standards/RiC/ontology#normalizedValue)** (property)
    * 
    * Value representation based on a standard, preferably
    * machine-readable.
    */
    normalizedValue: prefixer('normalizedValue'),

    /**
    * **[physical characteristics](https://www.ica.org/standards/RiC/ontology#physicalCharacteristics)** (property)
    * 
    * Information about the physical features of the Instantiation.
    * Includes information about the physical nature and condition such as conservation
    * status.
    */
    physicalCharacteristics: prefixer('physicalCharacteristics'),

    /**
    * **[production technique](https://www.ica.org/standards/RiC/ontology#productionTechnique)** (property)
    * 
    * Use only if you have free text or don't have a controlled
    * vocabulary for production techniques (in this case, use the ProductionTechniqueType
    * class)
    */
    productionTechnique: prefixer('productionTechnique'),

    /**
    * **[publication date](https://www.ica.org/standards/RiC/ontology#publicationDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    publicationDate: prefixer('publicationDate'),

    /**
    * **[quality of representation](https://www.ica.org/standards/RiC/ontology#qualityOfRepresentation)** (property)
    * 
    * Conditions of an Instantiation that impact the legibility or
    * completeness of Record Resource, and thus the viability of its use. Conditions may be
    * associated with deficiencies in the processes of Record (re)creation or capture, or the
    * deterioration of the Instantiation (e.g. its carrier) causing loss of information of the
    * record over time
    */
    qualityOfRepresentation: prefixer('qualityOfRepresentation'),

    /**
    * **[quantity](https://www.ica.org/standards/RiC/ontology#quantity)** (property)
    * 
    * Use if you use the Extent class and its properties for
    * handling an accurate description of the extent of a resource..
    */
    quantity: prefixer('quantity'),

    /**
    * **[Record Resource extent](https://www.ica.org/standards/RiC/ontology#recordResourceExtent)** (property)
    * 
    * The number, size or duration of the information content
    * unit(s) remains the same even if the information is instantiated in various carriers.
    * For example, a file of 1500 words (Record Resource Extent) may have Instantiation Extent
    * 3kb as a Word document and 5kb as a PDF file, and instantiations may be represented on a
    * CD of 700mb (Carrier Extent). Use if you don't use RecordResourceExtent class and its
    * properties for handling such information.
    */
    recordResourceExtent: prefixer('recordResourceExtent'),

    /**
    * **[Record Resource structure](https://www.ica.org/standards/RiC/ontology#recordResourceStructure)** (property)
    * 
    * Information about the intellectual arrangement and composition
    * of a Record Resource. For Record and Record Part, it encompasses information about the
    * intellectual composition of the record, the presence of record parts and their
    * functions. For Record Set, it encompasses information about the methodology or criteria
    * used for arranging the Record Set members or Record members within the containing Record
    * Set
    */
    recordResourceStructure: prefixer('recordResourceStructure'),

    /**
    * **[Relation state](https://www.ica.org/standards/RiC/ontology#relationState)** (property)
    * 
    * Used to qualify the state of a Relation (e. g. present, past,
    * ongoing, unknown).
    */
    relationState: prefixer('relationState'),

    /**
    * **[scope and content](https://www.ica.org/standards/RiC/ontology#scopeAndContent)** (property)
    * 
    * Summary of the scope (such as time periods, geography) and
    * content (such as subject matter, administrative processes) of the Record Resource. It
    * should highlight the information conveyed in the Record Resource, why it was created,
    * received, and/or maintained, and the Agents connected to it. Scope and Content provides
    * a more complete summary of the informational content of the Record Resource. It may
    * include description of relations with agents, activities, dates and places, or with
    * other record resources. It is not to be confused with the History attribute which
    * focuses on the origination and subsequence changes to a Record Resource.
    */
    scopeAndContent: prefixer('scopeAndContent'),

    /**
    * **[source](https://www.ica.org/standards/RiC/ontology#source)** (property)
    * 
    * Can be used, in particular, for Records having documentary
    * form type Finding Aid or Authority Record, or for Relations. Use only if you don't use
    * the hasSource object property.
    */
    source: prefixer('source'),

    /**
    * **[technical characteristics](https://www.ica.org/standards/RiC/ontology#technicalCharacteristics)** (property)
    * 
    * Does not include references to the workflow that the Mechanism
    * is involved in which is described under the Activity entity. It emphasizes those
    * features that provide a better understanding of the impact of the Mechanism on the
    * records.
    */
    technicalCharacteristics: prefixer('technicalCharacteristics'),

    /**
    * **[title](https://www.ica.org/standards/RiC/ontology#title)** (property)
    * 
    * Use only if you don't use Title class for handling
    * titles.
    */
    title: prefixer('title'),

    /**
    * **[type](https://www.ica.org/standards/RiC/ontology#type)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Type subclasses for handling
    * categories.
    */
    type: prefixer('type'),

    /**
    * **[unit of measurement](https://www.ica.org/standards/RiC/ontology#unitOfMeasurement)** (property)
    * 
    * Use if you do not use the UnitOfMeasurement class for handling
    * units of measurement along with Extent.
    */
    unitOfMeasurement: prefixer('unitOfMeasurement'),

    /**
    * **[used from date](https://www.ica.org/standards/RiC/ontology#usedFromDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    usedFromDate: prefixer('usedFromDate'),

    /**
    * **[used to date](https://www.ica.org/standards/RiC/ontology#usedToDate)** (property)
    * 
    * Provided for usability reasons. May be deprecated and removed
    * later on. Use only if you don't use Date classes for handling dates.
    */
    usedToDate: prefixer('usedToDate'),

    /**
    * **[width](https://www.ica.org/standards/RiC/ontology#width)** (property)
    * 
    * Horizontal dimension of an entity.
    */
    width: prefixer('width'),

    /**
    * **[accumulation relation has source ](https://www.ica.org/standards/RiC/ontology#accumulationRelationHasSource)** (property)
    * 
    * Connects an Accumulation Relation to one of the accumulated
    * Record Resources or Instantiations
    */
    accumulationRelationHasSource: prefixer('accumulationRelationHasSource'),

    /**
    * **[agent origination relation has source ](https://www.ica.org/standards/RiC/ontology#agentOriginationRelationHasSource)** (property)
    * 
    * Connects an Agent Origination Relation to one of the resulting
    * Record Resource or Instantiation
    */
    agentOriginationRelationHasSource: prefixer('agentOriginationRelationHasSource'),

    /**
    * **[record resource or instantiation is source of accumulation
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfAccumulationRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is
    * accumulated) to an Accumulation Relation.
    */
    recordResourceOrInstantiationIsSourceOfAccumulationRelation: prefixer('recordResourceOrInstantiationIsSourceOfAccumulationRelation'),

    /**
    * **[accumulation relation has target ](https://www.ica.org/standards/RiC/ontology#accumulationRelationHasTarget)** (property)
    * 
    * Connects an Accumulation Relation to one of the accumulating
    * Agents
    */
    accumulationRelationHasTarget: prefixer('accumulationRelationHasTarget'),

    /**
    * **[agent origination relation has target ](https://www.ica.org/standards/RiC/ontology#agentOriginationRelationHasTarget)** (property)
    * 
    * Connects an Agent Origination Relation to one of the creating or
    * accumulating Agents
    */
    agentOriginationRelationHasTarget: prefixer('agentOriginationRelationHasTarget'),

    /**
    * **[agent is target of accumulation relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAccumulationRelation)** (property)
    * 
    * Connects one of the accumulating Agents to an Accumulation
    * Relation
    */
    agentIsTargetOfAccumulationRelation: prefixer('agentIsTargetOfAccumulationRelation'),

    /**
    * **[activity documentation relation has source ](https://www.ica.org/standards/RiC/ontology#activityDocumentationRelationHasSource)** (property)
    * 
    * Connects an Activity Documentation Relation to one of the
    * resulting Record Resources or Instantiations
    */
    activityDocumentationRelationHasSource: prefixer('activityDocumentationRelationHasSource'),

    /**
    * **[provenance relation has source ](https://www.ica.org/standards/RiC/ontology#provenanceRelationHasSource)** (property)
    * 
    * Connects a Provenance Relation to a Record Resource or
    * Instantiation.
    */
    provenanceRelationHasSource: prefixer('provenanceRelationHasSource'),

    /**
    * **[record resource or instantiation is source of activity
            documentation relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that documents an
    * Activity) to an Activity Documentation Relation.
    */
    recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation: prefixer('recordResourceOrInstantiationIsSourceOfActivityDocumentationRelation'),

    /**
    * **[activity documentation relation has target ](https://www.ica.org/standards/RiC/ontology#activityDocumentationRelationHasTarget)** (property)
    * 
    * Connects an Activity Documentation Relation to one of the
    * documented Activities
    */
    activityDocumentationRelationHasTarget: prefixer('activityDocumentationRelationHasTarget'),

    /**
    * **[provenance relation has target ](https://www.ica.org/standards/RiC/ontology#provenanceRelationHasTarget)** (property)
    * 
    * Connects a Provenance Relation to an Agent or
    * Activity.
    */
    provenanceRelationHasTarget: prefixer('provenanceRelationHasTarget'),

    /**
    * **[activity is target of activity documentation relation
        ](https://www.ica.org/standards/RiC/ontology#activityIsTargetOfActivityDocumentationRelation)** (property)
    * 
    * Connects an Activity to an Activity Documentation
    * Relation
    */
    activityIsTargetOfActivityDocumentationRelation: prefixer('activityIsTargetOfActivityDocumentationRelation'),

    /**
    * **[activity is context of relation ](https://www.ica.org/standards/RiC/ontology#activityIsContextOfRelation)** (property)
    * 
    * Connects an Activity to an Agent Temporal Relation (when the
    * Activity is transferred from an Agent to another one) or a Mandate Relation (the Mandate
    * assigns the Activity to the Agent or defines it).
    */
    activityIsContextOfRelation: prefixer('activityIsContextOfRelation'),

    /**
    * **[thing is context of relation ](https://www.ica.org/standards/RiC/ontology#thingIsContextOfRelation)** (property)
    * 
    * Connects a Thing (that is a secondary, contextual entity during
    * the existence of the Relation) to a n-ary Relation.
    */
    thingIsContextOfRelation: prefixer('thingIsContextOfRelation'),

    /**
    * **[as concerns activity ](https://www.ica.org/standards/RiC/ontology#asConcernsActivity)** (property)
    * 
    * Connects an Agent Temporal Relation or Mandate Relation, to an
    * Activity that is, either transferred from an Agent to another one, or assigned by a
    * Mandate to an Agent.
    */
    asConcernsActivity: prefixer('asConcernsActivity'),

    /**
    * **[activity is source of performance relation ](https://www.ica.org/standards/RiC/ontology#activityIsSourceOfPerformanceRelation)** (property)
    * 
    * Connects an Activity that is performed to a Performance
    * Relation
    */
    activityIsSourceOfPerformanceRelation: prefixer('activityIsSourceOfPerformanceRelation'),

    /**
    * **[thing is source of relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfRelation)** (property)
    * 
    * Connects a Thing (that is the source of a Relation) to a
    * Relation.
    */
    thingIsSourceOfRelation: prefixer('thingIsSourceOfRelation'),

    /**
    * **[performance relation has source ](https://www.ica.org/standards/RiC/ontology#performanceRelationHasSource)** (property)
    * 
    * Connects a Performance Relation to a performed
    * Activity.
    */
    performanceRelationHasSource: prefixer('performanceRelationHasSource'),

    /**
    * **[agent or activity is target of provenance relation ](https://www.ica.org/standards/RiC/ontology#agentOrActivityIsTargetOfProvenanceRelation)** (property)
    * 
    * Connects an Agent or Activity that is the provenance of a Record
    * resource or Instantiation, to a Provenance Relation
    */
    agentOrActivityIsTargetOfProvenanceRelation: prefixer('agentOrActivityIsTargetOfProvenanceRelation'),

    /**
    * **[affects or affected](https://www.ica.org/standards/RiC/ontology#affectsOrAffected)** (property)
    * 
    * Connects an Event to a Thing on which the Event has or had some
    * significant impact.
    */
    affectsOrAffected: prefixer('affectsOrAffected'),

    /**
    * **[has or had participant](https://www.ica.org/standards/RiC/ontology#hasOrHadParticipant)** (property)
    * 
    * Connects an Event to a Thing that is or was actively or
    * passively involved in it.
    */
    hasOrHadParticipant: prefixer('hasOrHadParticipant'),

    /**
    * **[is or was affected by](https://www.ica.org/standards/RiC/ontology#isOrWasAffectedBy)** (property)
    * 
    * Inverse of 'affects or affected' object property.
    */
    isOrWasAffectedBy: prefixer('isOrWasAffectedBy'),

    /**
    * **[agent control relation has source ](https://www.ica.org/standards/RiC/ontology#agentControlRelationHasSource)** (property)
    * 
    * Connects an Agent Control Relation to one of the controlling
    * Agents
    */
    agentControlRelationHasSource: prefixer('agentControlRelationHasSource'),

    /**
    * **[agent hierarchical relation has source ](https://www.ica.org/standards/RiC/ontology#agentHierarchicalRelationHasSource)** (property)
    * 
    * Connects an Agent Hierarchical Relation to one of the
    * hierarchically superior Agents
    */
    agentHierarchicalRelationHasSource: prefixer('agentHierarchicalRelationHasSource'),

    /**
    * **[authority relation has source ](https://www.ica.org/standards/RiC/ontology#authorityRelationHasSource)** (property)
    * 
    * Connects an Authority Relation to an Agent that has the
    * authority
    */
    authorityRelationHasSource: prefixer('authorityRelationHasSource'),

    /**
    * **[agent is source of agent control relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentControlRelation)** (property)
    * 
    * Connects a controlling Agent to an Agent Control
    * Relation
    */
    agentIsSourceOfAgentControlRelation: prefixer('agentIsSourceOfAgentControlRelation'),

    /**
    * **[agent control relation has target ](https://www.ica.org/standards/RiC/ontology#agentControlRelationHasTarget)** (property)
    * 
    * Connects an Agent Control Relation to one of the controlled
    * Agents
    */
    agentControlRelationHasTarget: prefixer('agentControlRelationHasTarget'),

    /**
    * **[agent hierarchical relation has target ](https://www.ica.org/standards/RiC/ontology#agentHierarchicalRelationHasTarget)** (property)
    * 
    * Connects an Agent Hierarchical Relation to one of the
    * hierarchically inferior Agents
    */
    agentHierarchicalRelationHasTarget: prefixer('agentHierarchicalRelationHasTarget'),

    /**
    * **[authority relation has target ](https://www.ica.org/standards/RiC/ontology#authorityRelationHasTarget)** (property)
    * 
    * Connects an Authority Relation to a Thing over which the
    * Authority is performed
    */
    authorityRelationHasTarget: prefixer('authorityRelationHasTarget'),

    /**
    * **[agent is target of agent control relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentControlRelation)** (property)
    * 
    * Connects one of the controlled Agents to an Agent Control
    * Relation
    */
    agentIsTargetOfAgentControlRelation: prefixer('agentIsTargetOfAgentControlRelation'),

    /**
    * **[agent has work relation ](https://www.ica.org/standards/RiC/ontology#agentHasWorkRelation)** (property)
    * 
    * Connects an Agent to a Work Relation
    */
    agentHasWorkRelation: prefixer('agentHasWorkRelation'),

    /**
    * **[agent is connected to agent relation ](https://www.ica.org/standards/RiC/ontology#agentIsConnectedToAgentRelation)** (property)
    * 
    * Connects an Agent to an Agent Relation
    */
    agentIsConnectedToAgentRelation: prefixer('agentIsConnectedToAgentRelation'),

    /**
    * **[work relation connects ](https://www.ica.org/standards/RiC/ontology#workRelationConnects)** (property)
    * 
    * Connects a Work Relation to an Agent.
    */
    workRelationConnects: prefixer('workRelationConnects'),

    /**
    * **[agent relation connects ](https://www.ica.org/standards/RiC/ontology#agentRelationConnects)** (property)
    * 
    * Connects an Agent Relation to one of the involved
    * Agents
    */
    agentRelationConnects: prefixer('agentRelationConnects'),

    /**
    * **[relation has source ](https://www.ica.org/standards/RiC/ontology#relationHasSource)** (property)
    * 
    * Connects an n-ary Relation to a Thing that is its
    * source.
    */
    relationHasSource: prefixer('relationHasSource'),

    /**
    * **[agent is source of agent hierarchical relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentHierarchicalRelation)** (property)
    * 
    * Connects a hierarchically superior Agent to an Agent
    * Hierarchical Relation
    */
    agentIsSourceOfAgentHierarchicalRelation: prefixer('agentIsSourceOfAgentHierarchicalRelation'),

    /**
    * **[relation has target ](https://www.ica.org/standards/RiC/ontology#relationHasTarget)** (property)
    * 
    * Connects an n-ary Relation to a Thing that is its
    * target.
    */
    relationHasTarget: prefixer('relationHasTarget'),

    /**
    * **[agent is target of agent hierarchical relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentHierarchicalRelation)** (property)
    * 
    * Connects one of the hierarchically inferior Agents to an Agent
    * Hierarchical Relation
    */
    agentIsTargetOfAgentHierarchicalRelation: prefixer('agentIsTargetOfAgentHierarchicalRelation'),

    /**
    * **[thing is connected to relation ](https://www.ica.org/standards/RiC/ontology#thingIsConnectedToRelation)** (property)
    * 
    * Connects a Thing to a n-ary Relation.
    */
    thingIsConnectedToRelation: prefixer('thingIsConnectedToRelation'),

    /**
    * **[agent is source of agent temporal relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAgentTemporalRelation)** (property)
    * 
    * Connects a predecessor Agent to an Agent Temporal
    * Relation
    */
    agentIsSourceOfAgentTemporalRelation: prefixer('agentIsSourceOfAgentTemporalRelation'),

    /**
    * **[thing is source of temporal relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfTemporalRelation)** (property)
    * 
    * Connects a Thing to a Temporal Relation, when this Thing
    * precedes other Thing(s) in time.
    */
    thingIsSourceOfTemporalRelation: prefixer('thingIsSourceOfTemporalRelation'),

    /**
    * **[agent temporal relation has source ](https://www.ica.org/standards/RiC/ontology#agentTemporalRelationHasSource)** (property)
    * 
    * Connects an Agent Temporal Relation to one of the predecessor
    * Agents
    */
    agentTemporalRelationHasSource: prefixer('agentTemporalRelationHasSource'),

    /**
    * **[agent is source of authority relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfAuthorityRelation)** (property)
    * 
    * Connects an Agent thas has the authority, to an Authority
    * Relation
    */
    agentIsSourceOfAuthorityRelation: prefixer('agentIsSourceOfAuthorityRelation'),

    /**
    * **[agent is source of intellectual property rights relation
        ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfIntellectualPropertyRightsRelation)** (property)
    * 
    * Connects an Agent having the intellectual property rights, to an
    * Intellectual Property Rights Relation
    */
    agentIsSourceOfIntellectualPropertyRightsRelation: prefixer('agentIsSourceOfIntellectualPropertyRightsRelation'),

    /**
    * **[intellectual property rights relation has source ](https://www.ica.org/standards/RiC/ontology#intellectualPropertyRightsRelationHasSource)** (property)
    * 
    * Connects an IntellectualPropertyRightsRelation to one of the
    * Group, Person or Position that holds the rights.
    */
    intellectualPropertyRightsRelationHasSource: prefixer('intellectualPropertyRightsRelationHasSource'),

    /**
    * **[agent is source of management relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfManagementRelation)** (property)
    * 
    * Connects a manager Agent to a Management Relation
    */
    agentIsSourceOfManagementRelation: prefixer('agentIsSourceOfManagementRelation'),

    /**
    * **[management relation has source ](https://www.ica.org/standards/RiC/ontology#managementRelationHasSource)** (property)
    * 
    * Connects a Management Relation to an Agent who is involved as a
    * manager.
    */
    managementRelationHasSource: prefixer('managementRelationHasSource'),

    /**
    * **[agent is source of ownership relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfOwnershipRelation)** (property)
    * 
    * Connects an owner Agent to an Ownership Relation
    */
    agentIsSourceOfOwnershipRelation: prefixer('agentIsSourceOfOwnershipRelation'),

    /**
    * **[ownership relation has source ](https://www.ica.org/standards/RiC/ontology#ownershipRelationHasSource)** (property)
    * 
    * Connects an Ownership Relation to a Person, Group or Position
    * that is involved as an owner.
    */
    ownershipRelationHasSource: prefixer('ownershipRelationHasSource'),

    /**
    * **[agent is source of record resource holding relation ](https://www.ica.org/standards/RiC/ontology#agentIsSourceOfRecordResourceHoldingRelation)** (property)
    * 
    * Connects an Agent that holds a Record Resource or Instantiation,
    * to a Record Resource Holding Relation
    */
    agentIsSourceOfRecordResourceHoldingRelation: prefixer('agentIsSourceOfRecordResourceHoldingRelation'),

    /**
    * **[record resource holding relation has source ](https://www.ica.org/standards/RiC/ontology#recordResourceHoldingRelationHasSource)** (property)
    * 
    * Connects a Record Resource Holding Relation to an Agent (as the
    * holder of a Record Resource or Instantiation).
    */
    recordResourceHoldingRelationHasSource: prefixer('recordResourceHoldingRelationHasSource'),

    /**
    * **[agent is target of agent origination relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentOriginationRelation)** (property)
    * 
    * Connects one of the Agents that created or accumulated the
    * Record resource or Instantiation, to an Agent Origination Relation
    */
    agentIsTargetOfAgentOriginationRelation: prefixer('agentIsTargetOfAgentOriginationRelation'),

    /**
    * **[thing is target of authority relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfAuthorityRelation)** (property)
    * 
    * Connects a Thing (that is under authority of an Agent) to an
    * Authority Relation.
    */
    thingIsTargetOfAuthorityRelation: prefixer('thingIsTargetOfAuthorityRelation'),

    /**
    * **[thing is target of relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfRelation)** (property)
    * 
    * Connects a Thing to a n-ary Relation.
    */
    thingIsTargetOfRelation: prefixer('thingIsTargetOfRelation'),

    /**
    * **[agent is target of agent temporal relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAgentTemporalRelation)** (property)
    * 
    * Connects a successor Agent to an Agent Temporal
    * Relation
    */
    agentIsTargetOfAgentTemporalRelation: prefixer('agentIsTargetOfAgentTemporalRelation'),

    /**
    * **[thing is target of temporal relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfTemporalRelation)** (property)
    * 
    * Connects a Thing (that follows other Thing(s) in time) to a
    * Temporal Relation.
    */
    thingIsTargetOfTemporalRelation: prefixer('thingIsTargetOfTemporalRelation'),

    /**
    * **[agent temporal relation has target ](https://www.ica.org/standards/RiC/ontology#agentTemporalRelationHasTarget)** (property)
    * 
    * Connects an Agent Temporal Relation to one of the successor
    * Agents
    */
    agentTemporalRelationHasTarget: prefixer('agentTemporalRelationHasTarget'),

    /**
    * **[agent is target of authorship relation](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfAuthorshipRelation)** (property)
    * 
    * Connects a Person, Group or Position to an Authorship
    * Relation.
    */
    agentIsTargetOfAuthorshipRelation: prefixer('agentIsTargetOfAuthorshipRelation'),

    /**
    * **[agent is target of creation relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfCreationRelation)** (property)
    * 
    * Connects a creator Agent to a Creation Relation
    */
    agentIsTargetOfCreationRelation: prefixer('agentIsTargetOfCreationRelation'),

    /**
    * **[authorship relation has target](https://www.ica.org/standards/RiC/ontology#authorshipRelationHasTarget)** (property)
    * 
    * Connects an Authorship Relation to one of the author Person,
    * Group or Position.
    */
    authorshipRelationHasTarget: prefixer('authorshipRelationHasTarget'),

    /**
    * **[creation relation has target ](https://www.ica.org/standards/RiC/ontology#creationRelationHasTarget)** (property)
    * 
    * Connects a Creation Relation to one of the creator
    * Agents
    */
    creationRelationHasTarget: prefixer('creationRelationHasTarget'),

    /**
    * **[agent is target of mandate relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfMandateRelation)** (property)
    * 
    * Connects a mandated Agent to a Mandate Relation
    */
    agentIsTargetOfMandateRelation: prefixer('agentIsTargetOfMandateRelation'),

    /**
    * **[thing is target of rule relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfRuleRelation)** (property)
    * 
    * Connects a Thing (that is associated with a Rule) to a Rule
    * Relation.
    */
    thingIsTargetOfRuleRelation: prefixer('thingIsTargetOfRuleRelation'),

    /**
    * **[mandate relation has target ](https://www.ica.org/standards/RiC/ontology#mandateRelationHasTarget)** (property)
    * 
    * Connects a Mandate Relation to an Agent who is given the
    * authority or competencies to act.
    */
    mandateRelationHasTarget: prefixer('mandateRelationHasTarget'),

    /**
    * **[agent is target of performance relation ](https://www.ica.org/standards/RiC/ontology#agentIsTargetOfPerformanceRelation)** (property)
    * 
    * Connects an Agent to a Performance Relation
    */
    agentIsTargetOfPerformanceRelation: prefixer('agentIsTargetOfPerformanceRelation'),

    /**
    * **[performance relation has target ](https://www.ica.org/standards/RiC/ontology#performanceRelationHasTarget)** (property)
    * 
    * Connects a Performance Relation to a performing
    * Agent.
    */
    performanceRelationHasTarget: prefixer('performanceRelationHasTarget'),

    /**
    * **[record resource or instantiation is source of agent origination
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfAgentOriginationRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is created,
    * sent or accumulated) to an Agent Origination Relation.
    */
    recordResourceOrInstantiationIsSourceOfAgentOriginationRelation: prefixer('recordResourceOrInstantiationIsSourceOfAgentOriginationRelation'),

    /**
    * **[relation connects ](https://www.ica.org/standards/RiC/ontology#relationConnects)** (property)
    * 
    * Connects an n-ary Relation to any of the Things
    * involved.
    */
    relationConnects: prefixer('relationConnects'),

    /**
    * **[temporal relation has source ](https://www.ica.org/standards/RiC/ontology#temporalRelationHasSource)** (property)
    * 
    * Connects a Temporal Relation to a Thing that precedes other
    * Thing(s) in time.
    */
    temporalRelationHasSource: prefixer('temporalRelationHasSource'),

    /**
    * **[temporal relation has target ](https://www.ica.org/standards/RiC/ontology#temporalRelationHasTarget)** (property)
    * 
    * Connects a Temporal Relation to a Thing that follows other
    * Thing(s) in time.
    */
    temporalRelationHasTarget: prefixer('temporalRelationHasTarget'),

    /**
    * **[appellation is source of appellation relation ](https://www.ica.org/standards/RiC/ontology#appellationIsSourceOfAppellationRelation)** (property)
    * 
    * Connects an Appellation to an Appellation
    * Relation
    */
    appellationIsSourceOfAppellationRelation: prefixer('appellationIsSourceOfAppellationRelation'),

    /**
    * **[appellation relation has source ](https://www.ica.org/standards/RiC/ontology#appellationRelationHasSource)** (property)
    * 
    * Connects an Appellation Relation to the concerned
    * Appellation
    */
    appellationRelationHasSource: prefixer('appellationRelationHasSource'),

    /**
    * **[appellation relation has target ](https://www.ica.org/standards/RiC/ontology#appellationRelationHasTarget)** (property)
    * 
    * Connects an Appellation Relation to one of the designated
    * Things
    */
    appellationRelationHasTarget: prefixer('appellationRelationHasTarget'),

    /**
    * **[thing is target of appellation relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfAppellationRelation)** (property)
    * 
    * Connects a Thing (that is designated by an Appellation) to an
    * Appellation Relation.
    */
    thingIsTargetOfAppellationRelation: prefixer('thingIsTargetOfAppellationRelation'),

    /**
    * **[relation has context ](https://www.ica.org/standards/RiC/ontology#relationHasContext)** (property)
    * 
    * The secondary entity may be, for instance, a Position or a
    * Role Type.
    */
    relationHasContext: prefixer('relationHasContext'),

    /**
    * **[authorized by ](https://www.ica.org/standards/RiC/ontology#authorizedBy)** (property)
    * 
    * Inverse of 'authorizes' object property
    */
    authorizedBy: prefixer('authorizedBy'),

    /**
    * **[is associated with rule ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithRule)** (property)
    * 
    * Inverse of 'is rule associated with' object
    * property.
    */
    isAssociatedWithRule: prefixer('isAssociatedWithRule'),

    /**
    * **[authorizes](https://www.ica.org/standards/RiC/ontology#authorizes)** (property)
    * 
    * Connects a Mandate to the Agent that the Mandate gives the
    * authority or competencies to act.
    */
    authorizes: prefixer('authorizes'),

    /**
    * **[is rule associated with ](https://www.ica.org/standards/RiC/ontology#isRuleAssociatedWith)** (property)
    * 
    * Connects a Rule to a Thing that is associated with the existence
    * and lifecycle of the Rule.
    */
    isRuleAssociatedWith: prefixer('isRuleAssociatedWith'),

    /**
    * **[authorizing agent ](https://www.ica.org/standards/RiC/ontology#authorizingAgent)** (property)
    * 
    * Connects a Mandate Relation to an Agent that assigns the
    * Mandate.
    */
    authorizingAgent: prefixer('authorizingAgent'),

    /**
    * **[is authorizing agent in mandate relation ](https://www.ica.org/standards/RiC/ontology#isAuthorizingAgentInMandateRelation)** (property)
    * 
    * Connects an Agent that assigns the Mandate, to a Mandate
    * Relation.
    */
    isAuthorizingAgentInMandateRelation: prefixer('isAuthorizingAgentInMandateRelation'),

    /**
    * **[authorship relation has source](https://www.ica.org/standards/RiC/ontology#authorshipRelationHasSource)** (property)
    * 
    * Connects an Authorship Relation to one of the Records involved
    * in the relation.
    */
    authorshipRelationHasSource: prefixer('authorshipRelationHasSource'),

    /**
    * **[creation relation has source ](https://www.ica.org/standards/RiC/ontology#creationRelationHasSource)** (property)
    * 
    * Connects a Creation Relation to one of the created Record
    * Resources or Instantiations
    */
    creationRelationHasSource: prefixer('creationRelationHasSource'),

    /**
    * **[record is source of authorship relation](https://www.ica.org/standards/RiC/ontology#recordIsSourceOfAuthorshipRelation)** (property)
    * 
    * Connects a Record and an Authorship Relation.
    */
    recordIsSourceOfAuthorshipRelation: prefixer('recordIsSourceOfAuthorshipRelation'),

    /**
    * **[child relation has source ](https://www.ica.org/standards/RiC/ontology#childRelationHasSource)** (property)
    * 
    * Connects a Child Relation to a parent Person
    */
    childRelationHasSource: prefixer('childRelationHasSource'),

    /**
    * **[descendance relation has source ](https://www.ica.org/standards/RiC/ontology#descendanceRelationHasSource)** (property)
    * 
    * Connects a Descendance Relation to one of the ancestor
    * Persons
    */
    descendanceRelationHasSource: prefixer('descendanceRelationHasSource'),

    /**
    * **[person is source of child relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfChildRelation)** (property)
    * 
    * Connects a Person (as a parent) to a Child
    * Relation.
    */
    personIsSourceOfChildRelation: prefixer('personIsSourceOfChildRelation'),

    /**
    * **[child relation has target ](https://www.ica.org/standards/RiC/ontology#childRelationHasTarget)** (property)
    * 
    * Connects a Child Relation to a child Person
    */
    childRelationHasTarget: prefixer('childRelationHasTarget'),

    /**
    * **[descendance relation has target ](https://www.ica.org/standards/RiC/ontology#descendanceRelationHasTarget)** (property)
    * 
    * Connects a Descendance Relation to one of the descendant
    * Persons
    */
    descendanceRelationHasTarget: prefixer('descendanceRelationHasTarget'),

    /**
    * **[person is target of child relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfChildRelation)** (property)
    * 
    * Connects a Person (as a child) to a Child
    * Relation.
    */
    personIsTargetOfChildRelation: prefixer('personIsTargetOfChildRelation'),

    /**
    * **[contains or contained](https://www.ica.org/standards/RiC/ontology#containsOrContained)** (property)
    * 
    * Use for connecting two geographical or administrative
    * regions.
    */
    containsOrContained: prefixer('containsOrContained'),

    /**
    * **[has or had part](https://www.ica.org/standards/RiC/ontology#hasOrHadPart)** (property)
    * 
    * The end of existence of a whole/part relation may affect the
    * integrity or nature of the domain entity
    */
    hasOrHadPart: prefixer('hasOrHadPart'),

    /**
    * **[is associated with place ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithPlace)** (property)
    * 
    * Inverse of 'is place associated with' object
    * property.
    */
    isAssociatedWithPlace: prefixer('isAssociatedWithPlace'),

    /**
    * **[is place associated with ](https://www.ica.org/standards/RiC/ontology#isPlaceAssociatedWith)** (property)
    * 
    * Connects a Place to a Thing that Place is associated with the
    * existence and lifecycle of.
    */
    isPlaceAssociatedWith: prefixer('isPlaceAssociatedWith'),

    /**
    * **[is or was contained by](https://www.ica.org/standards/RiC/ontology#isOrWasContainedBy)** (property)
    * 
    * Inverse of 'contains or contained' object
    * property.
    */
    isOrWasContainedBy: prefixer('isOrWasContainedBy'),

    /**
    * **[correspondence relation connects ](https://www.ica.org/standards/RiC/ontology#correspondenceRelationConnects)** (property)
    * 
    * Connects a Correspondence Relation to one of the Persons
    * involved
    */
    correspondenceRelationConnects: prefixer('correspondenceRelationConnects'),

    /**
    * **[knowing relation connects ](https://www.ica.org/standards/RiC/ontology#knowingRelationConnects)** (property)
    * 
    * Connects Knowing Relation to any known Person
    * involved.
    */
    knowingRelationConnects: prefixer('knowingRelationConnects'),

    /**
    * **[person has correspondence relation ](https://www.ica.org/standards/RiC/ontology#personHasCorrespondenceRelation)** (property)
    * 
    * Connects a Person to a Correspondence Relation.
    */
    personHasCorrespondenceRelation: prefixer('personHasCorrespondenceRelation'),

    /**
    * **[record resource or instantiation is source of creation relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfCreationRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is created) to
    * a Creation Relation.
    */
    recordResourceOrInstantiationIsSourceOfCreationRelation: prefixer('recordResourceOrInstantiationIsSourceOfCreationRelation'),

    /**
    * **[creation with role ](https://www.ica.org/standards/RiC/ontology#creationWithRole)** (property)
    * 
    * Connects a Creation Relation to the Role Type that the creator
    * Agent(s) has in the creation process
    */
    creationWithRole: prefixer('creationWithRole'),

    /**
    * **[role is context of creation relation ](https://www.ica.org/standards/RiC/ontology#roleIsContextOfCreationRelation)** (property)
    * 
    * Connects a Role Type to a Creation Relation (this Role Type
    * being the specific role played by the creating Person in the context of this
    * Relation).
    */
    roleIsContextOfCreationRelation: prefixer('roleIsContextOfCreationRelation'),

    /**
    * **[derivation relation has source ](https://www.ica.org/standards/RiC/ontology#derivationRelationHasSource)** (property)
    * 
    * Connects a Derivation Relation to the Instantiation from which
    * one or more Instantiations is derived.
    */
    derivationRelationHasSource: prefixer('derivationRelationHasSource'),

    /**
    * **[instantiation to instantiation relation connects ](https://www.ica.org/standards/RiC/ontology#instantiationToInstantiationRelationConnects)** (property)
    * 
    * Connects an Instantiation to Instantiation Relation to one of
    * the related Instantiations.
    */
    instantiationToInstantiationRelationConnects: prefixer('instantiationToInstantiationRelationConnects'),

    /**
    * **[instantiation is source of derivation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsSourceOfDerivationRelation)** (property)
    * 
    * Connects an Instantiation (from which at least one Instantiation
    * is derived) to a Derivation Relation.
    */
    instantiationIsSourceOfDerivationRelation: prefixer('instantiationIsSourceOfDerivationRelation'),

    /**
    * **[derivation relation has target ](https://www.ica.org/standards/RiC/ontology#derivationRelationHasTarget)** (property)
    * 
    * Connects a Derivation Relation to one of the derived
    * Instantiations
    */
    derivationRelationHasTarget: prefixer('derivationRelationHasTarget'),

    /**
    * **[instantiation is target of derivation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfDerivationRelation)** (property)
    * 
    * Connects a derived Instantiation to a Derivation
    * Relation.
    */
    instantiationIsTargetOfDerivationRelation: prefixer('instantiationIsTargetOfDerivationRelation'),

    /**
    * **[family relation connects ](https://www.ica.org/standards/RiC/ontology#familyRelationConnects)** (property)
    * 
    * Connects a Family Relation to a Person.
    */
    familyRelationConnects: prefixer('familyRelationConnects'),

    /**
    * **[person is source of descendance relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfDescendanceRelation)** (property)
    * 
    * Connects a Person (as an ancestor) to a Descendance
    * Relation.
    */
    personIsSourceOfDescendanceRelation: prefixer('personIsSourceOfDescendanceRelation'),

    /**
    * **[person is target of descendance relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfDescendanceRelation)** (property)
    * 
    * Connects a Person (as a descendant) to a Descendance
    * Relation.
    */
    personIsTargetOfDescendanceRelation: prefixer('personIsTargetOfDescendanceRelation'),

    /**
    * **[describes or described](https://www.ica.org/standards/RiC/ontology#describesOrDescribed)** (property)
    * 
    * Can be used, among other situations, for specifying that some
    * finding aid (a Record that has Documentary Form Type Finding Aid) describes some Record
    * Set.
    */
    describesOrDescribed: prefixer('describesOrDescribed'),

    /**
    * **[has or had subject](https://www.ica.org/standards/RiC/ontology#hasOrHadSubject)** (property)
    * 
    * Connects a Record Resource to a Thing that is or was its
    * subject.
    */
    hasOrHadSubject: prefixer('hasOrHadSubject'),

    /**
    * **[is or was described by](https://www.ica.org/standards/RiC/ontology#isOrWasDescribedBy)** (property)
    * 
    * Inverse of 'describes or described' object
    * property.
    */
    isOrWasDescribedBy: prefixer('isOrWasDescribedBy'),

    /**
    * **[documented by](https://www.ica.org/standards/RiC/ontology#documentedBy)** (property)
    * 
    * Inverse of 'documents' object property.
    */
    documentedBy: prefixer('documentedBy'),

    /**
    * **[results or resulted in](https://www.ica.org/standards/RiC/ontology#resultsOrResultedIn)** (property)
    * 
    * Connects an Event to a Thing that results or resulted from the
    * Event.
    */
    resultsOrResultedIn: prefixer('resultsOrResultedIn'),

    /**
    * **[documents](https://www.ica.org/standards/RiC/ontology#documents)** (property)
    * 
    * Connects a Record Resource or an Instantiation to the Activity
    * that generates the Record Resource or Instantiation.
    */
    documents: prefixer('documents'),

    /**
    * **[results or resulted from](https://www.ica.org/standards/RiC/ontology#resultsOrResultedFrom)** (property)
    * 
    * Inverse of 'results or resulted in' object
    * property.
    */
    resultsOrResultedFrom: prefixer('resultsOrResultedFrom'),

    /**
    * **[event is source of event relation ](https://www.ica.org/standards/RiC/ontology#eventIsSourceOfEventRelation)** (property)
    * 
    * Connects an Event to an Event Relation
    */
    eventIsSourceOfEventRelation: prefixer('eventIsSourceOfEventRelation'),

    /**
    * **[event relation has source ](https://www.ica.org/standards/RiC/ontology#eventRelationHasSource)** (property)
    * 
    * Connects an Event Relation to an Event
    */
    eventRelationHasSource: prefixer('eventRelationHasSource'),

    /**
    * **[event relation has target ](https://www.ica.org/standards/RiC/ontology#eventRelationHasTarget)** (property)
    * 
    * Connects an Event Relation to an associated Thing
    */
    eventRelationHasTarget: prefixer('eventRelationHasTarget'),

    /**
    * **[thing is target of event relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfEventRelation)** (property)
    * 
    * Connects a Thing (that is associated with an Event) to an Event
    * Relation.
    */
    thingIsTargetOfEventRelation: prefixer('thingIsTargetOfEventRelation'),

    /**
    * **[exists or existed in](https://www.ica.org/standards/RiC/ontology#existsOrExistedIn)** (property)
    * 
    * Connects a Position to a Group in which that Position exists or
    * existed, or that is defined by that Group�s organizational structure.
    */
    existsOrExistedIn: prefixer('existsOrExistedIn'),

    /**
    * **[is agent associated with agent ](https://www.ica.org/standards/RiC/ontology#isAgentAssociatedWithAgent)** (property)
    * 
    * Use to connect two Agents only if it is not possible to be
    * more accurate and use a narrower Agent to Agent relation, e.g. ‘has work relation
    * with’.
    */
    isAgentAssociatedWithAgent: prefixer('isAgentAssociatedWithAgent'),

    /**
    * **[has or had position](https://www.ica.org/standards/RiC/ontology#hasOrHadPosition)** (property)
    * 
    * Inverse of 'exists or existed in' object
    * property.
    */
    hasOrHadPosition: prefixer('hasOrHadPosition'),

    /**
    * **[expresses or expressed](https://www.ica.org/standards/RiC/ontology#expressesOrExpressed)** (property)
    * 
    * Inverse of 'is or was expressed by' object
    * property.
    */
    expressesOrExpressed: prefixer('expressesOrExpressed'),

    /**
    * **[is or was expressed by](https://www.ica.org/standards/RiC/ontology#isOrWasExpressedBy)** (property)
    * 
    * Connects a Rule to a Record Resource that expresses or expressed
    * the Rule.
    */
    isOrWasExpressedBy: prefixer('isOrWasExpressedBy'),

    /**
    * **[person has family relation ](https://www.ica.org/standards/RiC/ontology#personHasFamilyRelation)** (property)
    * 
    * Connects a Person to a Family Relation.
    */
    personHasFamilyRelation: prefixer('personHasFamilyRelation'),

    /**
    * **[follows in time](https://www.ica.org/standards/RiC/ontology#followsInTime)** (property)
    * 
    * Inverse of 'precedes in time' object property.
    */
    followsInTime: prefixer('followsInTime'),

    /**
    * **[follows or followed](https://www.ica.org/standards/RiC/ontology#followsOrFollowed)** (property)
    * 
    * Inverse of 'precedesOrPreceded' object property.
    */
    followsOrFollowed: prefixer('followsOrFollowed'),

    /**
    * **[precedes in time](https://www.ica.org/standards/RiC/ontology#precedesInTime)** (property)
    * 
    * There may actually be zero to many intermediate Entities,
    * ignored or unknown, in the chronological sequence between the two connected
    * Entities.
    */
    precedesInTime: prefixer('precedesInTime'),

    /**
    * **[is related to ](https://www.ica.org/standards/RiC/ontology#isRelatedTo)** (property)
    * 
    * The most generic object property. Connects an Thing to any other
    * Thing This is a symmetric object property.
    */
    isRelatedTo: prefixer('isRelatedTo'),

    /**
    * **[precedes or preceded](https://www.ica.org/standards/RiC/ontology#precedesOrPreceded)** (property)
    * 
    * The relation does not specify by itself what criteria are used
    * for ordering the sequence. There may actually be zero to many intermediate Entities,
    * ignored or unkown, in the sequence between the two connected Things. Can be used, for
    * example, for specifying that some Record 'precedes' (has next) some Record within a
    * Record Set.
    */
    precedesOrPreceded: prefixer('precedesOrPreceded'),

    /**
    * **[functional equivalence relation connects ](https://www.ica.org/standards/RiC/ontology#functionalEquivalenceRelationConnects)** (property)
    * 
    * Connects a Functional Equivalence Relation to one of the
    * functionally equivalent Instantiations.
    */
    functionalEquivalenceRelationConnects: prefixer('functionalEquivalenceRelationConnects'),

    /**
    * **[instantiation is connected to functional equivalence relation
        ](https://www.ica.org/standards/RiC/ontology#instantiationIsConnectedToFunctionalEquivalenceRelation)** (property)
    * 
    * Connects an Instantiation to a Functional Equivalence
    * Relation
    */
    instantiationIsConnectedToFunctionalEquivalenceRelation: prefixer('instantiationIsConnectedToFunctionalEquivalenceRelation'),

    /**
    * **[group is source of group subdivision relation ](https://www.ica.org/standards/RiC/ontology#groupIsSourceOfGroupSubdivisionRelation)** (property)
    * 
    * Connects the Group that has at least a subdivision, to a Group
    * Subdivision Relation
    */
    groupIsSourceOfGroupSubdivisionRelation: prefixer('groupIsSourceOfGroupSubdivisionRelation'),

    /**
    * **[thing is source of whole part relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfWholePartRelation)** (property)
    * 
    * Connects a Thing to a Whole Part Relation, when this Thing has
    * Part other Thing(s).
    */
    thingIsSourceOfWholePartRelation: prefixer('thingIsSourceOfWholePartRelation'),

    /**
    * **[group subdivision relation has source ](https://www.ica.org/standards/RiC/ontology#groupSubdivisionRelationHasSource)** (property)
    * 
    * Connects a Group Subdivision Relation to the Group that has
    * subdivisions
    */
    groupSubdivisionRelationHasSource: prefixer('groupSubdivisionRelationHasSource'),

    /**
    * **[group is source of membership relation ](https://www.ica.org/standards/RiC/ontology#groupIsSourceOfMembershipRelation)** (property)
    * 
    * Connects the Group (that has one to many members) to a
    * Membership Relation
    */
    groupIsSourceOfMembershipRelation: prefixer('groupIsSourceOfMembershipRelation'),

    /**
    * **[membership relation has source ](https://www.ica.org/standards/RiC/ontology#membershipRelationHasSource)** (property)
    * 
    * Connects a Membership Relation to the Group that has
    * member(s).
    */
    membershipRelationHasSource: prefixer('membershipRelationHasSource'),

    /**
    * **[group is target of group subdivision relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfGroupSubdivisionRelation)** (property)
    * 
    * Connects a Group that is a subdivision, to a Group Subdivision
    * Relation
    */
    groupIsTargetOfGroupSubdivisionRelation: prefixer('groupIsTargetOfGroupSubdivisionRelation'),

    /**
    * **[thing is target of whole part relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfWholePartRelation)** (property)
    * 
    * Connects a Thing to a Whole Part Relation, when this Thing is
    * Part of another Thing.
    */
    thingIsTargetOfWholePartRelation: prefixer('thingIsTargetOfWholePartRelation'),

    /**
    * **[group subdivision relation has target ](https://www.ica.org/standards/RiC/ontology#groupSubdivisionRelationHasTarget)** (property)
    * 
    * Connects a Group Subdivision Relation to one of the Groups that
    * is a subdivision
    */
    groupSubdivisionRelationHasTarget: prefixer('groupSubdivisionRelationHasTarget'),

    /**
    * **[group is target of leadership relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfLeadershipRelation)** (property)
    * 
    * Connects a Group (which has a leader) to a Leadership
    * Relation
    */
    groupIsTargetOfLeadershipRelation: prefixer('groupIsTargetOfLeadershipRelation'),

    /**
    * **[leadership relation has target ](https://www.ica.org/standards/RiC/ontology#leadershipRelationHasTarget)** (property)
    * 
    * Connects a Leadership Relation to a lead Group.
    */
    leadershipRelationHasTarget: prefixer('leadershipRelationHasTarget'),

    /**
    * **[group is target of position to group relation ](https://www.ica.org/standards/RiC/ontology#groupIsTargetOfPositionToGroupRelation)** (property)
    * 
    * Connects the Group (in which a Position exists) to a Position To
    * Group Relation
    */
    groupIsTargetOfPositionToGroupRelation: prefixer('groupIsTargetOfPositionToGroupRelation'),

    /**
    * **[position to group relation has target ](https://www.ica.org/standards/RiC/ontology#positionToGroupRelationHasTarget)** (property)
    * 
    * Connects a Position to Group Relation to a Group (in which a
    * Position exists).
    */
    positionToGroupRelationHasTarget: prefixer('positionToGroupRelationHasTarget'),

    /**
    * **[whole part relation has source ](https://www.ica.org/standards/RiC/ontology#wholePartRelationHasSource)** (property)
    * 
    * Connects a Whole Part Relation to the Thing that has some
    * parts.
    */
    wholePartRelationHasSource: prefixer('wholePartRelationHasSource'),

    /**
    * **[whole part relation has target ](https://www.ica.org/standards/RiC/ontology#wholePartRelationHasTarget)** (property)
    * 
    * Connects a Whole Part Relation to a Thing that is a
    * part.
    */
    wholePartRelationHasTarget: prefixer('wholePartRelationHasTarget'),

    /**
    * **[has accumulator](https://www.ica.org/standards/RiC/ontology#hasAccumulator)** (property)
    * 
    * Connects a Record Resource or an Instantiation to the Agent that
    * accumulates it, be it intentionally (collecting) or not (receiving in the course of its
    * activities).
    */
    hasAccumulator: prefixer('hasAccumulator'),

    /**
    * **[has provenance ](https://www.ica.org/standards/RiC/ontology#hasProvenance)** (property)
    * 
    * Connects a Record Resource or an Instantiation to an Agent that
    * creates or accumulates the Record Resource, receives it, or sends it.
    */
    hasProvenance: prefixer('hasProvenance'),

    /**
    * **[is accumulator of](https://www.ica.org/standards/RiC/ontology#isAccumulatorOf)** (property)
    * 
    * Inverse of 'has accumulator' object property.
    */
    isAccumulatorOf: prefixer('isAccumulatorOf'),

    /**
    * **[has activity type](https://www.ica.org/standards/RiC/ontology#hasActivityType)** (property)
    * 
    * Connects an Activity to an Activity Type that categorizes
    * it.
    */
    hasActivityType: prefixer('hasActivityType'),

    /**
    * **[has or had category](https://www.ica.org/standards/RiC/ontology#hasOrHadCategory)** (property)
    * 
    * Connects a Thing to a Type that categorizes or categorized
    * it.
    */
    hasOrHadCategory: prefixer('hasOrHadCategory'),

    /**
    * **[is activity type of](https://www.ica.org/standards/RiC/ontology#isActivityTypeOf)** (property)
    * 
    * Connects an Activity Type to an Activity that it
    * categorizes.
    */
    isActivityTypeOf: prefixer('isActivityTypeOf'),

    /**
    * **[has addressee](https://www.ica.org/standards/RiC/ontology#hasAddressee)** (property)
    * 
    * The identity of the addressee is (usually) evidenced by the
    * Record Resource or Instantiation itself.
    */
    hasAddressee: prefixer('hasAddressee'),

    /**
    * **[is addressee of ](https://www.ica.org/standards/RiC/ontology#isAddresseeOf)** (property)
    * 
    * Inverse of 'has addressee' object property.
    */
    isAddresseeOf: prefixer('isAddresseeOf'),

    /**
    * **[has ancestor](https://www.ica.org/standards/RiC/ontology#hasAncestor)** (property)
    * 
    * Inverse of 'has descendant' object property.
    */
    hasAncestor: prefixer('hasAncestor'),

    /**
    * **[has family association with](https://www.ica.org/standards/RiC/ontology#hasFamilyAssociationWith)** (property)
    * 
    * Connects two Persons that have some type of family link, i.e.
    * belong to the same family. This relation is symmetric.
    */
    hasFamilyAssociationWith: prefixer('hasFamilyAssociationWith'),

    /**
    * **[is successor of](https://www.ica.org/standards/RiC/ontology#isSuccessorOf)** (property)
    * 
    * Inverse of 'has successor' object property.
    */
    isSuccessorOf: prefixer('isSuccessorOf'),

    /**
    * **[has descendant](https://www.ica.org/standards/RiC/ontology#hasDescendant)** (property)
    * 
    * Connects a Person to one of their descendants.
    */
    hasDescendant: prefixer('hasDescendant'),

    /**
    * **[has author](https://www.ica.org/standards/RiC/ontology#hasAuthor)** (property)
    * 
    * To be used for any contribution to the content of a Record.
    * Includes (of course) the Person, Group or Position in whose name or by whose command the
    * content may have been formulated and first instantiated (e.g. the person who signed
    * it).
    */
    hasAuthor: prefixer('hasAuthor'),

    /**
    * **[has creator](https://www.ica.org/standards/RiC/ontology#hasCreator)** (property)
    * 
    * Covers the definition of author in diplomatics, and any
    * contribution to the intellectual content of a Record Resource.
    */
    hasCreator: prefixer('hasCreator'),

    /**
    * **[is author of](https://www.ica.org/standards/RiC/ontology#isAuthorOf)** (property)
    * 
    * Inverse of 'has author' object property.
    */
    isAuthorOf: prefixer('isAuthorOf'),

    /**
    * **[has beginning date ](https://www.ica.org/standards/RiC/ontology#hasBeginningDate)** (property)
    * 
    * Inverse of 'is beginning date of' object property
    */
    hasBeginningDate: prefixer('hasBeginningDate'),

    /**
    * **[is associated with date ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithDate)** (property)
    * 
    * Inverse of 'is date associated with' object
    * property.
    */
    isAssociatedWithDate: prefixer('isAssociatedWithDate'),

    /**
    * **[is beginning date of ](https://www.ica.org/standards/RiC/ontology#isBeginningDateOf)** (property)
    * 
    * Connects a Date to a Thing that came into existence on that
    * Date.
    */
    isBeginningDateOf: prefixer('isBeginningDateOf'),

    /**
    * **[has birth date ](https://www.ica.org/standards/RiC/ontology#hasBirthDate)** (property)
    * 
    * Inverse of 'is birth date of' object property
    */
    hasBirthDate: prefixer('hasBirthDate'),

    /**
    * **[is birth date of ](https://www.ica.org/standards/RiC/ontology#isBirthDateOf)** (property)
    * 
    * Connects a Date to a Person that was born on that
    * Date.
    */
    isBirthDateOf: prefixer('isBirthDateOf'),

    /**
    * **[has carrier type](https://www.ica.org/standards/RiC/ontology#hasCarrierType)** (property)
    * 
    * Connects an Instantiation to a Carrier Type which categorizes
    * its carrier.
    */
    hasCarrierType: prefixer('hasCarrierType'),

    /**
    * **[is carrier type of](https://www.ica.org/standards/RiC/ontology#isCarrierTypeOf)** (property)
    * 
    * Connects a Carrier Type to an Instantiation whose carrier it
    * categorizes.
    */
    isCarrierTypeOf: prefixer('isCarrierTypeOf'),

    /**
    * **[has child](https://www.ica.org/standards/RiC/ontology#hasChild)** (property)
    * 
    * Connects a Person to one of their children.
    */
    hasChild: prefixer('hasChild'),

    /**
    * **[is child of](https://www.ica.org/standards/RiC/ontology#isChildOf)** (property)
    * 
    * Inverse of 'has child' object property.
    */
    isChildOf: prefixer('isChildOf'),

    /**
    * **[has collector](https://www.ica.org/standards/RiC/ontology#hasCollector)** (property)
    * 
    * Connects a Record Resource or an Instantiation to the Agent that
    * collects it intentionally (is a collector).
    */
    hasCollector: prefixer('hasCollector'),

    /**
    * **[is collector of](https://www.ica.org/standards/RiC/ontology#isCollectorOf)** (property)
    * 
    * Inverse of 'has collector' object property.
    */
    isCollectorOf: prefixer('isCollectorOf'),

    /**
    * **[has content of type](https://www.ica.org/standards/RiC/ontology#hasContentOfType)** (property)
    * 
    * Connects a Record or a Record Part to a Content Type which
    * categorizes its content.
    */
    hasContentOfType: prefixer('hasContentOfType'),

    /**
    * **[is content type of](https://www.ica.org/standards/RiC/ontology#isContentTypeOf)** (property)
    * 
    * Connects a Content Type to a Record or Record Part whose content
    * it categorizes.
    */
    isContentTypeOf: prefixer('isContentTypeOf'),

    /**
    * **[has copy ](https://www.ica.org/standards/RiC/ontology#hasCopy)** (property)
    * 
    * Connects a Record Resource to a copy of that Record
    * Resource.
    */
    hasCopy: prefixer('hasCopy'),

    /**
    * **[has genetic link to record resource ](https://www.ica.org/standards/RiC/ontology#hasGeneticLinkToRecordResource)** (property)
    * 
    * Use to connect two Record Resources only if it is not possible
    * to be more accurate and specify a narrower, asymmetric relation, e.g. ‘is original
    * of’.
    */
    hasGeneticLinkToRecordResource: prefixer('hasGeneticLinkToRecordResource'),

    /**
    * **[is copy of](https://www.ica.org/standards/RiC/ontology#isCopyOf)** (property)
    * 
    * Inverse of 'has copy' object property.
    */
    isCopyOf: prefixer('isCopyOf'),

    /**
    * **[is creator of](https://www.ica.org/standards/RiC/ontology#isCreatorOf)** (property)
    * 
    * Inverse of 'has creator' object property.
    */
    isCreatorOf: prefixer('isCreatorOf'),

    /**
    * **[has death date ](https://www.ica.org/standards/RiC/ontology#hasDeathDate)** (property)
    * 
    * Inverse of 'is death date of' object property
    */
    hasDeathDate: prefixer('hasDeathDate'),

    /**
    * **[has end date ](https://www.ica.org/standards/RiC/ontology#hasEndDate)** (property)
    * 
    * Inverse of 'is end date of' object property.
    */
    hasEndDate: prefixer('hasEndDate'),

    /**
    * **[is death date of ](https://www.ica.org/standards/RiC/ontology#isDeathDateOf)** (property)
    * 
    * Connects a Date to a Person who died on that
    * Date.
    */
    isDeathDateOf: prefixer('isDeathDateOf'),

    /**
    * **[has derived instantiation ](https://www.ica.org/standards/RiC/ontology#hasDerivedInstantiation)** (property)
    * 
    * Connects an Instantiation to an Instantiation that is derived
    * from it.
    */
    hasDerivedInstantiation: prefixer('hasDerivedInstantiation'),

    /**
    * **[is instantiation associated with instantiation ](https://www.ica.org/standards/RiC/ontology#isInstantiationAssociatedWithInstantiation)** (property)
    * 
    * Connects two Instantiations. This object property is
    * symmetric.
    */
    isInstantiationAssociatedWithInstantiation: prefixer('isInstantiationAssociatedWithInstantiation'),

    /**
    * **[is derived from instantiation ](https://www.ica.org/standards/RiC/ontology#isDerivedFromInstantiation)** (property)
    * 
    * Inverse of 'has derived instantiation' object
    * property.
    */
    isDerivedFromInstantiation: prefixer('isDerivedFromInstantiation'),

    /**
    * **[has successor](https://www.ica.org/standards/RiC/ontology#hasSuccessor)** (property)
    * 
    * There may be zero to many intermediate Agents , ignored or
    * unknown, between the two connected Agents. Can be used when there is a transfer of
    * function from the first Agent to the second Agent.
    */
    hasSuccessor: prefixer('hasSuccessor'),

    /**
    * **[has documentary form type](https://www.ica.org/standards/RiC/ontology#hasDocumentaryFormType)** (property)
    * 
    * Connects a Record or Record Part to its Documentary Form
    * Type.
    */
    hasDocumentaryFormType: prefixer('hasDocumentaryFormType'),

    /**
    * **[is documentary form type of](https://www.ica.org/standards/RiC/ontology#isDocumentaryFormTypeOf)** (property)
    * 
    * Connects a Documentary Form Type to a Record or Record Part that
    * it categorizes.
    */
    isDocumentaryFormTypeOf: prefixer('isDocumentaryFormTypeOf'),

    /**
    * **[has draft ](https://www.ica.org/standards/RiC/ontology#hasDraft)** (property)
    * 
    * Inverse of 'is draft of' object property.
    */
    hasDraft: prefixer('hasDraft'),

    /**
    * **[is draft of ](https://www.ica.org/standards/RiC/ontology#isDraftOf)** (property)
    * 
    * Connects a draft to the final version of a
    * Record.
    */
    isDraftOf: prefixer('isDraftOf'),

    /**
    * **[is end date of ](https://www.ica.org/standards/RiC/ontology#isEndDateOf)** (property)
    * 
    * Connects a Date to a Thing whose existence ended on that
    * Date.
    */
    isEndDateOf: prefixer('isEndDateOf'),

    /**
    * **[has event type](https://www.ica.org/standards/RiC/ontology#hasEventType)** (property)
    * 
    * Connects an Event to an Event Type which categorizes
    * it.
    */
    hasEventType: prefixer('hasEventType'),

    /**
    * **[is event type of](https://www.ica.org/standards/RiC/ontology#isEventTypeOf)** (property)
    * 
    * Connects an Event Type to an Event that is
    * categorizes.
    */
    isEventTypeOf: prefixer('isEventTypeOf'),

    /**
    * **[has extent](https://www.ica.org/standards/RiC/ontology#hasExtent)** (property)
    * 
    * Connects a Record Resource or Instantiation to an Extent
    */
    hasExtent: prefixer('hasExtent'),

    /**
    * **[is extent of](https://www.ica.org/standards/RiC/ontology#isExtentOf)** (property)
    * 
    * Connects an Extent to a Record Resource or Instantiation
    */
    isExtentOf: prefixer('isExtentOf'),

    /**
    * **[has extent type](https://www.ica.org/standards/RiC/ontology#hasExtentType)** (property)
    * 
    * Connects an Extent to an Extent Type that categorizes what is being
    * measured.
    */
    hasExtentType: prefixer('hasExtentType'),

    /**
    * **[is extent type of](https://www.ica.org/standards/RiC/ontology#isExtentTypeOf)** (property)
    * 
    * Connects an Extent Type to an Extent that it
    * categorizes.
    */
    isExtentTypeOf: prefixer('isExtentTypeOf'),

    /**
    * **[has family type](https://www.ica.org/standards/RiC/ontology#hasFamilyType)** (property)
    * 
    * Connects a Family to a Family Type that categorizes
    * it.
    */
    hasFamilyType: prefixer('hasFamilyType'),

    /**
    * **[is family type of](https://www.ica.org/standards/RiC/ontology#isFamilyTypeOf)** (property)
    * 
    * Connects a Family Type to a Family that is
    * categorizes.
    */
    isFamilyTypeOf: prefixer('isFamilyTypeOf'),

    /**
    * **[is record resource associated with record resource ](https://www.ica.org/standards/RiC/ontology#isRecordResourceAssociatedWithRecordResource)** (property)
    * 
    * Connects two Record Resources. This object property is
    * symmetric.
    */
    isRecordResourceAssociatedWithRecordResource: prefixer('isRecordResourceAssociatedWithRecordResource'),

    /**
    * **[has identifier type](https://www.ica.org/standards/RiC/ontology#hasIdentifierType)** (property)
    * 
    * Connects an Identifier and an Identifier Type that categorizes
    * it.
    */
    hasIdentifierType: prefixer('hasIdentifierType'),

    /**
    * **[is identifier type of](https://www.ica.org/standards/RiC/ontology#isIdentifierTypeOf)** (property)
    * 
    * Connects an Identifier Type and an Identifier that it
    * categorizes.
    */
    isIdentifierTypeOf: prefixer('isIdentifierTypeOf'),

    /**
    * **[has instantiation](https://www.ica.org/standards/RiC/ontology#hasInstantiation)** (property)
    * 
    * Connects a Record Resource to one of its
    * Instantiations.
    */
    hasInstantiation: prefixer('hasInstantiation'),

    /**
    * **[is instantiation of](https://www.ica.org/standards/RiC/ontology#isInstantiationOf)** (property)
    * 
    * Inverse of 'has instantiation' object property.
    */
    isInstantiationOf: prefixer('isInstantiationOf'),

    /**
    * **[has modification date ](https://www.ica.org/standards/RiC/ontology#hasModificationDate)** (property)
    * 
    * Inverse of 'is modification date of' object
    * property.
    */
    hasModificationDate: prefixer('hasModificationDate'),

    /**
    * **[is modification date of ](https://www.ica.org/standards/RiC/ontology#isModificationDateOf)** (property)
    * 
    * Connects a Date to a Thing that was modified on that
    * Date.
    */
    isModificationDateOf: prefixer('isModificationDateOf'),

    /**
    * **[has or had agent name](https://www.ica.org/standards/RiC/ontology#hasOrHadAgentName)** (property)
    * 
    * Connects an Agent and (one of) its present or past Agent
    * Name.
    */
    hasOrHadAgentName: prefixer('hasOrHadAgentName'),

    /**
    * **[has or had name](https://www.ica.org/standards/RiC/ontology#hasOrHadName)** (property)
    * 
    * Connects a Thing to one of its past or present
    * Names.
    */
    hasOrHadName: prefixer('hasOrHadName'),

    /**
    * **[is or was agent name of](https://www.ica.org/standards/RiC/ontology#isOrWasAgentNameOf)** (property)
    * 
    * Connects an Agent Name to an Agent it designates or
    * designated.
    */
    isOrWasAgentNameOf: prefixer('isOrWasAgentNameOf'),

    /**
    * **[has or had all members with category](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithCategory)** (property)
    * 
    * Connects a Record Set and a Category (Type) to which all the
    * Records or Record Parts that are or were included in the Record Set
    * belong.
    */
    hasOrHadAllMembersWithCategory: prefixer('hasOrHadAllMembersWithCategory'),

    /**
    * **[is or was category of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOfAllMembersOf)** (property)
    * 
    * Connects a Category (Type) and a Record Set whose all present or
    * past Record or Record Part members belong to that Category.
    */
    isOrWasCategoryOfAllMembersOf: prefixer('isOrWasCategoryOfAllMembersOf'),

    /**
    * **[has of had all members with content type](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithContentType)** (property)
    * 
    * Connects a Record Set and a Content Type that categorizes all
    * the Records or Record Parts that are or were included in the Record Set.
    */
    hasOrHadAllMembersWithContentType: prefixer('hasOrHadAllMembersWithContentType'),

    /**
    * **[is or was content type of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasContentTypeOfAllMembersOf)** (property)
    * 
    * Connects a Content Type and a Record Set whose all past or
    * present Record or Record Part members have that Content Type.
    */
    isOrWasContentTypeOfAllMembersOf: prefixer('isOrWasContentTypeOfAllMembersOf'),

    /**
    * **[has of had all members with documentary form type](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithDocumentaryFormType)** (property)
    * 
    * Connects a Record Set and a Documentary Form Type that
    * categorizes all the Records or Record Parts that are or were included in the Record
    * Set.
    */
    hasOrHadAllMembersWithDocumentaryFormType: prefixer('hasOrHadAllMembersWithDocumentaryFormType'),

    /**
    * **[is or was documentary form type of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasDocumentaryFormTypeOfAllMembersOf)** (property)
    * 
    * Connects a Documentary Form Type and a Record Set whose all past
    * or present Record or Record Part members have that Documentary Form Type.
    */
    isOrWasDocumentaryFormTypeOfAllMembersOf: prefixer('isOrWasDocumentaryFormTypeOfAllMembersOf'),

    /**
    * **[has of had all members with language](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithLanguage)** (property)
    * 
    * Connects a Record Set and a Language used by all the Records or
    * Record Parts that are or were included in the Record Set.
    */
    hasOrHadAllMembersWithLanguage: prefixer('hasOrHadAllMembersWithLanguage'),

    /**
    * **[is or was language of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOfAllMembersOf)** (property)
    * 
    * Connects a Language and a Record Set whose all present or past
    * Record or Record Part members use that Language.
    */
    isOrWasLanguageOfAllMembersOf: prefixer('isOrWasLanguageOfAllMembersOf'),

    /**
    * **[has of had all members with legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithLegalStatus)** (property)
    * 
    * Connects a Record Set and a Legal Status that categorizes all
    * the Records or Record Parts that are or were included in the Record Set.
    */
    hasOrHadAllMembersWithLegalStatus: prefixer('hasOrHadAllMembersWithLegalStatus'),

    /**
    * **[is or was legal status of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOfAllMembersOf)** (property)
    * 
    * Connects a Legal Status and a Record Set whose all past or
    * present Record or Record Part members have that Legal Status.
    */
    isOrWasLegalStatusOfAllMembersOf: prefixer('isOrWasLegalStatusOfAllMembersOf'),

    /**
    * **[has of had all members with record state](https://www.ica.org/standards/RiC/ontology#hasOrHadAllMembersWithRecordState)** (property)
    * 
    * Connects a Record Set and a Record State that categorizes all
    * the Records or Record Parts that are or were included in the Record Set.
    */
    hasOrHadAllMembersWithRecordState: prefixer('hasOrHadAllMembersWithRecordState'),

    /**
    * **[is or was record state of all members of](https://www.ica.org/standards/RiC/ontology#isOrWasRecordStateOfAllMembersOf)** (property)
    * 
    * Connects a Record State and a Record Set whose all past or
    * present Record or Record Part members have that Record State.
    */
    isOrWasRecordStateOfAllMembersOf: prefixer('isOrWasRecordStateOfAllMembersOf'),

    /**
    * **[has or had appellation](https://www.ica.org/standards/RiC/ontology#hasOrHadAppellation)** (property)
    * 
    * Connects a Thing to an Appellation that is or was used for
    * designating it.
    */
    hasOrHadAppellation: prefixer('hasOrHadAppellation'),

    /**
    * **[is or was appellation of](https://www.ica.org/standards/RiC/ontology#isOrWasAppellationOf)** (property)
    * 
    * Connects an Appellation to a Thing that it designates or
    * designated.
    */
    isOrWasAppellationOf: prefixer('isOrWasAppellationOf'),

    /**
    * **[has or had authority over](https://www.ica.org/standards/RiC/ontology#hasOrHadAuthorityOver)** (property)
    * 
    * Connects an Agent to a Thing the Agent has or had authority
    * over.
    */
    hasOrHadAuthorityOver: prefixer('hasOrHadAuthorityOver'),

    /**
    * **[is or was under authority of](https://www.ica.org/standards/RiC/ontology#isOrWasUnderAuthorityOf)** (property)
    * 
    * Inverse of 'has or had authority over' object
    * property.
    */
    isOrWasUnderAuthorityOf: prefixer('isOrWasUnderAuthorityOf'),

    /**
    * **[is or was category of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOf)** (property)
    * 
    * Connects a Type (a category) to a Thing that it categorizes or
    * categorized.
    */
    isOrWasCategoryOf: prefixer('isOrWasCategoryOf'),

    /**
    * **[has or had component](https://www.ica.org/standards/RiC/ontology#hasOrHadComponent)** (property)
    * 
    * Connects an Instantiation to one of its present or past
    * component instantiations.
    */
    hasOrHadComponent: prefixer('hasOrHadComponent'),

    /**
    * **[is or was component of](https://www.ica.org/standards/RiC/ontology#isOrWasComponentOf)** (property)
    * 
    * Inverse of 'has or had component' object
    * property.
    */
    isOrWasComponentOf: prefixer('isOrWasComponentOf'),

    /**
    * **[has or had constituent](https://www.ica.org/standards/RiC/ontology#hasOrHadConstituent)** (property)
    * 
    * Connects a Record to a Record Part that is or was a component of
    * that Record.
    */
    hasOrHadConstituent: prefixer('hasOrHadConstituent'),

    /**
    * **[is or was constituent of](https://www.ica.org/standards/RiC/ontology#isOrWasConstituentOf)** (property)
    * 
    * Inverse of 'has or had constituent' object
    * property.
    */
    isOrWasConstituentOf: prefixer('isOrWasConstituentOf'),

    /**
    * **[has or had controller](https://www.ica.org/standards/RiC/ontology#hasOrHadController)** (property)
    * 
    * Inverse of 'is or was controller of' object
    * property.
    */
    hasOrHadController: prefixer('hasOrHadController'),

    /**
    * **[is or was subordinate to](https://www.ica.org/standards/RiC/ontology#isOrWasSubordinateTo)** (property)
    * 
    * Inverse of 'has or had subordinate' object
    * property.
    */
    isOrWasSubordinateTo: prefixer('isOrWasSubordinateTo'),

    /**
    * **[is or was controller of](https://www.ica.org/standards/RiC/ontology#isOrWasControllerOf)** (property)
    * 
    * Connects an Agent to another Agent it controls or controlled via
    * Activities, i.e. controls by function.
    */
    isOrWasControllerOf: prefixer('isOrWasControllerOf'),

    /**
    * **[has coordinates](https://www.ica.org/standards/RiC/ontology#hasOrHadCoordinates)** (property)
    * 
    * Connects a Physical Location to its past or present coordinates
    * in a reference system.
    */
    hasOrHadCoordinates: prefixer('hasOrHadCoordinates'),

    /**
    * **[is or was coordinates of](https://www.ica.org/standards/RiC/ontology#isOrWasCoordinatesOf)** (property)
    * 
    * Connects an instance of Coordinates to a Physical Location it
    * locates or located on earth, according to some reference system.
    */
    isOrWasCoordinatesOf: prefixer('isOrWasCoordinatesOf'),

    /**
    * **[has or had corporate body type](https://www.ica.org/standards/RiC/ontology#hasOrHadCorporateBodyType)** (property)
    * 
    * Connects a Corporate Body to a Corporate Body Type which
    * categorizes or categorized it.
    */
    hasOrHadCorporateBodyType: prefixer('hasOrHadCorporateBodyType'),

    /**
    * **[is or was corporate body type of](https://www.ica.org/standards/RiC/ontology#isOrWasCorporateBodyTypeOf)** (property)
    * 
    * Connects a Corporate Body Type to a Corporate Body that it
    * categorizes or categorized.
    */
    isOrWasCorporateBodyTypeOf: prefixer('isOrWasCorporateBodyTypeOf'),

    /**
    * **[has or had correspondent](https://www.ica.org/standards/RiC/ontology#hasOrHadCorrespondent)** (property)
    * 
    * Connects two Persons that correspond or have corresponded with
    * each other. This relation is symmetric.
    */
    hasOrHadCorrespondent: prefixer('hasOrHadCorrespondent'),

    /**
    * **[knows ](https://www.ica.org/standards/RiC/ontology#knows)** (property)
    * 
    * Connects two Persons that directly know each other during their
    * existence. This object property is symmetric.
    */
    knows: prefixer('knows'),

    /**
    * **[has or had demographic group](https://www.ica.org/standards/RiC/ontology#hasOrHadDemographicGroup)** (property)
    * 
    * Connects a Person or a Group to a Demographic Group to which it
    * belongs or belonged.
    */
    hasOrHadDemographicGroup: prefixer('hasOrHadDemographicGroup'),

    /**
    * **[is or was demographic group of](https://www.ica.org/standards/RiC/ontology#isOrWasDemographicGroupOf)** (property)
    * 
    * Connects a Demographic Group to a Person or Group which belongs
    * or belonged to it.
    */
    isOrWasDemographicGroupOf: prefixer('isOrWasDemographicGroupOf'),

    /**
    * **[has or had holder](https://www.ica.org/standards/RiC/ontology#hasOrHadHolder)** (property)
    * 
    * Inverse of 'is or was holder of' object property.
    */
    hasOrHadHolder: prefixer('hasOrHadHolder'),

    /**
    * **[has or had manager](https://www.ica.org/standards/RiC/ontology#hasOrHadManager)** (property)
    * 
    * Inverse of 'is or was manager of' object
    * property.
    */
    hasOrHadManager: prefixer('hasOrHadManager'),

    /**
    * **[is or was holder of](https://www.ica.org/standards/RiC/ontology#isOrWasHolderOf)** (property)
    * 
    * Connects an Agent to a Record Resource or Instantiation that the
    * Agent holds or held.
    */
    isOrWasHolderOf: prefixer('isOrWasHolderOf'),

    /**
    * **[has or had identifier](https://www.ica.org/standards/RiC/ontology#hasOrHadIdentifier)** (property)
    * 
    * Connects a Thing to one of its past or present
    * Identifiers.
    */
    hasOrHadIdentifier: prefixer('hasOrHadIdentifier'),

    /**
    * **[is or was identifier of](https://www.ica.org/standards/RiC/ontology#isOrWasIdentifierOf)** (property)
    * 
    * Connects an Identifier to a Thing that it identified or
    * identifies.
    */
    isOrWasIdentifierOf: prefixer('isOrWasIdentifierOf'),

    /**
    * **[has or had intellectual property rights holder](https://www.ica.org/standards/RiC/ontology#hasOrHadIntellectualPropertyRightsHolder)** (property)
    * 
    * Inverse of 'is or was holder of intellectual property rights of'
    * object property.
    */
    hasOrHadIntellectualPropertyRightsHolder: prefixer('hasOrHadIntellectualPropertyRightsHolder'),

    /**
    * **[is or was holder of intellectual property rights of](https://www.ica.org/standards/RiC/ontology#isOrWasHolderOfIntellectualPropertyRightsOf)** (property)
    * 
    * Connects an Agent to a Record Resource or Instantiation on which
    * the Agent has or had some intellectual property rights.
    */
    isOrWasHolderOfIntellectualPropertyRightsOf: prefixer('isOrWasHolderOfIntellectualPropertyRightsOf'),

    /**
    * **[has or had jurisdiction](https://www.ica.org/standards/RiC/ontology#hasOrHadJurisdiction)** (property)
    * 
    * Inverse of 'is or was jurisdiction of' object
    * property.
    */
    hasOrHadJurisdiction: prefixer('hasOrHadJurisdiction'),

    /**
    * **[is or was jurisdiction of](https://www.ica.org/standards/RiC/ontology#isOrWasJurisdictionOf)** (property)
    * 
    * Connects a Place to an Agent that has or had jurisdiction over
    * the Place.
    */
    isOrWasJurisdictionOf: prefixer('isOrWasJurisdictionOf'),

    /**
    * **[has or had language](https://www.ica.org/standards/RiC/ontology#hasOrHadLanguage)** (property)
    * 
    * Connects an Agent or Record Resource to a Language that it uses
    * or used.
    */
    hasOrHadLanguage: prefixer('hasOrHadLanguage'),

    /**
    * **[is or was language of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOf)** (property)
    * 
    * Connects a Language to an Agent, Record or Record Part that uses
    * or used it.
    */
    isOrWasLanguageOf: prefixer('isOrWasLanguageOf'),

    /**
    * **[has or had leader](https://www.ica.org/standards/RiC/ontology#hasOrHadLeader)** (property)
    * 
    * Inverse of 'is or was leader of' object property.
    */
    hasOrHadLeader: prefixer('hasOrHadLeader'),

    /**
    * **[is or was leader of](https://www.ica.org/standards/RiC/ontology#isOrWasLeaderOf)** (property)
    * 
    * Connects a Person to the Group that Person leads or led in the
    * past.
    */
    isOrWasLeaderOf: prefixer('isOrWasLeaderOf'),

    /**
    * **[has or had legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadLegalStatus)** (property)
    * 
    * Connects an Agent or Record Resource to a Legal Status which
    * categorized or categorizes it.
    */
    hasOrHadLegalStatus: prefixer('hasOrHadLegalStatus'),

    /**
    * **[is or was legal status of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOf)** (property)
    * 
    * Connects a Legal Status to an Agent, Record or Record Part
    * that it categorized or categorizes.
    */
    isOrWasLegalStatusOf: prefixer('isOrWasLegalStatusOf'),

    /**
    * **[has or had location](https://www.ica.org/standards/RiC/ontology#hasOrHadLocation)** (property)
    * 
    * Inverse of 'is or was location of' object
    * property.
    */
    hasOrHadLocation: prefixer('hasOrHadLocation'),

    /**
    * **[is or was location of](https://www.ica.org/standards/RiC/ontology#isOrWasLocationOf)** (property)
    * 
    * Connects a Place to a Thing that is or was located in the
    * Place.
    */
    isOrWasLocationOf: prefixer('isOrWasLocationOf'),

    /**
    * **[has or had main subject](https://www.ica.org/standards/RiC/ontology#hasOrHadMainSubject)** (property)
    * 
    * Use for specifying, for example, that a Record Set of type
    * personal file has main subject some person, which would help end users to retrieve the
    * main archival resources about this person.
    */
    hasOrHadMainSubject: prefixer('hasOrHadMainSubject'),

    /**
    * **[is or was main subject of](https://www.ica.org/standards/RiC/ontology#isOrWasMainSubjectOf)** (property)
    * 
    * Inverse of 'has or had main subject' object
    * property.
    */
    isOrWasMainSubjectOf: prefixer('isOrWasMainSubjectOf'),

    /**
    * **[is or was manager of](https://www.ica.org/standards/RiC/ontology#isOrWasManagerOf)** (property)
    * 
    * Connects an Agent to a Record Resource or Instantiation that the
    * Agent managed or manages.
    */
    isOrWasManagerOf: prefixer('isOrWasManagerOf'),

    /**
    * **[has or had member](https://www.ica.org/standards/RiC/ontology#hasOrHadMember)** (property)
    * 
    * Connects a Group to a Person that is or was a member of that
    * Group.
    */
    hasOrHadMember: prefixer('hasOrHadMember'),

    /**
    * **[is or was member of](https://www.ica.org/standards/RiC/ontology#isOrWasMemberOf)** (property)
    * 
    * Inverse of 'has or had member' object property.
    */
    isOrWasMemberOf: prefixer('isOrWasMemberOf'),

    /**
    * **[is or was name of](https://www.ica.org/standards/RiC/ontology#isOrWasNameOf)** (property)
    * 
    * Connects a Name to a Thing that it designated or
    * designates.
    */
    isOrWasNameOf: prefixer('isOrWasNameOf'),

    /**
    * **[has or had occupation of type](https://www.ica.org/standards/RiC/ontology#hasOrHadOccupationOfType)** (property)
    * 
    * Connects a Person to an Occupation Type that categorized or
    * categorizes his/her occupation (profession, trade or craft).
    */
    hasOrHadOccupationOfType: prefixer('hasOrHadOccupationOfType'),

    /**
    * **[is or was occupation type of](https://www.ica.org/standards/RiC/ontology#isOrWasOccupationTypeOf)** (property)
    * 
    * Connects an Occupation Type to a Person whose occupation is or
    * was categorized by it.
    */
    isOrWasOccupationTypeOf: prefixer('isOrWasOccupationTypeOf'),

    /**
    * **[has or had owner](https://www.ica.org/standards/RiC/ontology#hasOrHadOwner)** (property)
    * 
    * Inverse of 'is or was owner of' object property.
    */
    hasOrHadOwner: prefixer('hasOrHadOwner'),

    /**
    * **[is or was owner of](https://www.ica.org/standards/RiC/ontology#isOrWasOwnerOf)** (property)
    * 
    * Connects a Group, Person or Position to a Thing that this Agent
    * owns or owned.
    */
    isOrWasOwnerOf: prefixer('isOrWasOwnerOf'),

    /**
    * **[is or was part of](https://www.ica.org/standards/RiC/ontology#isOrWasPartOf)** (property)
    * 
    * Inverse of 'has or had part' relation.
    */
    isOrWasPartOf: prefixer('isOrWasPartOf'),

    /**
    * **[is event associated with ](https://www.ica.org/standards/RiC/ontology#isEventAssociatedWith)** (property)
    * 
    * Connects an Event to a Thing that is associated with the
    * existence and lifecycle of the Event.
    */
    isEventAssociatedWith: prefixer('isEventAssociatedWith'),

    /**
    * **[is or was participant in](https://www.ica.org/standards/RiC/ontology#isOrWasParticipantIn)** (property)
    * 
    * Inverse of 'has or had participant' object
    * property.
    */
    isOrWasParticipantIn: prefixer('isOrWasParticipantIn'),

    /**
    * **[has or had physical location](https://www.ica.org/standards/RiC/ontology#hasOrHadPhysicalLocation)** (property)
    * 
    * Connects a Place to one of its past or present Physical
    * Location.
    */
    hasOrHadPhysicalLocation: prefixer('hasOrHadPhysicalLocation'),

    /**
    * **[is or was physical location of](https://www.ica.org/standards/RiC/ontology#isOrWasPhysicalLocationOf)** (property)
    * 
    * Connects a Physical Location to a Place, when it is or was its
    * location.
    */
    isOrWasPhysicalLocationOf: prefixer('isOrWasPhysicalLocationOf'),

    /**
    * **[has or had place name](https://www.ica.org/standards/RiC/ontology#hasOrHadPlaceName)** (property)
    * 
    * Connects a Place to one of its past or present
    * names.
    */
    hasOrHadPlaceName: prefixer('hasOrHadPlaceName'),

    /**
    * **[is or was place name of](https://www.ica.org/standards/RiC/ontology#isOrWasPlaceNameOf)** (property)
    * 
    * Connects a Place Name to a Place that was or is designated by
    * it.
    */
    isOrWasPlaceNameOf: prefixer('isOrWasPlaceNameOf'),

    /**
    * **[has or had place type](https://www.ica.org/standards/RiC/ontology#hasOrHadPlaceType)** (property)
    * 
    * Connects a Place to a Place Type that categorized or categorizes
    * it.
    */
    hasOrHadPlaceType: prefixer('hasOrHadPlaceType'),

    /**
    * **[is or was place type of](https://www.ica.org/standards/RiC/ontology#isOrWasPlaceTypeOf)** (property)
    * 
    * Connects a Place Type to a Place that is or was categorized by
    * it.
    */
    isOrWasPlaceTypeOf: prefixer('isOrWasPlaceTypeOf'),

    /**
    * **[has or had rule type](https://www.ica.org/standards/RiC/ontology#hasOrHadRuleType)** (property)
    * 
    * Connects a Rule to a Rule Type that categorized or categorizes
    * it.
    */
    hasOrHadRuleType: prefixer('hasOrHadRuleType'),

    /**
    * **[is or was rule type of](https://www.ica.org/standards/RiC/ontology#isOrWasRuleTypeOf)** (property)
    * 
    * connects a Rule Type to a Rule that it categorized or
    * categorizes.
    */
    isOrWasRuleTypeOf: prefixer('isOrWasRuleTypeOf'),

    /**
    * **[has or had some members with category](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithCategory)** (property)
    * 
    * Connects a Record Set and a Category (Type) to which some of the
    * Records or Record Parts that are or were included in the Record Set
    * belong.
    */
    hasOrHadSomeMembersWithCategory: prefixer('hasOrHadSomeMembersWithCategory'),

    /**
    * **[is or was category of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasCategoryOfSomeMembersOf)** (property)
    * 
    * Connects a Category (Type) and a Record Set whose some present
    * or past Record or Record Part members belong to that Category.
    */
    isOrWasCategoryOfSomeMembersOf: prefixer('isOrWasCategoryOfSomeMembersOf'),

    /**
    * **[has or had some members with content type](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithContentType)** (property)
    * 
    * Connects a Record Set and a Content Type that categorizes some
    * of the Records or Record Parts that are or were included in the Record
    * Set.
    */
    hasOrHadSomeMembersWithContentType: prefixer('hasOrHadSomeMembersWithContentType'),

    /**
    * **[is or was content type of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasContentTypeOfSomeMembersOf)** (property)
    * 
    * Connects a Content Type and a Record Set whose some past or
    * present Record or Record Part members have that Content Type.
    */
    isOrWasContentTypeOfSomeMembersOf: prefixer('isOrWasContentTypeOfSomeMembersOf'),

    /**
    * **[has or had some members with language](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithLanguage)** (property)
    * 
    * Connects a Record Set and a Language used by some of the Records
    * or Record Parts that are or were included in the Record Set.
    */
    hasOrHadSomeMembersWithLanguage: prefixer('hasOrHadSomeMembersWithLanguage'),

    /**
    * **[is or was language of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasLanguageOfSomeMembersOf)** (property)
    * 
    * Connects a Language and a Record Set whose some present or past
    * Record or Record Part members use that Language.
    */
    isOrWasLanguageOfSomeMembersOf: prefixer('isOrWasLanguageOfSomeMembersOf'),

    /**
    * **[has or had some members with legal status](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithLegalStatus)** (property)
    * 
    * Connects a Record Set and a Legal Status that categorizes some
    * of the Records or Record Parts that are or were included in the Record
    * Set.
    */
    hasOrHadSomeMembersWithLegalStatus: prefixer('hasOrHadSomeMembersWithLegalStatus'),

    /**
    * **[is or was legal status of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasLegalStatusOfSomeMembersOf)** (property)
    * 
    * Connects a Legal Status and a Record Set whose some past or
    * present Record or Record Part members have that Legal Status.
    */
    isOrWasLegalStatusOfSomeMembersOf: prefixer('isOrWasLegalStatusOfSomeMembersOf'),

    /**
    * **[has or had some members with record state](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMembersWithRecordState)** (property)
    * 
    * Connects a Record Set and a Record State that categorizes some
    * of the Records or Record Parts that are or were included in the Record
    * Set.
    */
    hasOrHadSomeMembersWithRecordState: prefixer('hasOrHadSomeMembersWithRecordState'),

    /**
    * **[is or was record state of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasRecordStateOfSomeMembersOf)** (property)
    * 
    * Connects a Record State and a Record Set whose some past or
    * present Record or Record Part members have that Record State.
    */
    isOrWasRecordStateOfSomeMembersOf: prefixer('isOrWasRecordStateOfSomeMembersOf'),

    /**
    * **[has or had some members with documentary form type](https://www.ica.org/standards/RiC/ontology#hasOrHadSomeMemberswithDocumentaryFormType)** (property)
    * 
    * Connects a Record Set and a Documentary Form Type that
    * categorizes some of the Records or Record Parts that are or were included in the Record
    * Set.
    */
    hasOrHadSomeMemberswithDocumentaryFormType: prefixer('hasOrHadSomeMemberswithDocumentaryFormType'),

    /**
    * **[is or was documentary form type of some members of](https://www.ica.org/standards/RiC/ontology#isOrWasDocumentaryFormTypeOfSomeMembersOf)** (property)
    * 
    * Connects a Documentary Form Type and a Record Set whose some
    * past or present Record or Record Part members have that Documentary Form
    * Type.
    */
    isOrWasDocumentaryFormTypeOfSomeMembersOf: prefixer('isOrWasDocumentaryFormTypeOfSomeMembersOf'),

    /**
    * **[has or had spouse](https://www.ica.org/standards/RiC/ontology#hasOrHadSpouse)** (property)
    * 
    * Connects two Persons that are or were married. This relation is
    * symmetric.
    */
    hasOrHadSpouse: prefixer('hasOrHadSpouse'),

    /**
    * **[has or had student](https://www.ica.org/standards/RiC/ontology#hasOrHadStudent)** (property)
    * 
    * Inverse of 'has or had teacher' object property.
    */
    hasOrHadStudent: prefixer('hasOrHadStudent'),

    /**
    * **[has or had teacher](https://www.ica.org/standards/RiC/ontology#hasOrHadTeacher)** (property)
    * 
    * Connects a Person to another Person who is or was their
    * student.
    */
    hasOrHadTeacher: prefixer('hasOrHadTeacher'),

    /**
    * **[has or had subdivision](https://www.ica.org/standards/RiC/ontology#hasOrHadSubdivision)** (property)
    * 
    * Connects a Group to one of its present or past
    * subdivisions.
    */
    hasOrHadSubdivision: prefixer('hasOrHadSubdivision'),

    /**
    * **[has or had subordinate](https://www.ica.org/standards/RiC/ontology#hasOrHadSubordinate)** (property)
    * 
    * The hierarchical relation can be an authority relation, or a
    * whole/part relation between two Groups
    */
    hasOrHadSubordinate: prefixer('hasOrHadSubordinate'),

    /**
    * **[is or was subdivision of](https://www.ica.org/standards/RiC/ontology#isOrWasSubdivisionOf)** (property)
    * 
    * Inverse of 'has or had subdivision' object
    * property.
    */
    isOrWasSubdivisionOf: prefixer('isOrWasSubdivisionOf'),

    /**
    * **[has or had subevent](https://www.ica.org/standards/RiC/ontology#hasOrHadSubevent)** (property)
    * 
    * Since an Activity is a kind of Event, this Relation can also
    * be used for Activity.
    */
    hasOrHadSubevent: prefixer('hasOrHadSubevent'),

    /**
    * **[is associated with event ](https://www.ica.org/standards/RiC/ontology#isAssociatedWithEvent)** (property)
    * 
    * Inverse of 'is event associated with' object
    * property.
    */
    isAssociatedWithEvent: prefixer('isAssociatedWithEvent'),

    /**
    * **[is or was subevent of](https://www.ica.org/standards/RiC/ontology#isOrWasSubeventOf)** (property)
    * 
    * Inverse of 'has or had subevent' object property.
    */
    isOrWasSubeventOf: prefixer('isOrWasSubeventOf'),

    /**
    * **[is or was subject of](https://www.ica.org/standards/RiC/ontology#isOrWasSubjectOf)** (property)
    * 
    * Inverse of 'has or had subject' object property.
    */
    isOrWasSubjectOf: prefixer('isOrWasSubjectOf'),

    /**
    * **[has or had title](https://www.ica.org/standards/RiC/ontology#hasOrHadTitle)** (property)
    * 
    * Connects a Record Resource, Instantiation or Rule to a title
    * that is or was used for designating it.
    */
    hasOrHadTitle: prefixer('hasOrHadTitle'),

    /**
    * **[is or was title of](https://www.ica.org/standards/RiC/ontology#isOrWasTitleOf)** (property)
    * 
    * Connects a Title to a Record Resource, Instantiation or Rule
    * that it designated or designates.
    */
    isOrWasTitleOf: prefixer('isOrWasTitleOf'),

    /**
    * **[has or had work relation with](https://www.ica.org/standards/RiC/ontology#hasOrHadWorkRelationWith)** (property)
    * 
    * Connects two Agents that have or had some type of work relation
    * in the course of their activities. This relation is symmetric.
    */
    hasOrHadWorkRelationWith: prefixer('hasOrHadWorkRelationWith'),

    /**
    * **[has original ](https://www.ica.org/standards/RiC/ontology#hasOriginal)** (property)
    * 
    * Inverse of 'is original of' object property.
    */
    hasOriginal: prefixer('hasOriginal'),

    /**
    * **[is original of ](https://www.ica.org/standards/RiC/ontology#isOriginalOf)** (property)
    * 
    * There may be zero to many intermediate Records, ignored or
    * unknown, between the two connected Records
    */
    isOriginalOf: prefixer('isOriginalOf'),

    /**
    * **[has production technique type](https://www.ica.org/standards/RiC/ontology#hasProductionTechniqueType)** (property)
    * 
    * Connects an Instantiation to a Production Technique Type that
    * categorizes its production technique.
    */
    hasProductionTechniqueType: prefixer('hasProductionTechniqueType'),

    /**
    * **[is production technique type of](https://www.ica.org/standards/RiC/ontology#isProductionTechniqueTypeOf)** (property)
    * 
    * Connects a Production Technique Type to an Instantiation whose
    * production technique is categorized by it.
    */
    isProductionTechniqueTypeOf: prefixer('isProductionTechniqueTypeOf'),

    /**
    * **[is provenance of ](https://www.ica.org/standards/RiC/ontology#isProvenanceOf)** (property)
    * 
    * inverse of 'has provenance' object property.
    */
    isProvenanceOf: prefixer('isProvenanceOf'),

    /**
    * **[hasPublisher](https://www.ica.org/standards/RiC/ontology#hasPublisher)** (property)
    * 
    * Connects a Record resource to an Agent who published
    * it.
    */
    hasPublisher: prefixer('hasPublisher'),

    /**
    * **[isPublisherOf](https://www.ica.org/standards/RiC/ontology#isPublisherOf)** (property)
    * 
    * Connects an Agent to a Record Resource that it
    * published.
    */
    isPublisherOf: prefixer('isPublisherOf'),

    /**
    * **[has receiver](https://www.ica.org/standards/RiC/ontology#hasReceiver)** (property)
    * 
    * Connects a Record Resource or an Instantiation to the Agent that
    * receives it in the course of its activities.
    */
    hasReceiver: prefixer('hasReceiver'),

    /**
    * **[is receiver of](https://www.ica.org/standards/RiC/ontology#isReceiverOf)** (property)
    * 
    * Inverse of 'received by' object property.
    */
    isReceiverOf: prefixer('isReceiverOf'),

    /**
    * **[has record set type](https://www.ica.org/standards/RiC/ontology#hasRecordSetType)** (property)
    * 
    * Connects a Record Set to a Record Set Type that categorizes
    * it.
    */
    hasRecordSetType: prefixer('hasRecordSetType'),

    /**
    * **[is record set type of](https://www.ica.org/standards/RiC/ontology#isRecordSetTypeOf)** (property)
    * 
    * Connects a Record Set Type to a Record Set that it
    * categorizes.
    */
    isRecordSetTypeOf: prefixer('isRecordSetTypeOf'),

    /**
    * **[has record state](https://www.ica.org/standards/RiC/ontology#hasRecordState)** (property)
    * 
    * Connects a Record or Record Part to a Record State that
    * categorizes its state.
    */
    hasRecordState: prefixer('hasRecordState'),

    /**
    * **[is record state of](https://www.ica.org/standards/RiC/ontology#isRecordStateOf)** (property)
    * 
    * Connects a Record State to a Record or Record Part whose state
    * it categorizes.
    */
    isRecordStateOf: prefixer('isRecordStateOf'),

    /**
    * **[has reply](https://www.ica.org/standards/RiC/ontology#hasReply)** (property)
    * 
    * Connects a Record Resource to a reply, usually in the form of
    * correspondence.
    */
    hasReply: prefixer('hasReply'),

    /**
    * **[is reply to](https://www.ica.org/standards/RiC/ontology#isReplyTo)** (property)
    * 
    * Inverse of 'has reply' object property.
    */
    isReplyTo: prefixer('isReplyTo'),

    /**
    * **[has representation type](https://www.ica.org/standards/RiC/ontology#hasRepresentationType)** (property)
    * 
    * Connects an Instantiation to a Representation Type that
    * categorizes its representation type.
    */
    hasRepresentationType: prefixer('hasRepresentationType'),

    /**
    * **[is representation type of](https://www.ica.org/standards/RiC/ontology#isRepresentationTypeOf)** (property)
    * 
    * Connects a Representation Type to an Instantiation that it
    * categorizes.
    */
    isRepresentationTypeOf: prefixer('isRepresentationTypeOf'),

    /**
    * **[has sender ](https://www.ica.org/standards/RiC/ontology#hasSender)** (property)
    * 
    * Connects a Record Resource or an Instantiation to the Agent that
    * sends it
    */
    hasSender: prefixer('hasSender'),

    /**
    * **[is sender of ](https://www.ica.org/standards/RiC/ontology#isSenderOf)** (property)
    * 
    * Inverse of 'has sender' object property.
    */
    isSenderOf: prefixer('isSenderOf'),

    /**
    * **[has sibling](https://www.ica.org/standards/RiC/ontology#hasSibling)** (property)
    * 
    * Connects two Persons that are siblings. This relation is
    * symmetric.
    */
    hasSibling: prefixer('hasSibling'),

    /**
    * **[has source ](https://www.ica.org/standards/RiC/ontology#hasSource)** (property)
    * 
    * Connects a Record Resource or Relation to a Record Resource or
    * Agent that is used as a source of information for identifying or describing
    * it.
    */
    hasSource: prefixer('hasSource'),

    /**
    * **[is source of ](https://www.ica.org/standards/RiC/ontology#isSourceOf)** (property)
    * 
    * Connects a Record Resource or an Agent to a Record Resource or
    * Relation, when the first is used as a source of information for identifying or
    * describing the second one.
    */
    isSourceOf: prefixer('isSourceOf'),

    /**
    * **[has unit of measurement](https://www.ica.org/standards/RiC/ontology#hasUnitOfMeasurement)** (property)
    * 
    * Connects an Extent to a Unit Of Measurement
    */
    hasUnitOfMeasurement: prefixer('hasUnitOfMeasurement'),

    /**
    * **[is unit of measurement of](https://www.ica.org/standards/RiC/ontology#isUnitOfMeasurementOf)** (property)
    * 
    * Inverse of 'has unit of measurement' object property
    */
    isUnitOfMeasurementOf: prefixer('isUnitOfMeasurementOf'),

    /**
    * **[includes or included](https://www.ica.org/standards/RiC/ontology#includesOrIncluded)** (property)
    * 
    * A Record or Record Set can be aggregated in one or many Record
    * Sets simultaneously or through time
    */
    includesOrIncluded: prefixer('includesOrIncluded'),

    /**
    * **[is or was included in](https://www.ica.org/standards/RiC/ontology#isOrWasIncludedIn)** (property)
    * 
    * Inverse of 'includes or included' object
    * property.
    */
    isOrWasIncludedIn: prefixer('isOrWasIncludedIn'),

    /**
    * **[instantiation is connected to instantiation relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsConnectedToInstantiationRelation)** (property)
    * 
    * Connects an Instantiation to an Instantiation to Instantiation
    * Relation.
    */
    instantiationIsConnectedToInstantiationRelation: prefixer('instantiationIsConnectedToInstantiationRelation'),

    /**
    * **[instantiation is source of migration relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsSourceOfMigrationRelation)** (property)
    * 
    * Connects an Instantiation (from which at least one Instantiation
    * is migrated) to a Migration Relation.
    */
    instantiationIsSourceOfMigrationRelation: prefixer('instantiationIsSourceOfMigrationRelation'),

    /**
    * **[migration relation has source ](https://www.ica.org/standards/RiC/ontology#migrationRelationHasSource)** (property)
    * 
    * Connects a Migration Relation to the migrated
    * Instantiation.
    */
    migrationRelationHasSource: prefixer('migrationRelationHasSource'),

    /**
    * **[instantiation is target of migration relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfMigrationRelation)** (property)
    * 
    * Connects an Instantiation which results from a migration, to a
    * Migration Relation.
    */
    instantiationIsTargetOfMigrationRelation: prefixer('instantiationIsTargetOfMigrationRelation'),

    /**
    * **[migration relation has target ](https://www.ica.org/standards/RiC/ontology#migrationRelationHasTarget)** (property)
    * 
    * Connects a Migration Relation to a resulting
    * Instantiation.
    */
    migrationRelationHasTarget: prefixer('migrationRelationHasTarget'),

    /**
    * **[instantiation is target of record resource to instantiation
            relation ](https://www.ica.org/standards/RiC/ontology#instantiationIsTargetOfRecordResourceToInstantiationRelation)** (property)
    * 
    * Connects an Instantiation of a Record Resource to the Record
    * Resource to Instantiation Relation.
    */
    instantiationIsTargetOfRecordResourceToInstantiationRelation: prefixer('instantiationIsTargetOfRecordResourceToInstantiationRelation'),

    /**
    * **[record resource to instantiation relation has target ](https://www.ica.org/standards/RiC/ontology#recordResourceToInstantiationRelationHasTarget)** (property)
    * 
    * Connects a Record Resource To Instantiation Relation to an
    * Instantiation of the involved Record Resource.
    */
    recordResourceToInstantiationRelationHasTarget: prefixer('recordResourceToInstantiationRelationHasTarget'),

    /**
    * **[intellectual property rights relation has target ](https://www.ica.org/standards/RiC/ontology#intellectualPropertyRightsRelationHasTarget)** (property)
    * 
    * Connects an IintellectualPropertyRightsRelation to one of the
    * Record Resource or Instantiation on which the rights are held.
    */
    intellectualPropertyRightsRelationHasTarget: prefixer('intellectualPropertyRightsRelationHasTarget'),

    /**
    * **[record resource or instantiation is target of intellectual
            property rights relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (on which some
    * intellectual property rights are held) to an Intellectual Property Rights
    * Relation.
    */
    recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation: prefixer('recordResourceOrInstantiationIsTargetOfIntellectualPropertyRightsRelation'),

    /**
    * **[is date associated with ](https://www.ica.org/standards/RiC/ontology#isDateAssociatedWith)** (property)
    * 
    * Connects a Date to a Thing that the Date is associated with the
    * existence and lifecycle of.
    */
    isDateAssociatedWith: prefixer('isDateAssociatedWith'),

    /**
    * **[is equivalent to ](https://www.ica.org/standards/RiC/ontology#isEquivalentTo)** (property)
    * 
    * Connects two Things that are considered
    * equivalent.
    */
    isEquivalentTo: prefixer('isEquivalentTo'),

    /**
    * **[is from use date of ](https://www.ica.org/standards/RiC/ontology#isFromUseDateOf)** (property)
    * 
    * Connects a Date to an Appellation, when it is the date at which
    * the Appellation was first used.
    */
    isFromUseDateOf: prefixer('isFromUseDateOf'),

    /**
    * **[was used from date ](https://www.ica.org/standards/RiC/ontology#wasUsedFromDate)** (property)
    * 
    * Connects an Appellation to the Date from which it was
    * used.
    */
    wasUsedFromDate: prefixer('wasUsedFromDate'),

    /**
    * **[is functionally equivalent to](https://www.ica.org/standards/RiC/ontology#isFunctionallyEquivalentTo)** (property)
    * 
    * Two Instantiations, from some point of view, may be considered
    * as equivalent. This equivalence is usually based upon the fact that the Instantiations
    * have at least the same intellectual content (they instantiate the same Record
    * Resource).
    */
    isFunctionallyEquivalentTo: prefixer('isFunctionallyEquivalentTo'),

    /**
    * **[is last update date of ](https://www.ica.org/standards/RiC/ontology#isLastUpdateDateOf)** (property)
    * 
    * Connects a Date and a Thing that was last modified at this
    * Date.
    */
    isLastUpdateDateOf: prefixer('isLastUpdateDateOf'),

    /**
    * **[was last updated at date ](https://www.ica.org/standards/RiC/ontology#wasLastUpdatedAtDate)** (property)
    * 
    * Connects a Thing to the Date when it was last
    * modified.
    */
    wasLastUpdatedAtDate: prefixer('wasLastUpdatedAtDate'),

    /**
    * **[is or was adjacent to](https://www.ica.org/standards/RiC/ontology#isOrWasAdjacentTo)** (property)
    * 
    * Connects two Places that are or were geographically adjacent.
    * This is a symmetric object property.
    */
    isOrWasAdjacentTo: prefixer('isOrWasAdjacentTo'),

    /**
    * **[is or was enforced by](https://www.ica.org/standards/RiC/ontology#isOrWasEnforcedBy)** (property)
    * 
    * Connects a Rule to an Agent that enforces or enforced the
    * Rule.
    */
    isOrWasEnforcedBy: prefixer('isOrWasEnforcedBy'),

    /**
    * **[is or was responsible for enforcing](https://www.ica.org/standards/RiC/ontology#isOrWasResponsibleForEnforcing)** (property)
    * 
    * Inverse of 'is or was enforced by' object
    * property.
    */
    isOrWasResponsibleForEnforcing: prefixer('isOrWasResponsibleForEnforcing'),

    /**
    * **[is or was occupied by](https://www.ica.org/standards/RiC/ontology#isOrWasOccupiedBy)** (property)
    * 
    * Inverse of 'occupies or occupied' object
    * property.
    */
    isOrWasOccupiedBy: prefixer('isOrWasOccupiedBy'),

    /**
    * **[occupies or occupied](https://www.ica.org/standards/RiC/ontology#occupiesOrOccupied)** (property)
    * 
    * Connects a Person to a Position they occupy or
    * occupied.
    */
    occupiesOrOccupied: prefixer('occupiesOrOccupied'),

    /**
    * **[is or was performed by](https://www.ica.org/standards/RiC/ontology#isOrWasPerformedBy)** (property)
    * 
    * Connects an Activity to an Agent that performed or performs the
    * Activity.
    */
    isOrWasPerformedBy: prefixer('isOrWasPerformedBy'),

    /**
    * **[performs or performed](https://www.ica.org/standards/RiC/ontology#performsOrPerformed)** (property)
    * 
    * Inverse of 'is or was performed by' object
    * property.
    */
    performsOrPerformed: prefixer('performsOrPerformed'),

    /**
    * **[is or was regulated by](https://www.ica.org/standards/RiC/ontology#isOrWasRegulatedBy)** (property)
    * 
    * Inverse of the 'regulates or regulated' object
    * property.
    */
    isOrWasRegulatedBy: prefixer('isOrWasRegulatedBy'),

    /**
    * **[regulates or regulated](https://www.ica.org/standards/RiC/ontology#regulatesOrRegulated)** (property)
    * 
    * Connects a Rule to a Thing that it regulates or
    * regulated.
    */
    regulatesOrRegulated: prefixer('regulatesOrRegulated'),

    /**
    * **[is responsible for issuing ](https://www.ica.org/standards/RiC/ontology#isResponsibleForIssuing)** (property)
    * 
    * Inverse of 'issued by' object property.
    */
    isResponsibleForIssuing: prefixer('isResponsibleForIssuing'),

    /**
    * **[issued by ](https://www.ica.org/standards/RiC/ontology#issuedBy)** (property)
    * 
    * Connects a Rule to the Agent that issued or published the
    * Rule.
    */
    issuedBy: prefixer('issuedBy'),

    /**
    * **[is to use date of ](https://www.ica.org/standards/RiC/ontology#isToUseDateOf)** (property)
    * 
    * Connects a Date to an Appellation, when it is the date till
    * which the Appellation was used.
    */
    isToUseDateOf: prefixer('isToUseDateOf'),

    /**
    * **[was used to date ](https://www.ica.org/standards/RiC/ontology#wasUsedToDate)** (property)
    * 
    * Connects an Appellation to the Date till when it was
    * used.
    */
    wasUsedToDate: prefixer('wasUsedToDate'),

    /**
    * **[knowing of relation has source ](https://www.ica.org/standards/RiC/ontology#knowingOfRelationHasSource)** (property)
    * 
    * Connects a Knowing Of Relation to a 'knowing of' Person (a
    * Person who has some knowledge of another one.)
    */
    knowingOfRelationHasSource: prefixer('knowingOfRelationHasSource'),

    /**
    * **[person is source of knowing of relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfKnowingOfRelation)** (property)
    * 
    * Connects a Person (who has some knowledge of another one) to a
    * Knowing Of Relation.
    */
    personIsSourceOfKnowingOfRelation: prefixer('personIsSourceOfKnowingOfRelation'),

    /**
    * **[knowing of relation has target ](https://www.ica.org/standards/RiC/ontology#knowingOfRelationHasTarget)** (property)
    * 
    * Connects a Knowing Of Relation to a 'known by' Person (a Person
    * on which another one has some has some knowledge.)
    */
    knowingOfRelationHasTarget: prefixer('knowingOfRelationHasTarget'),

    /**
    * **[person is target of knowing of relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfKnowingOfRelation)** (property)
    * 
    * Connects a Person (of which another Person has some knowledge)
    * to a Knowing Of Relation.
    */
    personIsTargetOfKnowingOfRelation: prefixer('personIsTargetOfKnowingOfRelation'),

    /**
    * **[person has knowing relation ](https://www.ica.org/standards/RiC/ontology#personHasKnowingRelation)** (property)
    * 
    * Connects a Person to a Knowing Relation.
    */
    personHasKnowingRelation: prefixer('personHasKnowingRelation'),

    /**
    * **[known by ](https://www.ica.org/standards/RiC/ontology#knownBy)** (property)
    * 
    * Inverse of 'knows of' object property.
    */
    knownBy: prefixer('knownBy'),

    /**
    * **[knows of ](https://www.ica.org/standards/RiC/ontology#knowsOf)** (property)
    * 
    * Connects a Person to another Person they have some knowledge of
    * through time or space.
    */
    knowsOf: prefixer('knowsOf'),

    /**
    * **[leadership relation has source ](https://www.ica.org/standards/RiC/ontology#leadershipRelationHasSource)** (property)
    * 
    * Connects a Leadership Relation to a Person who is involved as a
    * leader.
    */
    leadershipRelationHasSource: prefixer('leadershipRelationHasSource'),

    /**
    * **[person is source of leadership relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfLeadershipRelation)** (property)
    * 
    * Connects a Person (as a leader) to a Leadership
    * Relation.
    */
    personIsSourceOfLeadershipRelation: prefixer('personIsSourceOfLeadershipRelation'),

    /**
    * **[leadership with position ](https://www.ica.org/standards/RiC/ontology#leadershipWithPosition)** (property)
    * 
    * Connects a Leadership Relation to the Position occupied by the
    * leading Person.
    */
    leadershipWithPosition: prefixer('leadershipWithPosition'),

    /**
    * **[position is context of leadership relation ](https://www.ica.org/standards/RiC/ontology#positionIsContextOfLeadershipRelation)** (property)
    * 
    * Connects a Position to a Leadership Relation (the leading Person
    * occupies that Position).
    */
    positionIsContextOfLeadershipRelation: prefixer('positionIsContextOfLeadershipRelation'),

    /**
    * **[management relation has target ](https://www.ica.org/standards/RiC/ontology#managementRelationHasTarget)** (property)
    * 
    * Connects a Management Relation to a Record Resource or
    * Instantiation that is involved as a managed thing.
    */
    managementRelationHasTarget: prefixer('managementRelationHasTarget'),

    /**
    * **[record resource or instantiation is target of management relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfManagementRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is managed by
    * an Agent) to a Management Relation.
    */
    recordResourceOrInstantiationIsTargetOfManagementRelation: prefixer('recordResourceOrInstantiationIsTargetOfManagementRelation'),

    /**
    * **[mandate is source of mandate relation ](https://www.ica.org/standards/RiC/ontology#mandateIsSourceOfMandateRelation)** (property)
    * 
    * Connects a Mandate to a Mandate Relation.
    */
    mandateIsSourceOfMandateRelation: prefixer('mandateIsSourceOfMandateRelation'),

    /**
    * **[rule is source of rule relation ](https://www.ica.org/standards/RiC/ontology#ruleIsSourceOfRuleRelation)** (property)
    * 
    * Connects a Rule to a Rule Relation.
    */
    ruleIsSourceOfRuleRelation: prefixer('ruleIsSourceOfRuleRelation'),

    /**
    * **[mandate relation has source ](https://www.ica.org/standards/RiC/ontology#mandateRelationHasSource)** (property)
    * 
    * Connects a Mandate Relation to a Mandate.
    */
    mandateRelationHasSource: prefixer('mandateRelationHasSource'),

    /**
    * **[rule relation has source ](https://www.ica.org/standards/RiC/ontology#ruleRelationHasSource)** (property)
    * 
    * Connects a Rule Relation to a Rule.
    */
    ruleRelationHasSource: prefixer('ruleRelationHasSource'),

    /**
    * **[rule relation has target ](https://www.ica.org/standards/RiC/ontology#ruleRelationHasTarget)** (property)
    * 
    * Connects a Rule Relation to a Thing (that is associated to a
    * Rule).
    */
    ruleRelationHasTarget: prefixer('ruleRelationHasTarget'),

    /**
    * **[membership relation has target ](https://www.ica.org/standards/RiC/ontology#membershipRelationHasTarget)** (property)
    * 
    * Connects a Membership Relation to a Person who is involved as a
    * member.
    */
    membershipRelationHasTarget: prefixer('membershipRelationHasTarget'),

    /**
    * **[person is target of membership relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfMembershipRelation)** (property)
    * 
    * Connects a Person (as a member of a Group) to a Membership
    * Relation.
    */
    personIsTargetOfMembershipRelation: prefixer('personIsTargetOfMembershipRelation'),

    /**
    * **[membership with position ](https://www.ica.org/standards/RiC/ontology#membershipWithPosition)** (property)
    * 
    * Connects a Membership Relation to the Position occupied by the
    * member Person(s).
    */
    membershipWithPosition: prefixer('membershipWithPosition'),

    /**
    * **[position is context of membership relation ](https://www.ica.org/standards/RiC/ontology#positionIsContextOfMembershipRelation)** (property)
    * 
    * Connects a Position to a Membership Relation (the member Person
    * occupies that Position).
    */
    positionIsContextOfMembershipRelation: prefixer('positionIsContextOfMembershipRelation'),

    /**
    * **[migrated from](https://www.ica.org/standards/RiC/ontology#migratedFrom)** (property)
    * 
    * Inverse of 'migrated into' object property.
    */
    migratedFrom: prefixer('migratedFrom'),

    /**
    * **[migrated into](https://www.ica.org/standards/RiC/ontology#migratedInto)** (property)
    * 
    * Use for digital instantiations.
    */
    migratedInto: prefixer('migratedInto'),

    /**
    * **[overlaps or overlapped](https://www.ica.org/standards/RiC/ontology#overlapsOrOverlapped)** (property)
    * 
    * Connects two Places that geographically overlap or overlapped.
    * This object property is symmetric.
    */
    overlapsOrOverlapped: prefixer('overlapsOrOverlapped'),

    /**
    * **[owner ship relation has target ](https://www.ica.org/standards/RiC/ontology#ownershipRelationHasTarget)** (property)
    * 
    * Connects an Ownership Relation to a Thing that is
    * owned.
    */
    ownershipRelationHasTarget: prefixer('ownershipRelationHasTarget'),

    /**
    * **[thing is target of ownership relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfOwnershipRelation)** (property)
    * 
    * Connects a Thing (that is owned by a Group, a Person or a
    * Position) to an Ownership Relation.
    */
    thingIsTargetOfOwnershipRelation: prefixer('thingIsTargetOfOwnershipRelation'),

    /**
    * **[person has sibling relation ](https://www.ica.org/standards/RiC/ontology#personHasSiblingRelation)** (property)
    * 
    * Connects a Person to a Sibling Relation.
    */
    personHasSiblingRelation: prefixer('personHasSiblingRelation'),

    /**
    * **[sibling relation connects ](https://www.ica.org/standards/RiC/ontology#siblingRelationConnects)** (property)
    * 
    * Connects a Sibling Relation to one of the siblings
    * involved.
    */
    siblingRelationConnects: prefixer('siblingRelationConnects'),

    /**
    * **[person has spouse relation ](https://www.ica.org/standards/RiC/ontology#personHasSpouseRelation)** (property)
    * 
    * Connects a Person to a Spouse Relation.
    */
    personHasSpouseRelation: prefixer('personHasSpouseRelation'),

    /**
    * **[spouse relation connects ](https://www.ica.org/standards/RiC/ontology#spouseRelationConnects)** (property)
    * 
    * Connects a Sibling Relation to one of the spouses
    * involved.
    */
    spouseRelationConnects: prefixer('spouseRelationConnects'),

    /**
    * **[person is source of position holding relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfPositionHoldingRelation)** (property)
    * 
    * Connects a Person (who occupies a Position) to a Position
    * Holding Relation.
    */
    personIsSourceOfPositionHoldingRelation: prefixer('personIsSourceOfPositionHoldingRelation'),

    /**
    * **[position holding relation has source ](https://www.ica.org/standards/RiC/ontology#positionHoldingRelationHasSource)** (property)
    * 
    * Connects a Position Holding Relation to a Person (who occupies a
    * Position).
    */
    positionHoldingRelationHasSource: prefixer('positionHoldingRelationHasSource'),

    /**
    * **[person is source of teaching relation ](https://www.ica.org/standards/RiC/ontology#personIsSourceOfTeachingRelation)** (property)
    * 
    * Connects a Person (as a teacher) to a Teaching
    * Relation.
    */
    personIsSourceOfTeachingRelation: prefixer('personIsSourceOfTeachingRelation'),

    /**
    * **[teaching relation has source ](https://www.ica.org/standards/RiC/ontology#teachingRelationHasSource)** (property)
    * 
    * Connects a Teaching Relation to a Person (who is a
    * teacher).
    */
    teachingRelationHasSource: prefixer('teachingRelationHasSource'),

    /**
    * **[person is target of teaching relation ](https://www.ica.org/standards/RiC/ontology#personIsTargetOfTeachingRelation)** (property)
    * 
    * Connects a Person (as a student) to a Teaching
    * Relation.
    */
    personIsTargetOfTeachingRelation: prefixer('personIsTargetOfTeachingRelation'),

    /**
    * **[teaching relation has target ](https://www.ica.org/standards/RiC/ontology#teachingRelationHasTarget)** (property)
    * 
    * Connects a Teaching Relation to a Person (who is a
    * student).
    */
    teachingRelationHasTarget: prefixer('teachingRelationHasTarget'),

    /**
    * **[place is source of place relation ](https://www.ica.org/standards/RiC/ontology#placeIsSourceOfPlaceRelation)** (property)
    * 
    * Connects a Place (as associated to a Thing) to a Place
    * Relation.
    */
    placeIsSourceOfPlaceRelation: prefixer('placeIsSourceOfPlaceRelation'),

    /**
    * **[place relation has source ](https://www.ica.org/standards/RiC/ontology#placeRelationHasSource)** (property)
    * 
    * Connects a Place Relation to the Place concerned.
    */
    placeRelationHasSource: prefixer('placeRelationHasSource'),

    /**
    * **[place relation has target ](https://www.ica.org/standards/RiC/ontology#placeRelationHasTarget)** (property)
    * 
    * Connects a Place Relation to a Thing that is associated to the
    * Place.
    */
    placeRelationHasTarget: prefixer('placeRelationHasTarget'),

    /**
    * **[thing is target of place relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfPlaceRelation)** (property)
    * 
    * Connects a Thing (that is associated with a Place) to a Place
    * Relation.
    */
    thingIsTargetOfPlaceRelation: prefixer('thingIsTargetOfPlaceRelation'),

    /**
    * **[position holding relation has target ](https://www.ica.org/standards/RiC/ontology#positionHoldingRelationHasTarget)** (property)
    * 
    * Connects a Position Holding Relation to a Position (that is
    * occupied).
    */
    positionHoldingRelationHasTarget: prefixer('positionHoldingRelationHasTarget'),

    /**
    * **[position is target of position holding relation ](https://www.ica.org/standards/RiC/ontology#positionIsTargetOfPositionHoldingRelation)** (property)
    * 
    * Connects a Position (that is occupied by a Person) to a Position
    * Holding Relation.
    */
    positionIsTargetOfPositionHoldingRelation: prefixer('positionIsTargetOfPositionHoldingRelation'),

    /**
    * **[position is source of position to group relation ](https://www.ica.org/standards/RiC/ontology#positionIsSourceOfPositionToGroupRelation)** (property)
    * 
    * Connects a Position (that exists within a Group) to a Position
    * to Group Relation.
    */
    positionIsSourceOfPositionToGroupRelation: prefixer('positionIsSourceOfPositionToGroupRelation'),

    /**
    * **[position to group relation has source ](https://www.ica.org/standards/RiC/ontology#positionToGroupRelationHasSource)** (property)
    * 
    * Connects a Position to Group Relation to a Position (that exists
    * in a Group).
    */
    positionToGroupRelationHasSource: prefixer('positionToGroupRelationHasSource'),

    /**
    * **[record resource or instantiation is source of provenance relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsSourceOfProvenanceRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is created or
    * accumulated by an Agent, or documents an Activity) to a Provenance
    * Relation.
    */
    recordResourceOrInstantiationIsSourceOfProvenanceRelation: prefixer('recordResourceOrInstantiationIsSourceOfProvenanceRelation'),

    /**
    * **[proxy for ](https://www.ica.org/standards/RiC/ontology#proxyFor)** (property)
    * 
    * Connects a Proxy to the Record Resource it stands for in the
    * specific context of a Record Set.
    */
    proxyFor: prefixer('proxyFor'),

    /**
    * **[proxy in ](https://www.ica.org/standards/RiC/ontology#proxyIn)** (property)
    * 
    * Connects a Proxy to the Record Set in which it stands for
    * (represents) another Record Resource.
    */
    proxyIn: prefixer('proxyIn'),

    /**
    * **[record resource genetic relation connects ](https://www.ica.org/standards/RiC/ontology#recordResourceGeneticRelationConnects)** (property)
    * 
    * Connects a Record Resource Genetic Relation to one of the
    * associated Record Resources.
    */
    recordResourceGeneticRelationConnects: prefixer('recordResourceGeneticRelationConnects'),

    /**
    * **[record resource relation connects ](https://www.ica.org/standards/RiC/ontology#recordResourceRelationConnects)** (property)
    * 
    * Connects a Record Resource relation to one of the related Record
    * Resources.
    */
    recordResourceRelationConnects: prefixer('recordResourceRelationConnects'),

    /**
    * **[record resource is connected to record resource genetic relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceIsConnectedToRecordResourceGeneticRelation)** (property)
    * 
    * Connects a Record Resource to a Record Resource Genetic
    * Relation.
    */
    recordResourceIsConnectedToRecordResourceGeneticRelation: prefixer('recordResourceIsConnectedToRecordResourceGeneticRelation'),

    /**
    * **[record resource holding relation has target ](https://www.ica.org/standards/RiC/ontology#recordResourceHoldingRelationHasTarget)** (property)
    * 
    * Connects a Record Resource Holding Relation to a Record Resource
    * or Instantiation (that is held by an Agent).
    */
    recordResourceHoldingRelationHasTarget: prefixer('recordResourceHoldingRelationHasTarget'),

    /**
    * **[record resource or instantiation is target of record resource
            holding relation ](https://www.ica.org/standards/RiC/ontology#recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation)** (property)
    * 
    * Connects a Record Resource or Instantiation (that is held by an
    * Agent) to a Record Resource Holding Relation.
    */
    recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation: prefixer('recordResourceOrInstantiationIsTargetOfRecordResourceHoldingRelation'),

    /**
    * **[record resource is connected to record resource relation
        ](https://www.ica.org/standards/RiC/ontology#recordResourceIsConnectedToRecordResourceRelation)** (property)
    * 
    * Connects a Record Resource to a Record Resource
    * Relation.
    */
    recordResourceIsConnectedToRecordResourceRelation: prefixer('recordResourceIsConnectedToRecordResourceRelation'),

    /**
    * **[record resource is source of record resource to instantiation
            relation ](https://www.ica.org/standards/RiC/ontology#recordResourceIsSourceOfRecordResourceToInstantiationRelation)** (property)
    * 
    * Connects a Record Resource (that was instantiated) to a Record
    * Resource To Instantiation Relation
    */
    recordResourceIsSourceOfRecordResourceToInstantiationRelation: prefixer('recordResourceIsSourceOfRecordResourceToInstantiationRelation'),

    /**
    * **[record resource to instantiation relation has source ](https://www.ica.org/standards/RiC/ontology#recordResourceToInstantiationRelationHasSource)** (property)
    * 
    * Connects a Record Resource To Instantiation Relation to the
    * Record Resource (that was instantiated).
    */
    recordResourceToInstantiationRelationHasSource: prefixer('recordResourceToInstantiationRelationHasSource'),

    /**
    * **[sequential relation has source ](https://www.ica.org/standards/RiC/ontology#sequentialRelationHasSource)** (property)
    * 
    * Connects a Sequential Relation to a Thing that precedes other
    * Thing(s) in the sequence.
    */
    sequentialRelationHasSource: prefixer('sequentialRelationHasSource'),

    /**
    * **[thing is source of sequential relation ](https://www.ica.org/standards/RiC/ontology#thingIsSourceOfSequentialRelation)** (property)
    * 
    * Connects a Thing to a Sequential Relation, when this Thing
    * precedes other Thing(s) in the sequence.
    */
    thingIsSourceOfSequentialRelation: prefixer('thingIsSourceOfSequentialRelation'),

    /**
    * **[sequential relation has target ](https://www.ica.org/standards/RiC/ontology#sequentialRelationHasTarget)** (property)
    * 
    * Connects a Sequential Relation to a Thing that follows other
    * Thing(s) in the sequence.
    */
    sequentialRelationHasTarget: prefixer('sequentialRelationHasTarget'),

    /**
    * **[thing is target of sequential relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfSequentialRelation)** (property)
    * 
    * Connects a Thing (that follows other Thing(s) in a sequence) to
    * a Sequential Relation.
    */
    thingIsTargetOfSequentialRelation: prefixer('thingIsTargetOfSequentialRelation'),

    /**
    * **[thing is target of type relation ](https://www.ica.org/standards/RiC/ontology#thingIsTargetOfTypeRelation)** (property)
    * 
    * Connects a Thing (that is categorized by a Type) to a Type
    * Relation.
    */
    thingIsTargetOfTypeRelation: prefixer('thingIsTargetOfTypeRelation'),

    /**
    * **[type relation has target ](https://www.ica.org/standards/RiC/ontology#typeRelationHasTarget)** (property)
    * 
    * Connects a Type Relation to a Thing (that is categorized by the
    * involved Type).
    */
    typeRelationHasTarget: prefixer('typeRelationHasTarget'),

    /**
    * **[type is source of type relation ](https://www.ica.org/standards/RiC/ontology#typeIsSourceOfTypeRelation)** (property)
    * 
    * Connects a Type (a category) to a Type Relation.
    */
    typeIsSourceOfTypeRelation: prefixer('typeIsSourceOfTypeRelation'),

    /**
    * **[type relation has source ](https://www.ica.org/standards/RiC/ontology#typeRelationHasSource)** (property)
    * 
    * Connects a Type Relation to the Type (that categorizes the
    * involved Thing(s)).
    */
    typeRelationHasSource: prefixer('typeRelationHasSource'),

  
  };

export default rico

