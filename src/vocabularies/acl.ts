// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/ns/auth/acl#');

/**
 * [acl](http://www.w3.org/ns/auth/acl#})
 */
const acl = {
  /**
    * **[access](http://www.w3.org/ns/auth/acl#Access)** (class)
    * 
    * Any kind of access to a resource. Don't use this, use R W and RW
    */
    Access: prefixer('Access'),

    /**
    * **[append](http://www.w3.org/ns/auth/acl#Append)** (class)
    * 
    * Append accesses are specific write access which only add information, and do not remove information.
    * For text files, for example, append access allows bytes to be added onto the end of the file.
    * For RDF graphs, Append access allows adds triples to the graph but does not remove any.
    * Append access is useful for dropbox functionality.
    * Dropbox can be used for link notification, which the information added is a notification
    * that a some link has been made elsewhere relevant to the given resource.
    * 
    */
    Append: prefixer('Append'),

    /**
    * **[Anyone authenticated](http://www.w3.org/ns/auth/acl#AuthenticatedAgent)** (class)
    * 
    * A class of agents who have been authenticated.
    * In other words, anyone can access this resource, but not anonymously.
    * The social expectation is that the authentication process will provide an
    * identify and a name, or pseudonym.
    * (A new ID should not be minted for every access: the intent is that the user
    * is able to continue to use the ID for continues interactions with peers,
    * and for example to develop a reputation)
    * 
    */
    AuthenticatedAgent: prefixer('AuthenticatedAgent'),

    /**
    * **[authorization](http://www.w3.org/ns/auth/acl#Authorization)** (class)
    * 
    * An element of access control,
    * allowing agent to agents access of some kind to resources or classes of resources
    */
    Authorization: prefixer('Authorization'),

    /**
    * **[control](http://www.w3.org/ns/auth/acl#Control)** (class)
    * 
    * Allows read/write access to the ACL for the resource(s)
    */
    Control: prefixer('Control'),

    /**
    * **[Origin](http://www.w3.org/ns/auth/acl#Origin)** (class)
    * 
    * An Origin is basically a web site
    * (Note WITHOUT the trailing slash after the domain name and port in its URI)
    * and is the basis for controlling access to data by web apps
    * in the Same Origin Model of web security.
    * All scripts from the same origin are given the same right.
    */
    Origin: prefixer('Origin'),

    /**
    * **[read](http://www.w3.org/ns/auth/acl#Read)** (class)
    * 
    * The class of read operations
    */
    Read: prefixer('Read'),

    /**
    * **[access control](http://www.w3.org/ns/auth/acl#accessControl)** (property)
    * 
    * The Access Control file for this information resource.
    * This may of course be a virtual resource implemented by the access control system.
    * Note that HTTP header `Link: <foo.acl>; rel="acl"` can also be used for this.
    */
    accessControl: prefixer('accessControl'),

    /**
    * **[to](http://www.w3.org/ns/auth/acl#accessTo)** (property)
    * 
    * The information resource to which access is being granted.
    */
    accessTo: prefixer('accessTo'),

    /**
    * **[to all in](http://www.w3.org/ns/auth/acl#accessToClass)** (property)
    * 
    * A class of information resources to which access is being granted.
    */
    accessToClass: prefixer('accessToClass'),

    /**
    * **[agent](http://www.w3.org/ns/auth/acl#agent)** (property)
    * 
    * A person or social entity to being given the right
    */
    agent: prefixer('agent'),

    /**
    * **[agent class](http://www.w3.org/ns/auth/acl#agentClass)** (property)
    * 
    * A class of persons or social entities to being given the right
    */
    agentClass: prefixer('agentClass'),

    /**
    * **[agent group](http://www.w3.org/ns/auth/acl#agentGroup)** (property)
    * 
    * A group of persons or social entities to being given the right.
    * The right is given to any entity which is a vcard:member of the group,
    * as defined by the document received when the Group is dereferenced.
    */
    agentGroup: prefixer('agentGroup'),

    /**
    * **[default access for things in this](http://www.w3.org/ns/auth/acl#default)** (property)
    * 
    * If a resource has no ACL file (it is 404),
    * then access to the resource is given by the ACL of the immediately
    * containing directory, or failing that (404) the ACL of the recursively next
    * containing directory which has an ACL file.
    * Within that ACL file,
    * any Authorization which has that directory as its acl:default applies to the
    * resource. (The highest directory must have an ACL file.)
    * 
    */
    default: prefixer('default'),

    /**
    * **[default access for new things in the object](http://www.w3.org/ns/auth/acl#defaultForNew)** (property)
    * 
    * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
    * Was: A directory for which this authorization is used for new files in the directory.
    */
    defaultForNew: prefixer('defaultForNew'),

    /**
    * **[delegates](http://www.w3.org/ns/auth/acl#delegates)** (property)
    * 
    * Delegates a person or another agent to act on behalf of the agent.
    * For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
    */
    delegates: prefixer('delegates'),

    /**
    * **[access mode](http://www.w3.org/ns/auth/acl#mode)** (property)
    * 
    * A mode of access such as read or write.
    */
    mode: prefixer('mode'),

    /**
    * **[origin](http://www.w3.org/ns/auth/acl#origin)** (property)
    * 
    * A web application, identified by its Origin, such as
    * <https://scripts.example.com>, being given the right.
    * When a user of the web application at a certain origin accesses the server,
    * then the browser sets the Origin: header to warn that a possibly untrusted webapp
    * is being used.
    * Then, BOTH the user AND the origin must have the required access.
    */
    origin: prefixer('origin'),

    /**
    * **[owner](http://www.w3.org/ns/auth/acl#owner)** (property)
    * 
    * The person or other agent which owns this.
    * For example, the owner of a file in a filesystem.
    * There is a sense of "right to control".   Typically defaults to the agent who created
    * something, but can be changed.
    */
    owner: prefixer('owner'),

  
  };

export default acl

