// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://qudt.org/schema/qudt/');

/**
 * [qudt](http://qudt.org/schema/qudt/})
 */
const qudt = {
  /**
    * **[example](http://qudt.org/schema/qudt/example)** (property)
    * 
    * The 'qudt:example' property is used to annotate an instance of a class with a reference to a concept that is an example. The type of this property is 'rdf:Property'. This allows both scalar and object ranges.
    */
    example: prefixer('example'),

    /**
    * **[expression](http://qudt.org/schema/qudt/expression)** (property)
    * 
    * An 'expression' is a finite combination of symbols that are well-formed according to rules that apply to units of measure, quantity kinds and their dimensions.
    */
    expression: prefixer('expression'),

    /**
    * **[ucum case-insensitive code](http://qudt.org/schema/qudt/ucumCaseInsensitiveCode)** (property)
    * 
    * <em>ucumCode</em> associates a QUDT unit with a UCUM case-insensitive code.
    */
    ucumCaseInsensitiveCode: prefixer('ucumCaseInsensitiveCode'),

    /**
    * **[ucum case-sensitive code](http://qudt.org/schema/qudt/ucumCaseSensitiveCode)** (property)
    * 
    * <em>ucumCode</em> associates a QUDT unit with with a UCUM case-sensitive code.
    */
    ucumCaseSensitiveCode: prefixer('ucumCaseSensitiveCode'),

    /**
    * **[element type](http://qudt.org/schema/qudt/elementType)** (property)
    * 
    * This property is used to relate a structured data type with the data type the structured type's elements. It is used for structured data types with elements that are all of the same type.
    */
    elementType: prefixer('elementType'),

    /**
    * **[C Language name](http://qudt.org/schema/qudt/cName)** (property)
    * 
    * Datatype name in the C programming language
    */
    cName: prefixer('cName'),

    /**
    * **[element label](http://qudt.org/schema/qudt/elementLabel)** (property)
    * 
    * This property is used to label the field of a composite data structure.
    */
    elementLabel: prefixer('elementLabel'),

    /**
    * **[bounded](http://qudt.org/schema/qudt/bounded)** (property)
    * 
    * A datatype is bounded if its value space has either a finite upper and lower bound. Either bound may be inclusive or exclusive.
    */
    bounded: prefixer('bounded'),

    /**
    * **[allowed pattern](http://qudt.org/schema/qudt/allowedPattern)** (property)
    * 
    * This property relates a date string encoding (c.f. type:DateStringEncodingType) to one or more XML Schema compliant regular expressions that together determine the allowed lexical expressions that can be unambiguously parsed to determine a temporal quantity.
    */
    allowedPattern: prefixer('allowedPattern'),

    /**
    * **[length](http://qudt.org/schema/qudt/length)** (property)
    * 
    * The length of a structure, for example the size of a vector
    */
    length: prefixer('length'),

    /**
    * **[min exclusive](http://qudt.org/schema/qudt/minExclusive)** (property)
    * 
    * minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
    */
    minExclusive: prefixer('minExclusive'),

    /**
    * **[value](http://qudt.org/schema/qudt/value)** (property)
    * 
    * A property to relate an observable thing with a value of any kind
    */
    value: prefixer('value'),

    /**
    * **[by row](http://qudt.org/schema/qudt/byRow)** (property)
    * 
    * A boolean to specify whether an array is presented row by row or column by column.
    */
    byRow: prefixer('byRow'),

    /**
    * **[dimensionality](http://qudt.org/schema/qudt/dimensionality)** (property)
    * 
    * The number of dimensions making up an array. For example a 4 by 4 array has a dimensionality of 2. Whereas a vector or a string has a dimensionality of 1.
    */
    dimensionality: prefixer('dimensionality'),

    /**
    * **[sound](http://qudt.org/schema/qudt/sound)** (property)
    * 
    * The intended use of the sound property is to be associated with modal enumerations
    */
    sound: prefixer('sound'),

    /**
    * **[Abstract Datatype](http://qudt.org/schema/qudt/AbstractDatatype)** (class)
    * 
    * <p class="lm-para">An "Abstract Datatype" (ADT) is a specification of a set of data and the set of operations that can be performed on the data. Such a data type is abstract in the sense that it is independent of various concrete implementations. The definition can be mathematical, or it can be programmed as an interface. A first class ADT supports the creation of multiple instances of the ADT, and the interface normally provides a constructor, which returns an abstract handle to new data, and several operations, which are functions accepting the abstract handle as an argument.</p>
    */
    AbstractDatatype: prefixer('AbstractDatatype'),

    /**
    * **[OLE DB name](http://qudt.org/schema/qudt/oleDBName)** (property)
    * 
    * OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE.
    */
    oleDBName: prefixer('oleDBName'),

    /**
    * **[Structured Data Type](http://qudt.org/schema/qudt/StructuredDatatype)** (class)
    * 
    * A "Structured Datatype", in contrast to scalar data types, is used to characterize classes of more complex data structures, such as linked or indexed lists, trees, ordered trees, and multi-dimensional file formats.
    */
    StructuredDatatype: prefixer('StructuredDatatype'),

    /**
    * **[QUDT Concept](http://qudt.org/schema/qudt/Concept)** (class)
    * 
    * The root class for all QUDT concepts.
    */
    Concept: prefixer('Concept'),

    /**
    * **[Aerospace coordinate system](http://qudt.org/schema/qudt/AerospaceCoordinateSystem)** (class)
    * 
    * A sub-type of 'Coordinate system'. Detailed desciption to be provided in a future version.
    */
    AerospaceCoordinateSystem: prefixer('AerospaceCoordinateSystem'),

    /**
    * **[abbreviation](http://qudt.org/schema/qudt/abbreviation)** (property)
    * 
    * An abbreviation for a unit is a short ASCII string that is used in place of the full name for the unit in contexts where non-ASCII characters would be problematic, or where using the abbreviation will enhance readability. When a power of abase unit needs to be expressed, such as squares this can be done using abbreviations rather than symbols. For example, <em>sq ft</em> means <em>square foot</em>, and <em>cu ft</em> means <em>cubic foot</em>.
    */
    abbreviation: prefixer('abbreviation'),

    /**
    * **[Coordinate system](http://qudt.org/schema/qudt/CoordinateSystem)** (class)
    * 
    * In geometry, a coordinate system is a system which uses one or more numbers, or coordinates, to uniquely determine the position of a point or other geometric element on a manifold such as Euclidean space. The order of the coordinates is significant and they are sometimes identified by their position in an ordered tuple and sometimes by a letter, as in 'the x-coordinate'.
    * 
    * 
    * 
    * In elementary mathematics the coordinates are taken to be real numbers, but may be complex numbers or elements of a more abstract system such as a commutative ring. The use of a coordinate system allows problems in geometry to be translated into problems about numbers and vice versa; this is the basis of analytic geometry.
    * 
    * 
    * 
    * In astronomy, a celestial coordinate system is a system for specifying positions of celestial objects: satellites, planets, stars, galaxies, and so on. Coordinate systems can specify a position in 3-dimensional space, or merely the direction of the object on the celestial sphere, if its distance is not known or not important.
    * 
    * 
    * 
    * The coordinate systems are implemented in either spherical coordinates or rectangular coordinates. Spherical coordinates, projected on the celestial sphere, are analogous to the geographic coordinate system used on the surface of the Earth. These differ in their choice of fundamental plane, which divides the celestial sphere into two equal hemispheres along a great circle. Rectangular coordinates, in appropriate units, are simply the cartesian equivalent of the spherical coordinates, with the same fundamental (x,y) plane and primary (x-axis) direction. Each coordinate system is named for its choice of fundamental plane.
    */
    CoordinateSystem: prefixer('CoordinateSystem'),

    /**
    * **[max inclusive](http://qudt.org/schema/qudt/maxInclusive)** (property)
    * 
    * maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type.
    */
    maxInclusive: prefixer('maxInclusive'),

    /**
    * **[Algebraic Datatype](http://qudt.org/schema/qudt/AlgebraicDatatype)** (class)
    * 
    * <p class="lm-para">An "Algebraic Datatype" is a datatype each of whose values are data from other data types wrapped in one of the constructors of the data type. Any wrapped datum is an argument to the constructor. In contrast to other data types, the constructor is not executed and the only way to operate on the data is to unwrap the constructor using pattern matching.</p>
    * <p class="lm-para">The most common algebraic data type is a list with two constructors: Nil or [] for an empty list, and Cons (an abbreviation of constructor), ::, or : for the combination of a new element with a shorter list (for example (Cons 1 '(2 3 4)) or 1:[2,3,4]).</p>
    * <p class="lm-para">Special cases of algebraic types are product types i.e. records (only one constructor) and enumerated types (many constructors with no arguments). Algebraic types are one kind of composite type (i.e. a type formed by combining other types).</p>
    * <p class="lm-para">An algebraic data type may also be an abstract data type (ADT) if it is exported from a module without its constructors. Values of such a type can only be manipulated using functions defined in the same module as the type itself.</p>
    */
    AlgebraicDatatype: prefixer('AlgebraicDatatype'),

    /**
    * **[min inclusive](http://qudt.org/schema/qudt/minInclusive)** (property)
    * 
    * minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type.
    */
    minInclusive: prefixer('minInclusive'),

    /**
    * **[Alignment type](http://qudt.org/schema/qudt/AlignmentType)** (class)
    * 
    * Specifies how a physical data field is aligned. The alignment could be at a bit, byte or word boundary.
    */
    AlignmentType: prefixer('AlignmentType'),

    /**
    * **[Enumerated Value](http://qudt.org/schema/qudt/EnumeratedValue)** (class)
    * 
    * <p>This class is for all enumerated and/or coded values.  For example, it contains the dimension objects that are the basis elements in some abstract vector space associated with a quantity kind system. Another use is for the base dimensions for quantity systems. Each quantity kind system that defines a base set has a corresponding ordered enumeration whose elements are the dimension objects for the base quantity kinds. The order of the dimensions in the enumeration determines the canonical order of the basis elements in the corresponding abstract vector space.</p>
    * 
    * <p>An enumeration is a set of literals from which a single value is selected. Each literal can have a tag as an integer within a standard encoding appropriate to the range of integer values. Consistency of enumeration types will allow them, and the enumerated values, to be referred to unambiguously either through symbolic name or encoding. Enumerated values are also controlled vocabularies and as such need to be standardized. Without this consistency enumeration literals can be stated differently and result in  data conflicts and misinterpretations.</p>
    * 
    * <p>The tags are a set of positive whole numbers, not necessarily contiguous and having no numerical significance, each corresponding to the associated literal identifier. An order attribute can also be given on the enumeration elements. An enumeration can itself be a member of an enumeration. This allows enumerations to be enumerated in a selection. Enumerations are also subclasses of Scalar Datatype. This allows them to be used as the reference of a datatype specification.</p>
    */
    EnumeratedValue: prefixer('EnumeratedValue'),

    /**
    * **[Angle unit](http://qudt.org/schema/qudt/AngleUnit)** (class)
    * 
    * All units relating to specification of angles.
    */
    AngleUnit: prefixer('AngleUnit'),

    /**
    * **[informative reference](http://qudt.org/schema/qudt/informativeReference)** (property)
    * 
    * Provides a way to reference a source that provided useful but non-normative information.
    */
    informativeReference: prefixer('informativeReference'),

    /**
    * **[Dimensionless Unit](http://qudt.org/schema/qudt/DimensionlessUnit)** (class)
    * 
    * A Dimensionless Unit is a quantity for which all the exponents of the factors corresponding to the base quantities in its quantity dimension are zero.
    */
    DimensionlessUnit: prefixer('DimensionlessUnit'),

    /**
    * **[Array Type](http://qudt.org/schema/qudt/Array)** (class)
    * 
    * An array is represented as ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'. Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array. The property 'type:typeMatrix' must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type.
    */
    Array: prefixer('Array'),

    /**
    * **[Composite Data Type](http://qudt.org/schema/qudt/CompositeDatatype)** (class)
    * 
    * Composite types are datatypes which can be constructed in a programming language out of that language's basic primitive types and other composite types. The act of constructing a composite type is known as composition.
    */
    CompositeDatatype: prefixer('CompositeDatatype'),

    /**
    * **[Array data order type](http://qudt.org/schema/qudt/ArrayDataOrderType)** (class)
    * 
    * A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.
    */
    ArrayDataOrderType: prefixer('ArrayDataOrderType'),

    /**
    * **[Array Index Type](http://qudt.org/schema/qudt/ArrayIndex)** (class)
    * 
    * An Array Index Type is a data type that specifies the properties of data structures that hold array indexes.
    */
    ArrayIndex: prefixer('ArrayIndex'),

    /**
    * **[description (plain text)](http://qudt.org/schema/qudt/plainTextDescription)** (property)
    * 
    * A plain text description is used to provide a description with only simple ASCII characters for cases where LaTeX , HTML or other markup would not be appropriate.
    */
    plainTextDescription: prefixer('plainTextDescription'),

    /**
    * **[Vector Type](http://qudt.org/schema/qudt/Vector)** (class)
    * 
    * A Vector Type is a data type that specifies the properties of data structures that hold vectors.
    */
    Vector: prefixer('Vector'),

    /**
    * **[Array Index Type](http://qudt.org/schema/qudt/ArrayIndexType)** (class)
    * 
    * An Array Index Type is a data type that specifies the properties of data structures that hold array indexes.
    */
    ArrayIndexType: prefixer('ArrayIndexType'),

    /**
    * **[element type count](http://qudt.org/schema/qudt/elementTypeCount)** (property)
    * 
    * This property determines the allowed number of element types that a structured data type may have.
    */
    elementTypeCount: prefixer('elementTypeCount'),

    /**
    * **[Vector Type](http://qudt.org/schema/qudt/VectorType)** (class)
    * 
    * A Vector Type is a data type that specifies the properties of data structures that hold vectors.
    */
    VectorType: prefixer('VectorType'),

    /**
    * **[Array Type](http://qudt.org/schema/qudt/ArrayType)** (class)
    * 
    * <p>An <em>array type</em> is a type specification for ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'.</p>
    * 
    * <p>Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array.</p>
    * 
    * <p>The property <em>qudt:typeMatrix</em> must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type.</p>
    */
    ArrayType: prefixer('ArrayType'),

    /**
    * **[Associative Array](http://qudt.org/schema/qudt/AssociativeArray)** (class)
    * 
    * An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.
    */
    AssociativeArray: prefixer('AssociativeArray'),

    /**
    * **[Collection Type](http://qudt.org/schema/qudt/Collection)** (class)
    * 
    * A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type.
    */
    Collection: prefixer('Collection'),

    /**
    * **[id](http://qudt.org/schema/qudt/id)** (property)
    * 
    * The "qudt:id" is an identifier string that uniquely identifies a QUDT concept.  The identifier is constructed using a prefix. For example, units are coded using the pattern: "UCCCENNNN", where "CCC" is a numeric code or a category and "NNNN" is a digit string for a member element of that category. For scaled units there may be an addition field that has the format "QNN" where "NN" is a digit string representing an exponent power, and "Q" is a qualifier that indicates with the code "P" that the power is a positive decimal exponent, or the code "N" for a negative decimal exponent, or the code "B" for binary positive exponents.
    */
    id: prefixer('id'),

    /**
    * **[Map Type](http://qudt.org/schema/qudt/Map)** (class)
    * 
    * A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.
    */
    Map: prefixer('Map'),

    /**
    * **[Associative Array Type](http://qudt.org/schema/qudt/AssociativeArrayType)** (class)
    * 
    * An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.
    */
    AssociativeArrayType: prefixer('AssociativeArrayType'),

    /**
    * **[Collection Type](http://qudt.org/schema/qudt/CollectionType)** (class)
    * 
    * A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type.
    */
    CollectionType: prefixer('CollectionType'),

    /**
    * **[Map Type](http://qudt.org/schema/qudt/MapType)** (class)
    * 
    * A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.
    */
    MapType: prefixer('MapType'),

    /**
    * **[Aural Cue](http://qudt.org/schema/qudt/AuralCue)** (class)
    * 
    * An aural cue is a sound produced by a device or a system that is used to alert personnel of of an advisory, cautionary, warning, or emergency state.
    */
    AuralCue: prefixer('AuralCue'),

    /**
    * **[function arity](http://qudt.org/schema/qudt/functionArity)** (property)
    * 
    * This property is used to state the number of arguments for a function type.
    */
    functionArity: prefixer('functionArity'),

    /**
    * **[Axial Orientation Type](http://qudt.org/schema/qudt/AxialOrientationType)** (class)
    * 
    * The axial orientation of a coordinate system frame axis.
    */
    AxialOrientationType: prefixer('AxialOrientationType'),

    /**
    * **[Boolean Type](http://qudt.org/schema/qudt/BooleanType)** (class)
    * 
    * A boolean data type can take on only two values.
    */
    BooleanType: prefixer('BooleanType'),

    /**
    * **[Signed Short Integer Type](http://qudt.org/schema/qudt/SignedShortIntegerType)** (class)
    * 
    * A Signed Short Integer is a signed integer that can be represented in four octets (32 bits) of machine memory.
    */
    SignedShortIntegerType: prefixer('SignedShortIntegerType'),

    /**
    * **[Balanced Tree Type](http://qudt.org/schema/qudt/BalancedTree)** (class)
    * 
    * A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of "much farther" and different amounts of work to keep them balanced.
    */
    BalancedTree: prefixer('BalancedTree'),

    /**
    * **[pattern](http://qudt.org/schema/qudt/pattern)** (property)
    * 
    * A pattern is a constraint on the value space of a datatype which is achieved by constraining the lexical space to literals which match a specific pattern. The value of pattern must be a regular expression.
    */
    pattern: prefixer('pattern'),

    /**
    * **[Tree Type](http://qudt.org/schema/qudt/Tree)** (class)
    * 
    * A "Tree" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph.
    */
    Tree: prefixer('Tree'),

    /**
    * **[Balanced Tree Type](http://qudt.org/schema/qudt/BalancedTreeType)** (class)
    * 
    * A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of "much farther" and different amounts of work to keep them balanced.
    */
    BalancedTreeType: prefixer('BalancedTreeType'),

    /**
    * **[Tree Type](http://qudt.org/schema/qudt/TreeType)** (class)
    * 
    * A "Tree" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph.
    */
    TreeType: prefixer('TreeType'),

    /**
    * **[code](http://qudt.org/schema/qudt/code)** (property)
    * 
    * A code is a string that uniquely identifies a QUDT concept. The use of this property has been deprecated.
    */
    code: prefixer('code'),

    /**
    * **[Base Dimension Magnitude](http://qudt.org/schema/qudt/BaseDimensionMagnitude)** (class)
    * 
    * <p class="lm-para">A <em>Dimension</em> expresses a magnitude for a base quantiy kind such as mass, length and time.</p>
    * <p class="lm-para">DEPRECATED - each exponent is expressed as a property. Keep until a validaiton of this has been done.</p>
    */
    BaseDimensionMagnitude: prefixer('BaseDimensionMagnitude'),

    /**
    * **[X-Axis Definition](http://qudt.org/schema/qudt/xAxisDefinition)** (property)
    * 
    * The definition of the X-Axis could be an intersection, cross-product or other function of a  meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.
    */
    xAxisDefinition: prefixer('xAxisDefinition'),

    /**
    * **[Big Integer Type](http://qudt.org/schema/qudt/BigIntegerType)** (class)
    * 
    * A Big Integer is an integer that can be represented in eight octets (64 bits) of machine memory. Big integers may be signed or unsigned.
    */
    BigIntegerType: prefixer('BigIntegerType'),

    /**
    * **[Y-Axis definition](http://qudt.org/schema/qudt/yAxisDefinition)** (property)
    * 
    * The definition of the Y-Axis could be an intersection, cross-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.
    */
    yAxisDefinition: prefixer('yAxisDefinition'),

    /**
    * **[Integer Datatype](http://qudt.org/schema/qudt/IntegerDatatype)** (class)
    * 
    * An Integer Type is a data type that specifies how integer numbers are represented and stored in machine memory.
    */
    IntegerDatatype: prefixer('IntegerDatatype'),

    /**
    * **[Z-Axis definition](http://qudt.org/schema/qudt/zAxisDefinition)** (property)
    * 
    * The definition of the Y-Axis could be an intersection, croos-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.
    */
    zAxisDefinition: prefixer('zAxisDefinition'),

    /**
    * **[Binary Prefix](http://qudt.org/schema/qudt/BinaryPrefix)** (class)
    * 
    * A <em>Binary Prefix</em> is a prefix for multiples of units in data processing, data transmission, and digital information, notably the bit and the byte, to indicate multiplication by a power of 2.
    */
    BinaryPrefix: prefixer('BinaryPrefix'),

    /**
    * **[Binary Tree Type](http://qudt.org/schema/qudt/BinaryTree)** (class)
    * 
    * A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children.
    */
    BinaryTree: prefixer('BinaryTree'),

    /**
    * **[accuracy](http://qudt.org/schema/qudt/accuracy)** (property)
    * 
    * Accuracy is the degree to which a given quantity is correct and free from error. For example, a quantity specified as 100+/-1 has an (absolute) accuracy of +/-1 (meaning its true value can fall in the range 99-101), while a quantity specified as 100+/-2% has a (relative) accuracy of +/-2% (meaning its true value can fall in the range 98-102).
    * 
    * The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits.
    */
    accuracy: prefixer('accuracy'),

    /**
    * **[Binary Tree Type](http://qudt.org/schema/qudt/BinaryTreeType)** (class)
    * 
    * A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children.
    */
    BinaryTreeType: prefixer('BinaryTreeType'),

    /**
    * **[Bit Encoding](http://qudt.org/schema/qudt/BitEncodingType)** (class)
    * 
    * A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True.
    */
    BitEncodingType: prefixer('BitEncodingType'),

    /**
    * **[Encoding](http://qudt.org/schema/qudt/Encoding)** (class)
    * 
    * An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8.
    */
    Encoding: prefixer('Encoding'),

    /**
    * **[Bit Field Type](http://qudt.org/schema/qudt/BitFieldType)** (class)
    * 
    * A bit field is a common idiom used in computer programming to store a set of Boolean datatype flags compactly, as a series of bits. The bit field is stored in an integral type of known, fixed bit-width. Each Boolean flag is stored in a separate bit. Usually the source code will define a set of constants, each a power of two, that semantically associate each individual bit with its respective Boolean flag. The bitwise operators and, or, and not are used in combination to set, reset and test the flags.
    */
    BitFieldType: prefixer('BitFieldType'),

    /**
    * **[precision](http://qudt.org/schema/qudt/precision)** (property)
    * 
    * Precision is the number of digits used to perform a given computation. The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits.
    * 
    * For a given numeric data type, the value of type:precision (?p) is related to the values of type:maxMantissa (?M) and type:base (?b) by the formula
    * 
    * ?p := log(?b, ?M)
    * 
    * where log(a,y) = x iff y=a^x.
    */
    precision: prefixer('precision'),

    /**
    * **[Scalar Datatype](http://qudt.org/schema/qudt/ScalarDatatype)** (class)
    * 
    * Scalar data types are those that have a single value. The permissible values are defined over a domain that may be integers, float, character or boolean. Often a scalar data type is referred to as a primitive data type.
    */
    ScalarDatatype: prefixer('ScalarDatatype'),

    /**
    * **[Ordinal Data Type](http://qudt.org/schema/qudt/OrdinalType)** (class)
    * 
    * An ordinal data type is a data type that specifies the properties of values that can easily be put in a one to one correspondence with a subset of the natural numbers. Examples include boolean, character, and integer data types.
    */
    OrdinalType: prefixer('OrdinalType'),

    /**
    * **[boolean value](http://qudt.org/schema/qudt/BooleanTypeEnumeratedValue)** (class)
    * 
    * Specifies how a boolean value is expressed
    */
    BooleanTypeEnumeratedValue: prefixer('BooleanTypeEnumeratedValue'),

    /**
    * **[Byte Encoding](http://qudt.org/schema/qudt/ByteEncodingType)** (class)
    * 
    * This class contains the various ways that information may be encoded into bytes.
    */
    ByteEncodingType: prefixer('ByteEncodingType'),

    /**
    * **[max exclusive](http://qudt.org/schema/qudt/maxExclusive)** (property)
    * 
    * maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.
    */
    maxExclusive: prefixer('maxExclusive'),

    /**
    * **[Coordinate Center Type](http://qudt.org/schema/qudt/CoordinateCenterType)** (class)
    * 
    * An enumeration of coordinate centers for coordinate systems, such as "Earth centered", "Mars centered", "Moon centered", "Sun centered",  and "Vehicle centered".
    */
    CoordinateCenterType: prefixer('CoordinateCenterType'),

    /**
    * **[Color Cue](http://qudt.org/schema/qudt/ColorCue)** (class)
    * 
    * A visual cue that uses color to distinguish it from other cues. Each color cue has exactly one corresponding coordinate point in the RGB space.
    */
    ColorCue: prefixer('ColorCue'),

    /**
    * **[Cardinality Type](http://qudt.org/schema/qudt/CardinalityType)** (class)
    * 
    * <p class="lm-para">In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \\(A = {2, 4, 6}\\) contains 3 elements, and therefore \\(A\\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.</p>
    */
    CardinalityType: prefixer('CardinalityType'),

    /**
    * **[Cartesian Coordinate Type](http://qudt.org/schema/qudt/CartesianCoordinates)** (class)
    * 
    * A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates.
    */
    CartesianCoordinates: prefixer('CartesianCoordinates'),

    /**
    * **[Coordinate System Type](http://qudt.org/schema/qudt/Coordinates)** (class)
    * 
    * A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.
    */
    Coordinates: prefixer('Coordinates'),

    /**
    * **[dimension](http://qudt.org/schema/qudt/dimension)** (property)
    * 
    * The number of elements in a vector.
    */
    dimension: prefixer('dimension'),

    /**
    * **[Cartesian Coordinate Type](http://qudt.org/schema/qudt/CartesianCoordinatesType)** (class)
    * 
    * A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates.
    */
    CartesianCoordinatesType: prefixer('CartesianCoordinatesType'),

    /**
    * **[Char Encoding Type](http://qudt.org/schema/qudt/CharEncodingType)** (class)
    * 
    * The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes.
    */
    CharEncodingType: prefixer('CharEncodingType'),

    /**
    * **[Character Type](http://qudt.org/schema/qudt/CharacterType)** (class)
    * 
    * A Character Type is a data type that defines the type and encoding of single characters.
    */
    CharacterType: prefixer('CharacterType'),

    /**
    * **[Citation](http://qudt.org/schema/qudt/Citation)** (class)
    * 
    * Provides a simple way of making citations.
    */
    Citation: prefixer('Citation'),

    /**
    * **[currency code](http://qudt.org/schema/qudt/currencyCode)** (property)
    * 
    * Alphabetic Currency Code as defined by ISO 4217. For example, US Dollar has the code 'USD'.
    */
    currencyCode: prefixer('currencyCode'),

    /**
    * **[QUDT DataSet Element](http://qudt.org/schema/qudt/DataSetElement)** (class)
    * 
    * A field is a tuple that carries a name, a type and optionally other properties that characterize a member element of a composite data strucuture.
    */
    DataSetElement: prefixer('DataSetElement'),

    /**
    * **[currency exponent](http://qudt.org/schema/qudt/currencyExponent)** (property)
    * 
    * The currency exponent indicates the number of decimal places between a major currency unit and its minor currency unit. For example, the US dollar is the major currency unit of the United States, and the US cent is the minor currency unit. Since one cent is 1/100 of a dollar, the US dollar has a currency exponent of 2. However, the Japanese Yen has no minor currency units, so the yen has a currency exponent of 0.
    */
    currencyExponent: prefixer('currencyExponent'),

    /**
    * **[Composite Data Structure](http://qudt.org/schema/qudt/CompositeDataStructure)** (class)
    * 
    * 'Composite Data Structure', also referred to as 'Data Record' is a datatype that aggregates element of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels.
    */
    CompositeDataStructure: prefixer('CompositeDataStructure'),

    /**
    * **[currency number](http://qudt.org/schema/qudt/currencyNumber)** (property)
    * 
    * Numeric currency Code as defined by ISO 4217. For example, US Dollar has the number 840.
    */
    currencyNumber: prefixer('currencyNumber'),

    /**
    * **[QUDT Datatype](http://qudt.org/schema/qudt/Datatype)** (class)
    * 
    * A data type is a definition of a set of values (for example, "all integers between 0 and 10"), and the allowable operations on those values; the meaning of the data; and the way values of that type can be stored. Some types are primitive - built-in to the language, with no visible internal structure - e.g. Boolean; others are composite - constructed from one or more other types (of either kind) - e.g. lists, arrays, structures, unions. Object-oriented programming extends this with classes which encapsulate both the structure of a type and the operations that can be performed on it. Some languages provide strong typing, others allow implicit type conversion and/or explicit type conversion.
    */
    Datatype: prefixer('Datatype'),

    /**
    * **[Padding type](http://qudt.org/schema/qudt/PaddingType)** (class)
    * 
    * This describes how unused bits of a field are filled. Unused bits could be set to one or zero. A third option is "don't care".
    */
    PaddingType: prefixer('PaddingType'),

    /**
    * **[Composite Table Type](http://qudt.org/schema/qudt/CompositeTable)** (class)
    * 
    * A sub-type of 'Table Type'. Detailed desciption to be provided in a future version.
    */
    CompositeTable: prefixer('CompositeTable'),

    /**
    * **[Table Type](http://qudt.org/schema/qudt/Table)** (class)
    * 
    * A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use.
    */
    Table: prefixer('Table'),

    /**
    * **[Constant value](http://qudt.org/schema/qudt/ConstantValue)** (class)
    * 
    * Used to specify the values of a constant.
    */
    ConstantValue: prefixer('ConstantValue'),

    /**
    * **[Quantity value](http://qudt.org/schema/qudt/QuantityValue)** (class)
    * 
    * A <i>Quantity Value</i> expresses the magnitude and kind of a quantity and is given by the product of a numerical value <code>n</code> and a unit of measure <code>U</code>. The number multiplying the unit is referred to as the numerical value of the quantity expressed in that unit. Refer to <a href="http://physics.nist.gov/Pubs/SP811/sec07.html">NIST SP 811 section 7</a> for more on quantity values.
    */
    QuantityValue: prefixer('QuantityValue'),

    /**
    * **[Container](http://qudt.org/schema/qudt/Container)** (class)
    * 
    * A container is a class, a data structure, or an abstract data type (ADT) whose instances are collections of other objects. They are used to store objects in an organized way following specific access rules.
    */
    Container: prefixer('Container'),

    /**
    * **[Nominal scale](http://qudt.org/schema/qudt/NominalScale)** (class)
    * 
    * A nominal scale differentiates between items or subjects based only on their names or (meta-)categories and other qualitative classifications they belong to; thus dichotomous data involves the construction of classifications as well as the classification of items. Discovery of an exception to a classification can be viewed as progress. Numbers may be used to represent the variables but the numbers do not have numerical value or relationship: For example, a Globally unique identifier. Examples of these classifications include gender, nationality, ethnicity, language, genre, style, biological species, and form. In a university one could also use hall of affiliation as an example.
    */
    NominalScale: prefixer('NominalScale'),

    /**
    * **[Coordinate Member Type](http://qudt.org/schema/qudt/CoordinateMember)** (class)
    * 
    * A Coordinate Member Type is a data type that defines the properties of a coordinate in a coordinate system.
    */
    CoordinateMember: prefixer('CoordinateMember'),

    /**
    * **[Tuple Member Type](http://qudt.org/schema/qudt/TupleMember)** (class)
    * 
    * A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples.
    */
    TupleMember: prefixer('TupleMember'),

    /**
    * **[Tuple Member Type](http://qudt.org/schema/qudt/TupleMemberType)** (class)
    * 
    * A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples.
    */
    TupleMemberType: prefixer('TupleMemberType'),

    /**
    * **[Reference Frame](http://qudt.org/schema/qudt/ReferenceFrame)** (class)
    * 
    * A reference frame (or frame of reference) in physics, may refer to a coordinate system or set of axes.
    * The frame serves as the datum to measure the position, orientation, and other properties of objects in it.
    * Reference frame may refer to an observational reference frame tied to the state of motion of an observer.
    * Reference frame may also refer to both an observational reference frame and an attached coordinate system as a unit.
    */
    ReferenceFrame: prefixer('ReferenceFrame'),

    /**
    * **[Coordinate System Type](http://qudt.org/schema/qudt/CoordinateSystemType)** (class)
    * 
    * The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system. The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars. Precise definition of the coordinate frame, however, usually takes much more effort. As a result, the primary purpose of this section is to provide a detailed description of a number of different coordinate frames commonly used in lunar and Mars mission analysis. All of the coordinate frames described in this section are standard, right-handed coordinate frames with orthogonal axes at the origin. In general, the coordinate frame and the coordinate center are independent quantities. In other words, multiple coordinate systems can be defined using the same coordinate center (with different frames) or the same coordinate frame (with different centers).
    */
    CoordinateSystemType: prefixer('CoordinateSystemType'),

    /**
    * **[Tuple Type](http://qudt.org/schema/qudt/TupleType)** (class)
    * 
    * <p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>
    */
    TupleType: prefixer('TupleType'),

    /**
    * **[Coordinates-2D-Double precision](http://qudt.org/schema/qudt/Coordinates-2D-DoublePrecision)** (class)
    * 
    * 2D coordinates in double floating point precision for locating a point in physical space
    */
    'Coordinates-2D-DoublePrecision': prefixer('Coordinates-2D-DoublePrecision'),

    /**
    * **[2D Coordinate Type](http://qudt.org/schema/qudt/Coordinates-2D-Type)** (class)
    * 
    * A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system.
    */
    'Coordinates-2D-Type': prefixer('Coordinates-2D-Type'),

    /**
    * **[2D Coordinate Type](http://qudt.org/schema/qudt/Coordinates-2D)** (class)
    * 
    * A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system.
    */
    'Coordinates-2D': prefixer('Coordinates-2D'),

    /**
    * **[Cartesian Coordinates 2D Single Precision](http://qudt.org/schema/qudt/Coordinates-2D-SinglePrecision)** (class)
    * 
    * 2D coordinates in single floating point precision for locating a point in physical space
    */
    'Coordinates-2D-SinglePrecision': prefixer('Coordinates-2D-SinglePrecision'),

    /**
    * **[is Delta Quantity](http://qudt.org/schema/qudt/isDeltaQuantity)** (property)
    * 
    * This property is used to identify a Quantity instance that is a measure of a change, or interval, of some property, rather than a measure of its absolute value. This is important for measurements such as temperature differences where the conversion among units would be calculated differently because of offsets.
    */
    isDeltaQuantity: prefixer('isDeltaQuantity'),

    /**
    * **[Two-Tuple Type](http://qudt.org/schema/qudt/TwoTupleType)** (class)
    * 
    * A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples.
    */
    TwoTupleType: prefixer('TwoTupleType'),

    /**
    * **[Two-Tuple Type](http://qudt.org/schema/qudt/Two-Tuple)** (class)
    * 
    * A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples.
    */
    'Two-Tuple': prefixer('Two-Tuple'),

    /**
    * **[normative reference (ISO)](http://qudt.org/schema/qudt/isoNormativeReference)** (property)
    * 
    * Provides a way to reference the ISO unit definition.
    */
    isoNormativeReference: prefixer('isoNormativeReference'),

    /**
    * **[3D Coordinate Type](http://qudt.org/schema/qudt/Coordinates-3D-Type)** (class)
    * 
    * A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.
    */
    'Coordinates-3D-Type': prefixer('Coordinates-3D-Type'),

    /**
    * **[normative reference](http://qudt.org/schema/qudt/normativeReference)** (property)
    * 
    * Provides a way to reference information that is an authorative source providing a standard definition
    */
    normativeReference: prefixer('normativeReference'),

    /**
    * **[3D Coordinates (Double Precision)](http://qudt.org/schema/qudt/Coordinates-3D-DoublePrecision)** (class)
    * 
    * 3D coordinates in double floating point precision for locating a point in physical space
    */
    'Coordinates-3D-DoublePrecision': prefixer('Coordinates-3D-DoublePrecision'),

    /**
    * **[3D Coordinate Type](http://qudt.org/schema/qudt/Coordinates-3D)** (class)
    * 
    * A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.
    */
    'Coordinates-3D': prefixer('Coordinates-3D'),

    /**
    * **[3D Coordinates (Single Precision)](http://qudt.org/schema/qudt/Coordinates-3D-SinglePrecision)** (class)
    * 
    * 3D coordinates in single floating point precision for locating a point in physical space
    */
    'Coordinates-3D-SinglePrecision': prefixer('Coordinates-3D-SinglePrecision'),

    /**
    * **[latex symbol](http://qudt.org/schema/qudt/latexSymbol)** (property)
    * 
    * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
    */
    latexSymbol: prefixer('latexSymbol'),

    /**
    * **[Three-Tuple Type](http://qudt.org/schema/qudt/ThreeTupleType)** (class)
    * 
    * A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members.
    */
    ThreeTupleType: prefixer('ThreeTupleType'),

    /**
    * **[Three-Tuple Type](http://qudt.org/schema/qudt/Three-Tuple)** (class)
    * 
    * A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members.
    */
    'Three-Tuple': prefixer('Three-Tuple'),

    /**
    * **[mantissa](http://qudt.org/schema/qudt/mantissa)** (property)
    * 
    * In scientific notation, the mantissa of a real number is the integer coefficient preceding the base raised to the exponent.
    */
    mantissa: prefixer('mantissa'),

    /**
    * **[Tuple Type](http://qudt.org/schema/qudt/Tuple)** (class)
    * 
    * <p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>
    */
    Tuple: prefixer('Tuple'),

    /**
    * **[Counting Unit](http://qudt.org/schema/qudt/CountingUnit)** (class)
    * 
    * Used for all units that express counts. Examples are Atomic Number, Number, Number per Year, Percent and Sample per Second.
    */
    CountingUnit: prefixer('CountingUnit'),

    /**
    * **[Currency Unit](http://qudt.org/schema/qudt/CurrencyUnit)** (class)
    * 
    * Currency Units have their own subclass of unit because: (a) they have additonal properites such as 'country' and (b) their URIs do not conform to the same rules as other units.
    */
    CurrencyUnit: prefixer('CurrencyUnit'),

    /**
    * **[Date String Type](http://qudt.org/schema/qudt/DateStringType)** (class)
    * 
    * Date String Types are scalar data types that define the properties of strings that represent calendar dates.
    */
    DateStringType: prefixer('DateStringType'),

    /**
    * **[max mantissa](http://qudt.org/schema/qudt/maxMantissa)** (property)
    * 
    * <p>The maximium mantissa is the largest integer that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>maxMantissa}</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and  <em>precision</em> (<em>p</em>) are related by the formula: <em>M = b<sup></sup> - 1</em> .</p>
    */
    maxMantissa: prefixer('maxMantissa'),

    /**
    * **[Numeric Type](http://qudt.org/schema/qudt/NumericType)** (class)
    * 
    * Numeric data types are data types whose values denote quantities (in some mathematical number system).
    */
    NumericType: prefixer('NumericType'),

    /**
    * **[min mantissa](http://qudt.org/schema/qudt/minMantissa)** (property)
    * 
    * <p>The minimium mantissa is the negative integer with the greatest magnitude that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>minMantissa</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and <em>precision</em> (<em>p</em>) are related by the formula: <em>M = -(b<sup>p</sup> - 1)</em>.</p>
    */
    minMantissa: prefixer('minMantissa'),

    /**
    * **[Data Encoding](http://qudt.org/schema/qudt/DataEncoding)** (class)
    * 
    * <p><em>Data Encoding</em> expresses the properties that specify how data is represented at the bit and byte level. These properties are applicable to describing raw data.</p>
    */
    DataEncoding: prefixer('DataEncoding'),

    /**
    * **[Quantity Kind](http://qudt.org/schema/qudt/QuantityKind)** (class)
    * 
    * A <b>Quantity Kind</b> is any observable property that can be  measured and quantified numerically. Familiar examples include physical properties such as length, mass, time, force, energy, power, electric charge, etc. Less familiar examples include currency, interest rate, price to earning ratio, and information capacity.
    */
    QuantityKind: prefixer('QuantityKind'),

    /**
    * **[negative delta limit](http://qudt.org/schema/qudt/negativeDeltaLimit)** (property)
    * 
    * A negative change limit between consecutive sample values for a parameter. The Negative Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined.
    */
    negativeDeltaLimit: prefixer('negativeDeltaLimit'),

    /**
    * **[Temporal Type](http://qudt.org/schema/qudt/DateTimeStringType)** (class)
    * 
    * A class of data types for structures that represent temporal quantities. I.e. calendar dates, times, duration of time since a given epoch, etc.
    */
    DateTimeStringType: prefixer('DateTimeStringType'),

    /**
    * **[Date Time String Encoding Type](http://qudt.org/schema/qudt/DateTimeStringEncodingType)** (class)
    * 
    * Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules.
    */
    DateTimeStringEncodingType: prefixer('DateTimeStringEncodingType'),

    /**
    * **[String Encoding Type](http://qudt.org/schema/qudt/StringEncodingType)** (class)
    * 
    * A "Encoding" with the following instance(s): "UTF-16 String", "UTF-8 Encoding".
    */
    StringEncodingType: prefixer('StringEncodingType'),

    /**
    * **[String Type](http://qudt.org/schema/qudt/StringType)** (class)
    * 
    * A String Type is a data type that specifies the properties of data structures that hold strings.
    */
    StringType: prefixer('StringType'),

    /**
    * **[Positive delta limit](http://qudt.org/schema/qudt/positiveDeltaLimit)** (property)
    * 
    * A positive change limit between consecutive sample values for a parameter. The Positive Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined.
    */
    positiveDeltaLimit: prefixer('positiveDeltaLimit'),

    /**
    * **[Decimal Prefix](http://qudt.org/schema/qudt/DecimalPrefix)** (class)
    * 
    * A <em>Decimal Prefix</em> is a prefix for multiples of units that are powers of 10.
    */
    DecimalPrefix: prefixer('DecimalPrefix'),

    /**
    * **[Derived Unit](http://qudt.org/schema/qudt/DerivedUnit)** (class)
    * 
    * A DerivedUnit is a type specification for units that are derived from other units.
    */
    DerivedUnit: prefixer('DerivedUnit'),

    /**
    * **[Unit](http://qudt.org/schema/qudt/Unit)** (class)
    * 
    * A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \\(Q = nU\\).
    */
    Unit: prefixer('Unit'),

    /**
    * **[relative standard uncertainty](http://qudt.org/schema/qudt/relativeStandardUncertainty)** (property)
    * 
    * The relative standard uncertainty of a measurement is the (absolute) standard uncertainty divided by the magnitude of the exact value.
    */
    relativeStandardUncertainty: prefixer('relativeStandardUncertainty'),

    /**
    * **[Dictionary Type](http://qudt.org/schema/qudt/Dictionary)** (class)
    * 
    * A "Map".
    */
    Dictionary: prefixer('Dictionary'),

    /**
    * **[Dictionary Type](http://qudt.org/schema/qudt/DictionaryType)** (class)
    * 
    * A kind of "Map".
    */
    DictionaryType: prefixer('DictionaryType'),

    /**
    * **[Dimensional Data Type](http://qudt.org/schema/qudt/DimensionalDatatype)** (class)
    * 
    * A dimensional data type is a data type that specifies a physical quantity or unit of measure. Information about the physical dimensions of the quantities and units is embedded in their types.
    */
    DimensionalDatatype: prefixer('DimensionalDatatype'),

    /**
    * **[standard uncertainty](http://qudt.org/schema/qudt/standardUncertainty)** (property)
    * 
    * The standard uncertainty of a quantity is the estimated standard deviation of the mean taken from a series of measurements.
    */
    standardUncertainty: prefixer('standardUncertainty'),

    /**
    * **[symbol](http://qudt.org/schema/qudt/symbol)** (property)
    * 
    * The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.
    */
    symbol: prefixer('symbol'),

    /**
    * **[Floating Point Encoding](http://qudt.org/schema/qudt/FloatingPointEncodingType)** (class)
    * 
    * A "Encoding" with the following instance(s): "Double Precision Encoding", "Single Precision Real Encoding".
    */
    FloatingPointEncodingType: prefixer('FloatingPointEncodingType'),

    /**
    * **[Double Precision Type](http://qudt.org/schema/qudt/DoublePrecisionType)** (class)
    * 
    * A double precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so double precision data value on a 32-bit machine architecture occupies eight bytes of memory.
    */
    DoublePrecisionType: prefixer('DoublePrecisionType'),

    /**
    * **[ucum code](http://qudt.org/schema/qudt/ucumCode)** (property)
    * 
    * <p><em>ucumCode</em> associates a QUDT unit with its UCUM code (case-sensitive). </p><p>In SHACL the values are derived from specific ucum properties using 'sh:values'.</p>
    */
    ucumCode: prefixer('ucumCode'),

    /**
    * **[Single Precision Type](http://qudt.org/schema/qudt/SinglePrecisionType)** (class)
    * 
    * A single precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so a single precision data value on a 32-bit machine architecture occupies four bytes of memory.
    */
    SinglePrecisionType: prefixer('SinglePrecisionType'),

    /**
    * **[udunits code](http://qudt.org/schema/qudt/udunitsCode)** (property)
    * 
    * The UDUNITS package supports units of physical quantities. Its C library provides for arithmetic manipulation of units and for conversion of numeric values between compatible units. The package contains an extensive unit database, which is in XML format and user-extendable. The package also contains a command-line utility for investigating units and converting values.
    */
    udunitsCode: prefixer('udunitsCode'),

    /**
    * **[Earth Coordinate System Type](http://qudt.org/schema/qudt/EarthCoordinateSystem)** (class)
    * 
    * A"Trajectory Coordinate System" for all earth-centered coordinates, such as "Earth mean equator and prime meridian coordinate system", "Earth true equator and prime meridian of epoch coordinate system", "International celestial reference system", "International terrestrial reference system", "Sun centered international celestial reference system", "Vehicle centered international celestial reference system".
    */
    EarthCoordinateSystem: prefixer('EarthCoordinateSystem'),

    /**
    * **[unece common code](http://qudt.org/schema/qudt/uneceCommonCode)** (property)
    * 
    * The UN/CEFACT Recommendation 20 provides three character alphabetic and alphanumeric codes for representing units of measurement for length, area, volume/capacity, mass (weight), time, and other quantities used in international trade. The codes are intended for use in manual and/or automated systems for the exchange of information between participants in international trade.
    */
    uneceCommonCode: prefixer('uneceCommonCode'),

    /**
    * **[Trajectory Coordinate System](http://qudt.org/schema/qudt/TrajectoryCoordinateSystem)** (class)
    * 
    * A "Coordinate System".
    */
    TrajectoryCoordinateSystem: prefixer('TrajectoryCoordinateSystem'),

    /**
    * **[Real Single Precision Type](http://qudt.org/schema/qudt/RealSinglePrecisionType)** (class)
    * 
    * A real single precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes. An example of a real single precisoin data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 4 bytes for storage on 32-bit machine architectures.
    */
    RealSinglePrecisionType: prefixer('RealSinglePrecisionType'),

    /**
    * **[Engineering Value Tuple Member](http://qudt.org/schema/qudt/EngineeringValueTupleMember)** (class)
    * 
    * A sub-type of 'Tuple Member Type'. Detailed desciption to be provided in a future version.
    */
    EngineeringValueTupleMember: prefixer('EngineeringValueTupleMember'),

    /**
    * **[Raw value tuple member](http://qudt.org/schema/qudt/RawValueTupleMember)** (class)
    * 
    * A sub-type of 'Tuple Member Type'. Detailed desciption to be provided in a future version.
    */
    RawValueTupleMember: prefixer('RawValueTupleMember'),

    /**
    * **[Enumeration](http://qudt.org/schema/qudt/Enumeration)** (class)
    * 
    * <p>An enumeration is a set of literals from which a single value is selected. Each literal can have a tag as an integer within a standard encoding appropriate to the range of integer values. Consistency of enumeration types will allow them, and the enumerated values, to be referred to unambiguously either through symbolic name or encoding. Enumerated values are also controlled vocabularies and as such need to be standardized. Without this consistency enumeration literals can be stated differently and result in  data conflicts and misinterpretations.</p>
    * 
    * <p>The tags are a set of positive whole numbers, not necessarily contiguous and having no numerical significance, each corresponding to the associated literal identifier. An order attribute can also be given on the enumeration elements. An enumeration can itself be a member of an enumeration. This allows enumerations to be enumerated in a selection. Enumerations are also subclasses of <em>Scalar Datatype</em>. This allows them to be used as the reference of a datatype specification.</p>
    */
    Enumeration: prefixer('Enumeration'),

    /**
    * **[Enumeration scale](http://qudt.org/schema/qudt/EnumerationScale)** (class)
    * 
    * A sub-type of 'DTYPE Enumeration'. Detailed desciption to be provided in a future version.
    */
    EnumerationScale: prefixer('EnumerationScale'),

    /**
    * **[Scale](http://qudt.org/schema/qudt/Scale)** (class)
    * 
    * Scales (also called "scales of measurement" or "levels of measurement")  are expressions that typically refer to the theory of scale types.
    */
    Scale: prefixer('Scale'),

    /**
    * **[Frame Type](http://qudt.org/schema/qudt/FrameType)** (class)
    * 
    * This class contains elements which specify the intertial type of a coordinate frame as either inertial, rotating, or non-rotating.
    */
    FrameType: prefixer('FrameType'),

    /**
    * **[Field Type](http://qudt.org/schema/qudt/FieldType)** (class)
    * 
    * A sub-type of 'Composite Data Type'. Detailed desciption to be provided in a future version.
    */
    FieldType: prefixer('FieldType'),

    /**
    * **[Figure](http://qudt.org/schema/qudt/Figure)** (class)
    * 
    * A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.
    */
    Figure: prefixer('Figure'),

    /**
    * **[byte order](http://qudt.org/schema/qudt/byteOrder)** (property)
    * 
    * Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively.
    */
    byteOrder: prefixer('byteOrder'),

    /**
    * **[File format](http://qudt.org/schema/qudt/FileFormat)** (class)
    * 
    * A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.
    */
    FileFormat: prefixer('FileFormat'),

    /**
    * **[Fixed Interval Time Series Array Type](http://qudt.org/schema/qudt/FixedIntervalTimeSeriesArray)** (class)
    * 
    * A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.
    */
    FixedIntervalTimeSeriesArray: prefixer('FixedIntervalTimeSeriesArray'),

    /**
    * **[Time Series Array Type](http://qudt.org/schema/qudt/TimeSeriesArray)** (class)
    * 
    * A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured at successive time intervals. The time intervals may be uniformly or non-uniformly spaced.
    */
    TimeSeriesArray: prefixer('TimeSeriesArray'),

    /**
    * **[Fixed Interval Time Series Array Type](http://qudt.org/schema/qudt/FixedIntervalTimeSeriesArrayType)** (class)
    * 
    * A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.
    */
    FixedIntervalTimeSeriesArrayType: prefixer('FixedIntervalTimeSeriesArrayType'),

    /**
    * **[Function Data Type](http://qudt.org/schema/qudt/FunctionDatatype)** (class)
    * 
    * A function data type defines the input and output data type for a function or method. It includes at least the function name and the number of its parameters. In some programming languages, it may also specify the function's return type or the types of its arguments.
    */
    FunctionDatatype: prefixer('FunctionDatatype'),

    /**
    * **[Graph Type](http://qudt.org/schema/qudt/Graph)** (class)
    * 
    * A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges).
    */
    Graph: prefixer('Graph'),

    /**
    * **[Graph Type](http://qudt.org/schema/qudt/GraphType)** (class)
    * 
    * A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges).
    */
    GraphType: prefixer('GraphType'),

    /**
    * **[Ground coordinate system](http://qudt.org/schema/qudt/GroundCoordinateSystem)** (class)
    * 
    * A sub-type of 'Aerospace coordinate system'. Detailed desciption to be provided in a future version.
    */
    GroundCoordinateSystem: prefixer('GroundCoordinateSystem'),

    /**
    * **[argType](http://qudt.org/schema/qudt/argType)** (property)
    * 
    * This property relates a function data type with the type of one of its arguments.
    */
    argType: prefixer('argType'),

    /**
    * **[Heap Type](http://qudt.org/schema/qudt/HeapType)** (class)
    * 
    * A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then <em>key(A) &gt; key(B)</em>. This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type.
    */
    HeapType: prefixer('HeapType'),

    /**
    * **[return type](http://qudt.org/schema/qudt/returnType)** (property)
    * 
    * This property is used to state the return type of a function type.
    */
    returnType: prefixer('returnType'),

    /**
    * **[Hexidecimal Binary Type](http://qudt.org/schema/qudt/HexBinaryType)** (class)
    * 
    * A string composed of hex characters.
    */
    HexBinaryType: prefixer('HexBinaryType'),

    /**
    * **[Hash Table Type](http://qudt.org/schema/qudt/HashTable)** (class)
    * 
    * A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs.
    */
    HashTable: prefixer('HashTable'),

    /**
    * **[Table Type](http://qudt.org/schema/qudt/TableType)** (class)
    * 
    * A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use.
    */
    TableType: prefixer('TableType'),

    /**
    * **[Hash Table Type](http://qudt.org/schema/qudt/HashTableType)** (class)
    * 
    * A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs.
    */
    HashTableType: prefixer('HashTableType'),

    /**
    * **[Heap Type](http://qudt.org/schema/qudt/Heap)** (class)
    * 
    * <p class="lm-para">A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then \\(key(A) \\ge key(B)\\). This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type.</p>
    */
    Heap: prefixer('Heap'),

    /**
    * **[Ordered Tree Type](http://qudt.org/schema/qudt/OrderedTree)** (class)
    * 
    * <p class="lm-para">An "Ordered Tree Type" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as \\(\\lt\\) or \\(\\gt\\)) that is used to order the nodes.</p>
    */
    OrderedTree: prefixer('OrderedTree'),

    /**
    * **[Ordered Tree Type](http://qudt.org/schema/qudt/OrderedTreeType)** (class)
    * 
    * An "Ordered Tree Type" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as $\\lt$ or $\\gt$) that is used to order the nodes.
    */
    OrderedTreeType: prefixer('OrderedTreeType'),

    /**
    * **[Text String Type](http://qudt.org/schema/qudt/TextStringType)** (class)
    * 
    * A text string. Encodings can be specified as subclass or in connection to character arrays in Structured Datatypes.
    */
    TextStringType: prefixer('TextStringType'),

    /**
    * **[Memory order type](http://qudt.org/schema/qudt/MemoryOrderType)** (class)
    * 
    * A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.
    */
    MemoryOrderType: prefixer('MemoryOrderType'),

    /**
    * **[Inertial Coordinate Frame](http://qudt.org/schema/qudt/InertialCoordinateFrame)** (class)
    * 
    * A "Coordinate Frame".
    */
    InertialCoordinateFrame: prefixer('InertialCoordinateFrame'),

    /**
    * **[Ordering Relation](http://qudt.org/schema/qudt/orderingRelation)** (property)
    * 
    * This property identifies the mathematical comparison operator (such as "<" or ">") that is used to order the elements of a collection.
    */
    orderingRelation: prefixer('orderingRelation'),

    /**
    * **[Inertial reference frame](http://qudt.org/schema/qudt/InertialReferenceFrame)** (class)
    * 
    * A sub-type of 'Reference Frame'. Detailed desciption to be provided in a future version.
    */
    InertialReferenceFrame: prefixer('InertialReferenceFrame'),

    /**
    * **[Non Rotating Coordinate Frame](http://qudt.org/schema/qudt/NonRotatingInertialFrame)** (class)
    * 
    * The non-rotating (or "inertial") coordinate frames are defined by taking a "snapshot" of the orientation of a particular set of right-handed, orthogonal axes at a specific epoch or time. In other words, the non-rotating coordinate frame, however it is defined, is frozen or fixed at a specific time - for all time. These non-rotating coordinate frames are referred to as "of Epoch" coordinate frames.
    */
    NonRotatingInertialFrame: prefixer('NonRotatingInertialFrame'),

    /**
    * **[type](http://qudt.org/schema/qudt/type)** (property)
    * 
    * A reference to the specification of the data type of a variable or constant.
    */
    type: prefixer('type'),

    /**
    * **[Integer Encoding](http://qudt.org/schema/qudt/IntegerEncodingType)** (class)
    * 
    * The encoding scheme for integer types
    */
    IntegerEncodingType: prefixer('IntegerEncodingType'),

    /**
    * **[element](http://qudt.org/schema/qudt/element)** (property)
    * 
    * An element of an enumeration
    */
    element: prefixer('element'),

    /**
    * **[List](http://qudt.org/schema/qudt/List)** (class)
    * 
    * A sub-type of 'Collection Type'. Detailed desciption to be provided in a future version.
    */
    List: prefixer('List'),

    /**
    * **[Interpolated Table Type](http://qudt.org/schema/qudt/InterpolatedTable)** (class)
    * 
    * A sub-type of 'Table Type'. Detailed desciption to be provided in a future version.
    */
    InterpolatedTable: prefixer('InterpolatedTable'),

    /**
    * **[Interval scale](http://qudt.org/schema/qudt/IntervalScale)** (class)
    * 
    * <p>The interval type allows for the degree of difference between items, but not the ratio between them. Examples include temperature with the Celsius scale, which has two defined points (the freezing and boiling point of water at specific conditions) and then separated into 100 intervals, date when measured from an arbitrary epoch (such as AD), percentage such as a percentage return on a stock,[16] location in Cartesian coordinates, and direction measured in degrees from true or magnetic north. Ratios are not meaningful since 20 °C cannot be said to be "twice as hot" as 10 °C, nor can multiplication/division be carried out between any two dates directly. However, ratios of differences can be expressed; for example, one difference can be twice another. Interval type variables are sometimes also called "scaled variables", but the formal mathematical term is an affine space (in this case an affine line).</p>
    * <p>Characteristics: median, percentile &amp; Monotonic increasing (order (&lt;) &amp; totally ordered set</p>
    */
    IntervalScale: prefixer('IntervalScale'),

    /**
    * **[Ordinal scale](http://qudt.org/schema/qudt/OrdinalScale)** (class)
    * 
    * The ordinal type allows for rank order (1st, 2nd, 3rd, etc.) by which data can be sorted, but still does not allow for relative degree of difference between them. Examples include, on one hand, dichotomous data with dichotomous (or dichotomized) values such as 'sick' vs. 'healthy' when measuring health, 'guilty' vs. 'innocent' when making judgments in courts, 'wrong/false' vs. 'right/true' when measuring truth value, and, on the other hand, non-dichotomous data consisting of a spectrum of values, such as 'completely agree', 'mostly agree', 'mostly disagree', 'completely disagree' when measuring opinion.
    */
    OrdinalScale: prefixer('OrdinalScale'),

    /**
    * **[Ratio scale](http://qudt.org/schema/qudt/RatioScale)** (class)
    * 
    * The ratio type takes its name from the fact that measurement is the estimation of the ratio between a magnitude of a continuous quantity and a unit magnitude of the same kind (Michell, 1997, 1999). A ratio scale possesses a meaningful (unique and non-arbitrary) zero value. Most measurement in the physical sciences and engineering is done on ratio scales. Examples include mass, length, duration, plane angle, energy and electric charge. In contrast to interval scales, ratios are now meaningful because having a non-arbitrary zero point makes it meaningful to say, for example, that one object has "twice the length" of another (= is "twice as long"). Very informally, many ratio scales can be described as specifying "how much" of something (i.e. an amount or magnitude) or "how many" (a count). The Kelvin temperature scale is a ratio scale because it has a unique, non-arbitrary zero point called absolute zero.
    */
    RatioScale: prefixer('RatioScale'),

    /**
    * **[allowed unit of system](http://qudt.org/schema/qudt/allowedUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure with a unit system that does not define the unit, but allows its use within the system. An allowed unit must be convertible to some dimensionally eqiuvalent unit that is defined by the system.
    */
    allowedUnitOfSystem: prefixer('allowedUnitOfSystem'),

    /**
    * **[Large object](http://qudt.org/schema/qudt/LargeObject)** (class)
    * 
    * A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data.
    */
    LargeObject: prefixer('LargeObject'),

    /**
    * **[is unit of system](http://qudt.org/schema/qudt/unitOfSystem)** (property)
    * 
    * This property relates a unit of measure with a system of units that either a) defines the unit or b) allows the unit to be used within the system.
    */
    unitOfSystem: prefixer('unitOfSystem'),

    /**
    * **[Large object](http://qudt.org/schema/qudt/LargeObjectType)** (class)
    * 
    * A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data.
    */
    LargeObjectType: prefixer('LargeObjectType'),

    /**
    * **[allowed unit](http://qudt.org/schema/qudt/hasAllowedUnit)** (property)
    * 
    * This property relates a unit system with a unit of measure that is not defined by or part of the system, but is allowed for use within the system. An allowed unit must be convertible to some dimensionally eqiuvalent unit that is defined by the system.
    */
    hasAllowedUnit: prefixer('hasAllowedUnit'),

    /**
    * **[Local Coordinate System Type](http://qudt.org/schema/qudt/LocalCoordinateSystem)** (class)
    * 
    * A "Trajectory Coordinate System" with the following instance(s): "Local vertical curvilinear coordinate system", "Local vertical local horizontal coordinate system", "Vehicle centered local vertical curvilinear coordinate system".
    */
    LocalCoordinateSystem: prefixer('LocalCoordinateSystem'),

    /**
    * **[Logarithmic Unit](http://qudt.org/schema/qudt/LogarithmicUnit)** (class)
    * 
    * Logarithmic units are abstract mathematical units that can be used to express any quantities (physical or mathematical) that are defined on a logarithmic scale, that is, as being proportional to the value of a logarithm function. Examples of logarithmic units include common units of information and entropy, such as the bit, and the byte, as well as units of relative signal strength magnitude such as the decibel.
    */
    LogarithmicUnit: prefixer('LogarithmicUnit'),

    /**
    * **[Long Integer Type](http://qudt.org/schema/qudt/LongIntegerType)** (class)
    * 
    * A Long Integer is an integer that can be represented in four octets (32 bits) of machine memory. Long integers may be signed or unsigned.
    */
    LongIntegerType: prefixer('LongIntegerType'),

    /**
    * **[Lunar Coordinate System](http://qudt.org/schema/qudt/LunarCoordinateSystem)** (class)
    * 
    * Two slightly different coordinate frames are commonly used to define the orientation of the axes of a lunar body-fixed coordinate system: a mean Earth/rotation frame and a principal axis coordinate frame. The mean Earth/rotation frame (sometimes called the "Mean Earth/polar axis" frame) is a lunar body-fixed coordinate frame with the X-axis aligned with the mean direction from the Moon to the Earth and the Z-axis aligned with the mean axis of rotation of the Moon. The principal axis frame is a lunar body-fixed coordinate frame aligned with the principal axes of the Moon. Due to the fact that the Moon is synchronously rotating but is not exactly symmetric, the principal axes and the mean Earth/rotation axes of the Moon do not coincide.
    */
    LunarCoordinateSystem: prefixer('LunarCoordinateSystem'),

    /**
    * **[Mass Properties Array Type](http://qudt.org/schema/qudt/MassPropertiesArrayType)** (class)
    * 
    * The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties.
    */
    MassPropertiesArrayType: prefixer('MassPropertiesArrayType'),

    /**
    * **[Multi Dimensional Array Type](http://qudt.org/schema/qudt/MultiDimensionalArrayType)** (class)
    * 
    * Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions.
    */
    MultiDimensionalArrayType: prefixer('MultiDimensionalArrayType'),

    /**
    * **[arg1Type](http://qudt.org/schema/qudt/arg1Type)** (property)
    * 
    * This property relates a funciton data type with the type of its arg1.
    */
    arg1Type: prefixer('arg1Type'),

    /**
    * **[Major minor type](http://qudt.org/schema/qudt/MajorMinorType)** (class)
    * 
    * A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.
    */
    MajorMinorType: prefixer('MajorMinorType'),

    /**
    * **[arg2Type](http://qudt.org/schema/qudt/arg2Type)** (property)
    * 
    * This property relates a funciton data type with the type of its arg2.
    */
    arg2Type: prefixer('arg2Type'),

    /**
    * **[Mars Coordinate System Type](http://qudt.org/schema/qudt/MarsCoordinateSystem)** (class)
    * 
    * A "Trajectory Coordinate System" with the following instance(s): "Mars mean equator and IAU-Node of epoch", "Mars mean equator and prime meridian body-fixed".
    */
    MarsCoordinateSystem: prefixer('MarsCoordinateSystem'),

    /**
    * **[arg3Type](http://qudt.org/schema/qudt/arg3Type)** (property)
    * 
    * This property relates a funciton data type with the type of its arg3.
    */
    arg3Type: prefixer('arg3Type'),

    /**
    * **[Mass Properties Array Type](http://qudt.org/schema/qudt/MassPropertiesArray)** (class)
    * 
    * The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties.
    */
    MassPropertiesArray: prefixer('MassPropertiesArray'),

    /**
    * **[base dimension enumeration](http://qudt.org/schema/qudt/baseDimensionEnumeration)** (property)
    * 
    * This property associates a system of quantities with an enumeration that enumerates the base dimensions of the system in canonical order.
    */
    baseDimensionEnumeration: prefixer('baseDimensionEnumeration'),

    /**
    * **[Maths Function Type](http://qudt.org/schema/qudt/MathsFunctionType)** (class)
    * 
    * A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version.
    */
    MathsFunctionType: prefixer('MathsFunctionType'),

    /**
    * **[is base unit of system](http://qudt.org/schema/qudt/baseUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure to the system of units in which it is defined as a base unit for the system. The base units of a system are used to define the derived units of the system by expressing the derived units as products of the base units raised to a rational power.
    */
    baseUnitOfSystem: prefixer('baseUnitOfSystem'),

    /**
    * **[Matrix Type](http://qudt.org/schema/qudt/Matrix)** (class)
    * 
    * A Matrix Type is a data type that specifies the properties of data structures that hold matricies.
    */
    Matrix: prefixer('Matrix'),

    /**
    * **[is coherent unit of system](http://qudt.org/schema/qudt/coherentUnitOfSystem)** (property)
    * 
    * A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one. A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. For example, the 'newton' and the 'joule'. These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per second per  second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per second per second, and the work done by 1 dyne acting over 1 centimetre. So \\(1 newton = 10^5\\,dyne\\), \\(1 joule = 10^7\\,erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.
    */
    coherentUnitOfSystem: prefixer('coherentUnitOfSystem'),

    /**
    * **[Multi Dimensional Array Type](http://qudt.org/schema/qudt/MultiDimensionalArray)** (class)
    * 
    * Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions.
    */
    MultiDimensionalArray: prefixer('MultiDimensionalArray'),

    /**
    * **[base unit](http://qudt.org/schema/qudt/hasBaseUnit)** (property)
    * 
    * This property relates a system of units to a base unit defined within the system. The base units of a system are used to define the derived units of the system by expressing the derived units as products of the base units raised to a rational power.
    */
    hasBaseUnit: prefixer('hasBaseUnit'),

    /**
    * **[Modal Enumeration](http://qudt.org/schema/qudt/ModalEnumeration)** (class)
    * 
    * A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.
    */
    ModalEnumeration: prefixer('ModalEnumeration'),

    /**
    * **[Multi dimensional data format](http://qudt.org/schema/qudt/MultiDimensionalDataFormat)** (class)
    * 
    * Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF.
    */
    MultiDimensionalDataFormat: prefixer('MultiDimensionalDataFormat'),

    /**
    * **[Multi Dimensional Data Format Type](http://qudt.org/schema/qudt/MultiDimensionalDataFormatType)** (class)
    * 
    * Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF.
    */
    MultiDimensionalDataFormatType: prefixer('MultiDimensionalDataFormatType'),

    /**
    * **[defined unit of system](http://qudt.org/schema/qudt/definedUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure with the unit system that defines the unit.
    */
    definedUnitOfSystem: prefixer('definedUnitOfSystem'),

    /**
    * **[Multi modal enumeration](http://qudt.org/schema/qudt/MultiModalEnumeration)** (class)
    * 
    * A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.
    */
    MultiModalEnumeration: prefixer('MultiModalEnumeration'),

    /**
    * **[coherent unit](http://qudt.org/schema/qudt/hasCoherentUnit)** (property)
    * 
    * A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one.
    */
    hasCoherentUnit: prefixer('hasCoherentUnit'),

    /**
    * **[Multi Modal Type](http://qudt.org/schema/qudt/MultiModalType)** (class)
    * 
    * A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.
    */
    MultiModalType: prefixer('MultiModalType'),

    /**
    * **[coherent unit system](http://qudt.org/schema/qudt/coherentUnitSystem)** (property)
    * 
    * <p>A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. In such a coherent system, no numerical factor other than the number 1 ever occurs in the expressions for the derived units in terms of the base units. For example, the \\(newton\\) and the \\(joule\\). These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per (1) second per (1) second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per (1) second per (1) second, and the work done by 1 dyne acting over 1 centimetre. So \\(1\\,newton = 10^5 dyne\\), \\(1 joule = 10^7 erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.</p>
    */
    coherentUnitSystem: prefixer('coherentUnitSystem'),

    /**
    * **[Bag](http://qudt.org/schema/qudt/MultiSet)** (class)
    * 
    * A bag is a set in which elements may be repeated.
    */
    MultiSet: prefixer('MultiSet'),

    /**
    * **[N-Tuple Type](http://qudt.org/schema/qudt/N-Tuple)** (class)
    * 
    * A tuple containing n objects is known as an "n-tuple". For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year.
    */
    'N-Tuple': prefixer('N-Tuple'),

    /**
    * **[N-Tuple Type](http://qudt.org/schema/qudt/N-TupleType)** (class)
    * 
    * A tuple containing n objects is known as an "n-tuple". For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year.
    */
    'N-TupleType': prefixer('N-TupleType'),

    /**
    * **[default](http://qudt.org/schema/qudt/default)** (property)
    * 
    * The default element in an enumeration
    */
    default: prefixer('default'),

    /**
    * **[defined unit](http://qudt.org/schema/qudt/hasDefinedUnit)** (property)
    * 
    * This property relates a unit system with a unit of measure that is defined by the system.
    */
    hasDefinedUnit: prefixer('hasDefinedUnit'),

    /**
    * **[Parameter modifiability type](http://qudt.org/schema/qudt/ParameterModifiabilityType)** (class)
    * 
    * An enumeration of literals that signify whether a parameter is modifiable and if so, by whom.
    */
    ParameterModifiabilityType: prefixer('ParameterModifiabilityType'),

    /**
    * **[Signedness type](http://qudt.org/schema/qudt/SignednessType)** (class)
    * 
    * Specifics whether a value should be signed or unsigned.
    */
    SignednessType: prefixer('SignednessType'),

    /**
    * **[is coherent derived unit of system](http://qudt.org/schema/qudt/derivedCoherentUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure to the unit system in which the unit is derived from the system's base units with a proportionality constant of one.
    */
    derivedCoherentUnitOfSystem: prefixer('derivedCoherentUnitOfSystem'),

    /**
    * **[is derived unit of system](http://qudt.org/schema/qudt/derivedUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure to the system of units in which it is defined as a derived unit. That is, the derived unit is defined as a product of the base units for the system raised to some rational power.
    */
    derivedUnitOfSystem: prefixer('derivedUnitOfSystem'),

    /**
    * **[Octet Type](http://qudt.org/schema/qudt/OctetType)** (class)
    * 
    * An 8 bit unsigned integer
    */
    OctetType: prefixer('OctetType'),

    /**
    * **[is non-coherent derived unit of system](http://qudt.org/schema/qudt/derivedNonCoherentUnitOfSystem)** (property)
    * 
    * This property relates a unit of measure to the unit system in which the unit is derived from the system's base units without proportionality constant of one.
    */
    derivedNonCoherentUnitOfSystem: prefixer('derivedNonCoherentUnitOfSystem'),

    /**
    * **[Unsigned Integer Type](http://qudt.org/schema/qudt/UnsignedIntegerType)** (class)
    * 
    * Unsgned Integers are integers that are either strictly non-negative or non-positive.
    */
    UnsignedIntegerType: prefixer('UnsignedIntegerType'),

    /**
    * **[Ordered Collection Type](http://qudt.org/schema/qudt/OrderedCollectionType)** (class)
    * 
    * An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements.
    */
    OrderedCollectionType: prefixer('OrderedCollectionType'),

    /**
    * **[Ordered Collection Type](http://qudt.org/schema/qudt/OrderedCollection)** (class)
    * 
    * An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements.
    */
    OrderedCollection: prefixer('OrderedCollection'),

    /**
    * **[Ordered type](http://qudt.org/schema/qudt/OrderedType)** (class)
    * 
    * Describes how a data or information structure is ordered.
    */
    OrderedType: prefixer('OrderedType'),

    /**
    * **[derived unit](http://qudt.org/schema/qudt/hasDerivedUnit)** (property)
    * 
    * This property relates a system of units to a unit of measure that is defined within the system in terms of the base units for the system. That is, the derived unit is defined as a product of the base units for the system raised to some rational power.
    */
    hasDerivedUnit: prefixer('hasDerivedUnit'),

    /**
    * **[Organization](http://qudt.org/schema/qudt/Organization)** (class)
    * 
    * A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.
    */
    Organization: prefixer('Organization'),

    /**
    * **[Percentage Type](http://qudt.org/schema/qudt/Percentage)** (class)
    * 
    * A Scalar Datatype for expressing a dimensionless ratio.
    */
    Percentage: prefixer('Percentage'),

    /**
    * **[Physical Address Type](http://qudt.org/schema/qudt/PhysicalAddress)** (class)
    * 
    * A "Structured Datatype".
    */
    PhysicalAddress: prefixer('PhysicalAddress'),

    /**
    * **[element kind](http://qudt.org/schema/qudt/elementKind)** (property)
    * 
    * This property is used to describe the quantity kind for a dimensional data type.
    */
    elementKind: prefixer('elementKind'),

    /**
    * **[Physical Constant](http://qudt.org/schema/qudt/PhysicalConstant)** (class)
    * 
    * A physical constant is a physical quantity that is generally believed to be both universal in nature and constant in time. It can be contrasted with a mathematical constant, which is a fixed numerical value but does not directly involve any physical measurement. There are many physical constants in science, some of the most widely recognized being the speed of light in vacuum c, Newton's gravitational constant G, Planck's constant h, the electric permittivity of free space ε0, and the elementary charge e. Physical constants can take many dimensional forms, or may be dimensionless depending on the system of quantities and units used.
    */
    PhysicalConstant: prefixer('PhysicalConstant'),

    /**
    * **[element type list](http://qudt.org/schema/qudt/elementTypeList)** (property)
    * 
    * This property is used to relate a structured data type with a list of data types. The list members determine the types of structured type's elements. It is used for structured data types with elements that are of different types.
    */
    elementTypeList: prefixer('elementTypeList'),

    /**
    * **[Quantity](http://qudt.org/schema/qudt/Quantity)** (class)
    * 
    * <p class="lm-para">A <b>quantity</b> is the measurement of an observable property of a particular object, event, or physical system. A quantity is always associated with the context of measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying <b>quantity kind</b> is independent of any particular measurement. Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc. Examples of physical quantities include physical constants, such as the speed of light in a vacuum, Planck's constant, the electric permittivity of free space, and the fine structure constant. </p>
    * 
    * <p class="lm-para">In other words, quantities are quantifiable aspects of the world, such as the duration of a movie, the distance between two points, velocity of a car, the pressure of the atmosphere, and a person's weight; and units are used to describe their numerical measure.
    * 
    * <p class="lm-para">Many <b>quantity kinds</b> are related to each other by various physical laws, and as a result, the associated units of some quantity kinds can be expressed as products (or ratios) of powers of other quantity kinds (e.g., momentum is mass times velocity and velocity is defined as distance divided by time). In this way, some quantities can be calculated from other measured quantities using their associations to the quantity kinds in these expressions. These quantity kind relationships are also discussed in dimensional analysis. Those that cannot be so expressed can be regarded as "fundamental" in this sense.</p>
    * <p class="lm-para">A quantity is distinguished from a "quantity kind" in that the former carries a value and the latter is a type specifier.</p>
    */
    Quantity: prefixer('Quantity'),

    /**
    * **[Polar Coordinate System Type](http://qudt.org/schema/qudt/PolarCoordinates)** (class)
    * 
    * A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis.
    */
    PolarCoordinates: prefixer('PolarCoordinates'),

    /**
    * **[Polar Coordinate System Type](http://qudt.org/schema/qudt/PolarCoordinatesType)** (class)
    * 
    * A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis.
    */
    PolarCoordinatesType: prefixer('PolarCoordinatesType'),

    /**
    * **[field labels](http://qudt.org/schema/qudt/fieldLabels)** (property)
    * 
    * This property is used to list the field labels for a record type.
    */
    fieldLabels: prefixer('fieldLabels'),

    /**
    * **[Polarity](http://qudt.org/schema/qudt/Polarity)** (class)
    * 
    * A "Tagged Enumeration" with the following instance(s): "negative", "positive".
    */
    Polarity: prefixer('Polarity'),

    /**
    * **[figure](http://qudt.org/schema/qudt/figure)** (property)
    * 
    * Provides a link to an image.
    */
    figure: prefixer('figure'),

    /**
    * **[Positive Integer Type](http://qudt.org/schema/qudt/PositiveIntegerType)** (class)
    * 
    * Positive Integers are integers that are either non-zero and non-negative.
    */
    PositiveIntegerType: prefixer('PositiveIntegerType'),

    /**
    * **[generalization](http://qudt.org/schema/qudt/generalization)** (property)
    * 
    * This property relates a quantity kind to its generalization. A quantity kind, PARENT, is a generalization of the quantity kind CHILD only if:
    * 
    * 1. PARENT and CHILD have the same dimensions in every system of quantities;
    * 2. Every unit that is a measure of quantities of kind CHILD is also a valid measure of quantities of kind PARENT.
    */
    generalization: prefixer('generalization'),

    /**
    * **[Unsigned Type](http://qudt.org/schema/qudt/UnsignedType)** (class)
    * 
    * An unsigned data type is a numeric type that does not distinguish between positive and negative values.
    */
    UnsignedType: prefixer('UnsignedType'),

    /**
    * **[specialization](http://qudt.org/schema/qudt/specialization)** (property)
    * 
    * This property relates a quantity kind to its specialization(s). For example, linear velocity and angular velocity are both specializations of velocity.
    */
    specialization: prefixer('specialization'),

    /**
    * **[Signed Integer Type](http://qudt.org/schema/qudt/SignedIntegerType)** (class)
    * 
    * Signed Integers are integers can take on both positive and negative values.
    */
    SignedIntegerType: prefixer('SignedIntegerType'),

    /**
    * **[has unit](http://qudt.org/schema/qudt/hasUnit)** (property)
    * 
    * This property relates a system of units with a unit of measure that is either a) defined by the system, or b) accepted for use by the system and is convertible to a unit of equivalent dimension that is defined by the system. Systems of units may distinguish between base and derived units. Base units are the units which measure the base quantities for the corresponding system of quantities. The base units are used to define units for all other quantities as products of powers of the base units. Such units are called derived units for the system.
    */
    hasUnit: prefixer('hasUnit'),

    /**
    * **[Quantifiable](http://qudt.org/schema/qudt/Quantifiable)** (class)
    * 
    * <p><em>Quantifiable</em> ascribes to some thing the capability of being measured, observed, or counted.</p>
    */
    Quantifiable: prefixer('Quantifiable'),

    /**
    * **[Quantity Kind Dimension Vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector)** (class)
    * 
    * <p class="lm-para">A  <em>Quantity Kind Dimension Vector</em> describes the dimensionality of a quantity kind in the context of a system of units. In the SI system of units, the dimensions of a quantity kind are expressed as a product of the basic physical dimensions mass (\\(M\\)), length (\\(L\\)), time (\\(T\\)) current (\\(I\\)), amount of substance (\\(N\\)), luminous intensity (\\(J\\)) and absolute temperature (\\(\\theta\\)) as \\(dim \\, Q = L^{\\alpha} \\, M^{\\beta} \\, T^{\\gamma} \\, I ^{\\delta} \\, \\theta ^{\\epsilon} \\, N^{\\eta} \\, J ^{\nu}\\).</p>
    * 
    * <p class="lm-para">The rational powers of the dimensional exponents, \\(\\alpha, \\, \\beta, \\, \\gamma, \\, \\delta, \\, \\epsilon, \\, \\eta, \\, \nu\\), are positive, negative, or zero.</p>
    * 
    * <p class="lm-para">For example, the dimension of the physical quantity kind \\(\\it{speed}\\) is \\(\\boxed{length/time}\\), \\(L/T\\) or \\(LT^{-1}\\), and the dimension of the physical quantity kind force is \\(\\boxed{mass \\times acceleration}\\) or \\(\\boxed{mass \\times (length/time)/time}\\), \\(ML/T^2\\) or \\(MLT^{-2}\\) respectively.</p>
    */
    QuantityKindDimensionVector: prefixer('QuantityKindDimensionVector'),

    /**
    * **[CGS EMU Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-EMU)** (class)
    * 
    * A <em>CGS EMU Dimension Vector</em> is used to specify the dimensions for EMU C.G.S. quantity kind.
    */
    'QuantityKindDimensionVector_CGS-EMU': prefixer('QuantityKindDimensionVector_CGS-EMU'),

    /**
    * **[CGS Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS)** (class)
    * 
    * A <em>CGS Dimension Vector</em> is used to specify the dimensions for a C.G.S. quantity kind.
    */
    QuantityKindDimensionVector_CGS: prefixer('QuantityKindDimensionVector_CGS'),

    /**
    * **[CGS ESU Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-ESU)** (class)
    * 
    * A <em>CGS ESU Dimension Vector</em> is used to specify the dimensions for ESU C.G.S. quantity kind.
    */
    'QuantityKindDimensionVector_CGS-ESU': prefixer('QuantityKindDimensionVector_CGS-ESU'),

    /**
    * **[CGS GAUSS Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-GAUSS)** (class)
    * 
    * A <em>CGS GAUSS Dimension Vector</em> is used to specify the dimensions for Gaussioan C.G.S. quantity kind.
    */
    'QuantityKindDimensionVector_CGS-GAUSS': prefixer('QuantityKindDimensionVector_CGS-GAUSS'),

    /**
    * **[has non-coherent unit](http://qudt.org/schema/qudt/hasNonCoherentUnit)** (property)
    * 
    * A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one.
    */
    hasNonCoherentUnit: prefixer('hasNonCoherentUnit'),

    /**
    * **[CGS LH Dimension vector](http://qudt.org/schema/qudt/QuantityKindDimensionVector_CGS-LH)** (class)
    * 
    * A <em>CGS LH Dimension Vector</em> is used to specify the dimensions for Lorentz-Heaviside C.G.S. quantity kind.
    */
    'QuantityKindDimensionVector_CGS-LH': prefixer('QuantityKindDimensionVector_CGS-LH'),

    /**
    * **[Quantity Kind Dimension vector (SI)](http://qudt.org/schema/qudt/QuantityKindDimensionVector_SI)** (class)
    * 
    * A sub-type of 'Quantity Dimension Vector'. Detailed desciption to be provided in a future version.
    */
    QuantityKindDimensionVector_SI: prefixer('QuantityKindDimensionVector_SI'),

    /**
    * **[Quantity type](http://qudt.org/schema/qudt/QuantityType)** (class)
    * 
    * \\(\\textit{Quantity Type}\\) is an enumeration of quanity kinds. It specializes \\(\\boxed{dtype:EnumeratedValue}\\) by constrinaing \\(\\boxed{dtype:value}\\) to instances of \\(\\boxed{qudt:QuantityKind}\\).
    */
    QuantityType: prefixer('QuantityType'),

    /**
    * **[Quantity value type](http://qudt.org/schema/qudt/QuantityValueType)** (class)
    * 
    * A sub-type of 'Dimensional Data Type'. Detailed desciption to be provided in a future version.
    */
    QuantityValueType: prefixer('QuantityValueType'),

    /**
    * **[Real number type](http://qudt.org/schema/qudt/RealNumberType)** (class)
    * 
    * This is the class of data values that approximate real numbers in finite precision. Often, such values are expressed in "mantissa, base, exponent" form. Any rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. Typically, b is chosen to be either 2 or 10, and then the values of m and e are determined given the choice of base.
    */
    RealNumberType: prefixer('RealNumberType'),

    /**
    * **[modifiability](http://qudt.org/schema/qudt/modifiability)** (property)
    * 
    * Reference to one in a list of enumerated elements that indicates whether data (e.g. variable or parameter) can be changed.
    */
    modifiability: prefixer('modifiability'),

    /**
    * **[Real Datatype](http://qudt.org/schema/qudt/RealDatatype)** (class)
    * 
    * A real number is represented as a factor, called the mantissa, multiplied by a power (the exponent) of a base. Different bases yield different approximations to real numbers, and conversion between them is limited in accuracy.  Four floating-point types are defined in 'IEEE-754 Standard for Binary Floating-Point'. These types are 'single', 'extended single', 'double', and 'extended double'.
    */
    RealDatatype: prefixer('RealDatatype'),

    /**
    * **[Real Double Precision Type](http://qudt.org/schema/qudt/RealDoublePrecisionType)** (class)
    * 
    * A real double precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes.
    * 
    * An example of a real double precision data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 8 bytes for storage on 32-bit machine architectures.
    */
    RealDoublePrecisionType: prefixer('RealDoublePrecisionType'),

    /**
    * **[Record Type](http://qudt.org/schema/qudt/Record)** (class)
    * 
    * A Record Type is a type whose values are records, i.e. aggregates of several items of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels.
    */
    Record: prefixer('Record'),

    /**
    * **[Reference Data Type](http://qudt.org/schema/qudt/ReferenceDatatype)** (class)
    * 
    * A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. A reference data type is a data type that specifies how a reference is represented and stored in memory, as well as the operations that can be performed on reference values. The most common example of a reference data type is a pointer. [Wikipedia]
    */
    ReferenceDatatype: prefixer('ReferenceDatatype'),

    /**
    * **[prefix](http://qudt.org/schema/qudt/prefix)** (property)
    * 
    * Associates a unit with the appropriate prefix, if any.
    */
    prefix: prefixer('prefix'),

    /**
    * **[Rotating reference frame](http://qudt.org/schema/qudt/RotatingReferenceFrame)** (class)
    * 
    * A sub-type of 'Reference Frame'. Detailed desciption to be provided in a future version.
    */
    RotatingReferenceFrame: prefixer('RotatingReferenceFrame'),

    /**
    * **[quantity](http://qudt.org/schema/qudt/quantity)** (property)
    * 
    * a property to relate an observable thing with a quantity (qud:Quantity)
    */
    quantity: prefixer('quantity'),

    /**
    * **[State Space Matrix Type](http://qudt.org/schema/qudt/StateSpaceMatrixType)** (class)
    * 
    * In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant).
    */
    StateSpaceMatrixType: prefixer('StateSpaceMatrixType'),

    /**
    * **[State Space Vector Type](http://qudt.org/schema/qudt/StateSpaceVectorType)** (class)
    * 
    * A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.
    */
    StateSpaceVectorType: prefixer('StateSpaceVectorType'),

    /**
    * **[Sequence](http://qudt.org/schema/qudt/SequenceType)** (class)
    * 
    * A sequence is an enumerated collection of objects in which repetitions are allowed. Like a set, it contains members (also called elements, or terms). The number of elements (possibly infinite) is called the length of the sequence. Unlike a set, order matters, and exactly the same elements can appear multiple times at different positions in the sequence. Formally, a sequence can be defined as a function whose domain is either the set of the natural numbers (for infinite sequences) or the set of the first n natural numbers (for a sequence of finite length n). The position of an element in a sequence is its rank or index; it is the integer from which the element is the image. It depends on the context or of a specific convention, if the first element has index 0 or 1. [Wikipedia]
    */
    SequenceType: prefixer('SequenceType'),

    /**
    * **[Sequence](http://qudt.org/schema/qudt/Sequence)** (class)
    * 
    * A "Structured Datatype".
    */
    Sequence: prefixer('Sequence'),

    /**
    * **[Set Type](http://qudt.org/schema/qudt/Set)** (class)
    * 
    * A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics.
    */
    Set: prefixer('Set'),

    /**
    * **[Relevant Unit](http://qudt.org/schema/qudt/relevantUnit)** (property)
    * 
    * This property is used for qudt:Discipline instances to identify the Unit instances that are used within a given discipline.
    */
    relevantUnit: prefixer('relevantUnit'),

    /**
    * **[Set Type](http://qudt.org/schema/qudt/SetType)** (class)
    * 
    * A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics.
    */
    SetType: prefixer('SetType'),

    /**
    * **[Short Integer Type](http://qudt.org/schema/qudt/ShortIntegerType)** (class)
    * 
    * A Short Integer is an integer that can be represented in two octets (16 bits) of machine memory. Short integers may be signed or unsigned.
    */
    ShortIntegerType: prefixer('ShortIntegerType'),

    /**
    * **[Signed Big Integer Type](http://qudt.org/schema/qudt/SignedBigIntegerType)** (class)
    * 
    * A Signed Big Integer is a signed integer that can be represented in eight octets (64 bits) of machine memory.
    */
    SignedBigIntegerType: prefixer('SignedBigIntegerType'),

    /**
    * **[superceded by](http://qudt.org/schema/qudt/supercededBy)** (property)
    * 
    * This property is used to refer to the most current definition of an entity, when needed.
    */
    supercededBy: prefixer('supercededBy'),

    /**
    * **[Signed Type](http://qudt.org/schema/qudt/SignedType)** (class)
    * 
    * A signed type is a numeric type that distinguishes between positive and negative numbers using an encoding scheme, such as sign and magnitude, one's compliment, and two's compliment to represent negative numbers.
    */
    SignedType: prefixer('SignedType'),

    /**
    * **[Signed Long Integer Type](http://qudt.org/schema/qudt/SignedLongIntegerType)** (class)
    * 
    * A Signed Long Integer is a signed integer that can be represented in four octets (32 bits) of machine memory.
    */
    SignedLongIntegerType: prefixer('SignedLongIntegerType'),

    /**
    * **[Signed Integer Type](http://qudt.org/schema/qudt/SignedMediumIntegerType)** (class)
    * 
    * A "Signed Medium Integers" is an integer of 24 bits that can take on both positive and negative values.
    */
    SignedMediumIntegerType: prefixer('SignedMediumIntegerType'),

    /**
    * **[unit](http://qudt.org/schema/qudt/unit)** (property)
    * 
    * A reference to the unit of measure of a quantity (variable or constant) of interest.
    */
    unit: prefixer('unit'),

    /**
    * **[Signed Variable Length Integer Type](http://qudt.org/schema/qudt/SignedVariableLengthIntegerType)** (class)
    * 
    * A Signed Variable Length Integer data type defines a data structure for representing signed integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.
    */
    SignedVariableLengthIntegerType: prefixer('SignedVariableLengthIntegerType'),

    /**
    * **[Variable Length Integer Type](http://qudt.org/schema/qudt/VariableLengthIntegerType)** (class)
    * 
    * A Variable Length Integer data type defines a data structure for representing integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.
    */
    VariableLengthIntegerType: prefixer('VariableLengthIntegerType'),

    /**
    * **[Solid Angle Unit](http://qudt.org/schema/qudt/SolidAngleUnit)** (class)
    * 
    * The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.
    */
    SolidAngleUnit: prefixer('SolidAngleUnit'),

    /**
    * **[value vector](http://qudt.org/schema/qudt/valueVector)** (property)
    * 
    * A list of the values of elements in a Partial Array.
    */
    valueVector: prefixer('valueVector'),

    /**
    * **[Spline calibrator](http://qudt.org/schema/qudt/SplineCalibrator)** (class)
    * 
    * A sub-type of 'Map Type'. Detailed desciption to be provided in a future version.
    */
    SplineCalibrator: prefixer('SplineCalibrator'),

    /**
    * **[Spline point](http://qudt.org/schema/qudt/SplinePoint)** (class)
    * 
    * A sub-type of 'Tuple Type'. Detailed desciption to be provided in a future version.
    */
    SplinePoint: prefixer('SplinePoint'),

    /**
    * **[State Space Matrix Type](http://qudt.org/schema/qudt/StateSpaceMatrix)** (class)
    * 
    * In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant).
    */
    StateSpaceMatrix: prefixer('StateSpaceMatrix'),

    /**
    * **[State Space Vector Type](http://qudt.org/schema/qudt/StateSpaceVector)** (class)
    * 
    * A state vector in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.
    */
    StateSpaceVector: prefixer('StateSpaceVector'),

    /**
    * **[State Vector Type](http://qudt.org/schema/qudt/StateVectorType)** (class)
    * 
    * A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.
    */
    StateVectorType: prefixer('StateVectorType'),

    /**
    * **[String UTF16 Type](http://qudt.org/schema/qudt/StringUTF16)** (class)
    * 
    * String UTF-16 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-16 encoding. UTF-16 is the native internal representation of text in the Microsoft Windows NT/Windows 2000/Windows XP/Windows CE, Qualcomm BREW, and Symbian operating systems; the Java and .NET byte code environments; Mac OS X's Cocoa and Core Foundation frameworks; and the Qt cross-platform graphical widget toolkit.
    */
    StringUTF16: prefixer('StringUTF16'),

    /**
    * **[String UTF8 Type](http://qudt.org/schema/qudt/StringUTF8)** (class)
    * 
    * String UTF-8 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-8 encoding. UTF-8 includes ASCII, otherwise referred to as IA-5 (International Alphabet 5, as standardized by International Organization for Standardization [ISO]) as the first 128 values. The Internet Engineering Task Force (IETF) requires all Internet protocols to identify the encoding used for character data with UTF-8 as at least one supported encoding. The Internet Mail Consortium (IMC) recommends that all e-mail programs must be able to display and create mail using UTF-8.
    */
    StringUTF8: prefixer('StringUTF8'),

    /**
    * **[Subject Area](http://qudt.org/schema/qudt/SubjectArea)** (class)
    * 
    * A "Enumeration Literal".
    */
    SubjectArea: prefixer('SubjectArea'),

    /**
    * **[Symbol](http://qudt.org/schema/qudt/Symbol)** (class)
    * 
    * A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.
    */
    Symbol: prefixer('Symbol'),

    /**
    * **[System of Quantity Kinds](http://qudt.org/schema/qudt/SystemOfQuantityKinds)** (class)
    * 
    * A system of quantity kinds is a set of one or more quantity kinds together with a set of zero or more algebraic equations that define relationships between quantity kinds in the set. In the physical sciences, the equations relating quantity kinds are typically physical laws and definitional relations, and constants of proportionality. Examples include Newton’s First Law of Motion, Coulomb’s Law, and the definition of velocity as the instantaneous change in position.  In almost all cases, the system identifies a subset of base quantity kinds. The base set is chosen so that all other quantity kinds of interest can be derived from the base quantity kinds and the algebraic equations. If the unit system is explicitly associated with a quantity kind system, then the unit system must define at least one unit for each quantity kind.  From a scientific point of view, the division of quantities into base quantities and derived quantities is a matter of convention.
    */
    SystemOfQuantityKinds: prefixer('SystemOfQuantityKinds'),

    /**
    * **[System of Units](http://qudt.org/schema/qudt/SystemOfUnits)** (class)
    * 
    * A system of units is a set of units which are chosen as the reference scales for some set of quantity kinds together with the definitions of each unit. Units may be defined by experimental observation or by proportion to another unit not included in the system. If the unit system is explicitly associated with a quantity kind system, then the unit system must define at least one unit for each quantity kind.
    */
    SystemOfUnits: prefixer('SystemOfUnits'),

    /**
    * **[Time Type](http://qudt.org/schema/qudt/TimeStringType)** (class)
    * 
    * Time takes a number of forms, depending on the units used (e.g., year, day, minute, millisecond, or combinations thereof) and the origin (i.e., time zero) to which the time value is related.
    */
    TimeStringType: prefixer('TimeStringType'),

    /**
    * **[Tagged Enumeration](http://qudt.org/schema/qudt/TaggedEnumeration)** (class)
    * 
    * An enumeration where each literal  has a tag that is a non-negative integer. These enumerations are likely to have their literals encoded - hence the need for the tag.
    */
    TaggedEnumeration: prefixer('TaggedEnumeration'),

    /**
    * **[Three Body Rotating Coordinate System Type](http://qudt.org/schema/qudt/ThreeBodyRotatingCoordinateSystem)** (class)
    * 
    * The lunar coordinate systems are primarily used when operating in close proximity to the Moon. There are, however, a few additional coordinate systems that are also useful when analyzing (and depicting) trajectories in the vicinity of the Earth-Moon system. They are rotating coordinate systems associated with two different three-body systems: the Sun-Earth-spacecraft system and the Earth-Moon-spacecraft system. The Sun-Earth and Earth-Moon rotating coordinate frames are defined as follows. The pole vector or Z-axis of the coordinate frame is set equal to the instantaneous orbit normal of the secondary (smaller) body about the primary (larger) body and the X-axis is set equal to the vector from the primary body center of mass (CM) to the secondary body CM. The X-axis rotates at a rate equal to the instantaneous rotation rate of the secondary body about the primary body.
    */
    ThreeBodyRotatingCoordinateSystem: prefixer('ThreeBodyRotatingCoordinateSystem'),

    /**
    * **[Time](http://qudt.org/schema/qudt/Time)** (class)
    * 
    * The class of data values that denote a point in time. Time values may be encoded in a 12-hour clock or a 24-hour clock, such as 1:35 AM, or 13:35.
    */
    Time: prefixer('Time'),

    /**
    * **[Time data type](http://qudt.org/schema/qudt/TimeDataType)** (class)
    * 
    * A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.
    */
    TimeDataType: prefixer('TimeDataType'),

    /**
    * **[Time interval](http://qudt.org/schema/qudt/TimeInterval)** (class)
    * 
    * A relative interval that is an increment in time. For example, this is used in time series arrays to express the time point of a vector of values.
    */
    TimeInterval: prefixer('TimeInterval'),

    /**
    * **[Triplet](http://qudt.org/schema/qudt/Triplet)** (class)
    * 
    * A "Tuple".
    */
    Triplet: prefixer('Triplet'),

    /**
    * **[Type list](http://qudt.org/schema/qudt/TypeList)** (class)
    * 
    * A sub-type of 'QUDT Datatype'. Detailed desciption to be provided in a future version.
    */
    TypeList: prefixer('TypeList'),

    /**
    * **[Type matrix](http://qudt.org/schema/qudt/TypeMatrix)** (class)
    * 
    * Members of this class are matrix data structures that describe the datatypes of a class of matrices. That is, the members of this class are matrices with cells that contain datatypes (c.f. type:Datatype) and are used to describe the datatype structure of other matrices.
    */
    TypeMatrix: prefixer('TypeMatrix'),

    /**
    * **[Type Vector Type](http://qudt.org/schema/qudt/TypeVector)** (class)
    * 
    * A Type Vector is a vector whose elements are data types. They are used, for instance, to specify the type of each component of a vector or class of vectors. A Type Vector Type is a further abstraction that specifies the structure of Type Vectors.
    */
    TypeVector: prefixer('TypeVector'),

    /**
    * **[Unsigned Big Integer Type](http://qudt.org/schema/qudt/UnsignedBigIntegerType)** (class)
    * 
    * An Unsgned Big Integer is an unsigned integer that can be represented in eight octets (64 bits) of machine memory.
    */
    UnsignedBigIntegerType: prefixer('UnsignedBigIntegerType'),

    /**
    * **[Unsigned Long Integer Type](http://qudt.org/schema/qudt/UnsignedLongIntegerType)** (class)
    * 
    * An Unsigned Long Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory.
    */
    UnsignedLongIntegerType: prefixer('UnsignedLongIntegerType'),

    /**
    * **[Signed Integer Type](http://qudt.org/schema/qudt/UnsignedMediumIntegerType)** (class)
    * 
    * An "Unsigned Medium Integers" is an integer of 24 bits that only takes on both positive values.
    */
    UnsignedMediumIntegerType: prefixer('UnsignedMediumIntegerType'),

    /**
    * **[Unsigned Short Integer Type](http://qudt.org/schema/qudt/UnsignedShortIntegerType)** (class)
    * 
    * An Unsigned Short Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory.
    */
    UnsignedShortIntegerType: prefixer('UnsignedShortIntegerType'),

    /**
    * **[Unsigned Variable Length Integer Type](http://qudt.org/schema/qudt/UnsignedVariableLengthIntegerType)** (class)
    * 
    * An Unsigned Variable Length Integer data type defines a data structure for representing unsigned integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.
    */
    UnsignedVariableLengthIntegerType: prefixer('UnsignedVariableLengthIntegerType'),

    /**
    * **[Variable Interval Time Series Array Type](http://qudt.org/schema/qudt/VariableIntervalTimeSeriesArray)** (class)
    * 
    * A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random.
    */
    VariableIntervalTimeSeriesArray: prefixer('VariableIntervalTimeSeriesArray'),

    /**
    * **[Variable Interval Time Series Array Type](http://qudt.org/schema/qudt/VariableIntervalTimeSeriesArrayType)** (class)
    * 
    * A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random.
    */
    VariableIntervalTimeSeriesArrayType: prefixer('VariableIntervalTimeSeriesArrayType'),

    /**
    * **[Vector Array Type](http://qudt.org/schema/qudt/VectorArray)** (class)
    * 
    * A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements.
    */
    VectorArray: prefixer('VectorArray'),

    /**
    * **[Vector Array Type](http://qudt.org/schema/qudt/VectorArrayType)** (class)
    * 
    * A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements.
    */
    VectorArrayType: prefixer('VectorArrayType'),

    /**
    * **[Vehicle coordinate system](http://qudt.org/schema/qudt/VehicleCoordinateSystem)** (class)
    * 
    * A sub-type of 'Aerospace coordinate system'. Detailed desciption to be provided in a future version.
    */
    VehicleCoordinateSystem: prefixer('VehicleCoordinateSystem'),

  
  };

export default qudt

