// This file is generated by the build script. Do not edit it manually.
import { prefixer as $prefixer } from '../utilities.js';
const prefixer = $prefixer('http://www.w3.org/2002/07/owl#');

/**
 * [owl](http://www.w3.org/2002/07/owl#})
 */
const owl = {
  /**
    * **[AllDifferent](http://www.w3.org/2002/07/owl#AllDifferent)** (class)
    * 
    * The class of collections of pairwise different individuals.
    */
    AllDifferent: prefixer('AllDifferent'),

    /**
    * **[AllDisjointClasses](http://www.w3.org/2002/07/owl#AllDisjointClasses)** (class)
    * 
    * The class of collections of pairwise disjoint classes.
    */
    AllDisjointClasses: prefixer('AllDisjointClasses'),

    /**
    * **[AllDisjointProperties](http://www.w3.org/2002/07/owl#AllDisjointProperties)** (class)
    * 
    * The class of collections of pairwise disjoint properties.
    */
    AllDisjointProperties: prefixer('AllDisjointProperties'),

    /**
    * **[Annotation](http://www.w3.org/2002/07/owl#Annotation)** (class)
    * 
    * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
    */
    Annotation: prefixer('Annotation'),

    /**
    * **[AnnotationProperty](http://www.w3.org/2002/07/owl#AnnotationProperty)** (class)
    * 
    * The class of annotation properties.
    */
    AnnotationProperty: prefixer('AnnotationProperty'),

    /**
    * **[AsymmetricProperty](http://www.w3.org/2002/07/owl#AsymmetricProperty)** (class)
    * 
    * The class of asymmetric properties.
    */
    AsymmetricProperty: prefixer('AsymmetricProperty'),

    /**
    * **[ObjectProperty](http://www.w3.org/2002/07/owl#ObjectProperty)** (class)
    * 
    * The class of object properties.
    */
    ObjectProperty: prefixer('ObjectProperty'),

    /**
    * **[Axiom](http://www.w3.org/2002/07/owl#Axiom)** (class)
    * 
    * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
    */
    Axiom: prefixer('Axiom'),

    /**
    * **[Class](http://www.w3.org/2002/07/owl#Class)** (class)
    * 
    * The class of OWL classes.
    */
    Class: prefixer('Class'),

    /**
    * **[DataRange](http://www.w3.org/2002/07/owl#DataRange)** (class)
    * 
    * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
    */
    DataRange: prefixer('DataRange'),

    /**
    * **[DatatypeProperty](http://www.w3.org/2002/07/owl#DatatypeProperty)** (class)
    * 
    * The class of data properties.
    */
    DatatypeProperty: prefixer('DatatypeProperty'),

    /**
    * **[DeprecatedClass](http://www.w3.org/2002/07/owl#DeprecatedClass)** (class)
    * 
    * The class of deprecated classes.
    */
    DeprecatedClass: prefixer('DeprecatedClass'),

    /**
    * **[backwardCompatibleWith](http://www.w3.org/2002/07/owl#backwardCompatibleWith)** (property)
    * 
    * The annotation property that indicates that a given ontology is backward compatible with another ontology.
    */
    backwardCompatibleWith: prefixer('backwardCompatibleWith'),

    /**
    * **[DeprecatedProperty](http://www.w3.org/2002/07/owl#DeprecatedProperty)** (class)
    * 
    * The class of deprecated properties.
    */
    DeprecatedProperty: prefixer('DeprecatedProperty'),

    /**
    * **[deprecated](http://www.w3.org/2002/07/owl#deprecated)** (property)
    * 
    * The annotation property that indicates that a given entity has been deprecated.
    */
    deprecated: prefixer('deprecated'),

    /**
    * **[FunctionalProperty](http://www.w3.org/2002/07/owl#FunctionalProperty)** (class)
    * 
    * The class of functional properties.
    */
    FunctionalProperty: prefixer('FunctionalProperty'),

    /**
    * **[incompatibleWith](http://www.w3.org/2002/07/owl#incompatibleWith)** (property)
    * 
    * The annotation property that indicates that a given ontology is incompatible with another ontology.
    */
    incompatibleWith: prefixer('incompatibleWith'),

    /**
    * **[InverseFunctionalProperty](http://www.w3.org/2002/07/owl#InverseFunctionalProperty)** (class)
    * 
    * The class of inverse-functional properties.
    */
    InverseFunctionalProperty: prefixer('InverseFunctionalProperty'),

    /**
    * **[priorVersion](http://www.w3.org/2002/07/owl#priorVersion)** (property)
    * 
    * The annotation property that indicates the predecessor ontology of a given ontology.
    */
    priorVersion: prefixer('priorVersion'),

    /**
    * **[IrreflexiveProperty](http://www.w3.org/2002/07/owl#IrreflexiveProperty)** (class)
    * 
    * The class of irreflexive properties.
    */
    IrreflexiveProperty: prefixer('IrreflexiveProperty'),

    /**
    * **[versionInfo](http://www.w3.org/2002/07/owl#versionInfo)** (property)
    * 
    * The annotation property that provides version information for an ontology or another OWL construct.
    */
    versionInfo: prefixer('versionInfo'),

    /**
    * **[NamedIndividual](http://www.w3.org/2002/07/owl#NamedIndividual)** (class)
    * 
    * The class of named individuals.
    */
    NamedIndividual: prefixer('NamedIndividual'),

    /**
    * **[NegativePropertyAssertion](http://www.w3.org/2002/07/owl#NegativePropertyAssertion)** (class)
    * 
    * The class of negative property assertions.
    */
    NegativePropertyAssertion: prefixer('NegativePropertyAssertion'),

    /**
    * **[Ontology](http://www.w3.org/2002/07/owl#Ontology)** (class)
    * 
    * The class of ontologies.
    */
    Ontology: prefixer('Ontology'),

    /**
    * **[OntologyProperty](http://www.w3.org/2002/07/owl#OntologyProperty)** (class)
    * 
    * The class of ontology properties.
    */
    OntologyProperty: prefixer('OntologyProperty'),

    /**
    * **[ReflexiveProperty](http://www.w3.org/2002/07/owl#ReflexiveProperty)** (class)
    * 
    * The class of reflexive properties.
    */
    ReflexiveProperty: prefixer('ReflexiveProperty'),

    /**
    * **[Restriction](http://www.w3.org/2002/07/owl#Restriction)** (class)
    * 
    * The class of property restrictions.
    */
    Restriction: prefixer('Restriction'),

    /**
    * **[allValuesFrom](http://www.w3.org/2002/07/owl#allValuesFrom)** (property)
    * 
    * The property that determines the class that a universal property restriction refers to.
    */
    allValuesFrom: prefixer('allValuesFrom'),

    /**
    * **[SymmetricProperty](http://www.w3.org/2002/07/owl#SymmetricProperty)** (class)
    * 
    * The class of symmetric properties.
    */
    SymmetricProperty: prefixer('SymmetricProperty'),

    /**
    * **[annotatedProperty](http://www.w3.org/2002/07/owl#annotatedProperty)** (property)
    * 
    * The property that determines the predicate of an annotated axiom or annotated annotation.
    */
    annotatedProperty: prefixer('annotatedProperty'),

    /**
    * **[TransitiveProperty](http://www.w3.org/2002/07/owl#TransitiveProperty)** (class)
    * 
    * The class of transitive properties.
    */
    TransitiveProperty: prefixer('TransitiveProperty'),

    /**
    * **[annotatedSource](http://www.w3.org/2002/07/owl#annotatedSource)** (property)
    * 
    * The property that determines the subject of an annotated axiom or annotated annotation.
    */
    annotatedSource: prefixer('annotatedSource'),

    /**
    * **[Thing](http://www.w3.org/2002/07/owl#Thing)** (class)
    * 
    * The class of OWL individuals.
    */
    Thing: prefixer('Thing'),

    /**
    * **[annotatedTarget](http://www.w3.org/2002/07/owl#annotatedTarget)** (property)
    * 
    * The property that determines the object of an annotated axiom or annotated annotation.
    */
    annotatedTarget: prefixer('annotatedTarget'),

    /**
    * **[Nothing](http://www.w3.org/2002/07/owl#Nothing)** (class)
    * 
    * This is the empty class.
    */
    Nothing: prefixer('Nothing'),

    /**
    * **[assertionProperty](http://www.w3.org/2002/07/owl#assertionProperty)** (property)
    * 
    * The property that determines the predicate of a negative property assertion.
    */
    assertionProperty: prefixer('assertionProperty'),

    /**
    * **[cardinality](http://www.w3.org/2002/07/owl#cardinality)** (property)
    * 
    * The property that determines the cardinality of an exact cardinality restriction.
    */
    cardinality: prefixer('cardinality'),

    /**
    * **[complementOf](http://www.w3.org/2002/07/owl#complementOf)** (property)
    * 
    * The property that determines that a given class is the complement of another class.
    */
    complementOf: prefixer('complementOf'),

    /**
    * **[datatypeComplementOf](http://www.w3.org/2002/07/owl#datatypeComplementOf)** (property)
    * 
    * The property that determines that a given data range is the complement of another data range with respect to the data domain.
    */
    datatypeComplementOf: prefixer('datatypeComplementOf'),

    /**
    * **[differentFrom](http://www.w3.org/2002/07/owl#differentFrom)** (property)
    * 
    * The property that determines that two given individuals are different.
    */
    differentFrom: prefixer('differentFrom'),

    /**
    * **[disjointUnionOf](http://www.w3.org/2002/07/owl#disjointUnionOf)** (property)
    * 
    * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
    */
    disjointUnionOf: prefixer('disjointUnionOf'),

    /**
    * **[disjointWith](http://www.w3.org/2002/07/owl#disjointWith)** (property)
    * 
    * The property that determines that two given classes are disjoint.
    */
    disjointWith: prefixer('disjointWith'),

    /**
    * **[distinctMembers](http://www.w3.org/2002/07/owl#distinctMembers)** (property)
    * 
    * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
    */
    distinctMembers: prefixer('distinctMembers'),

    /**
    * **[equivalentClass](http://www.w3.org/2002/07/owl#equivalentClass)** (property)
    * 
    * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
    */
    equivalentClass: prefixer('equivalentClass'),

    /**
    * **[equivalentProperty](http://www.w3.org/2002/07/owl#equivalentProperty)** (property)
    * 
    * The property that determines that two given properties are equivalent.
    */
    equivalentProperty: prefixer('equivalentProperty'),

    /**
    * **[hasKey](http://www.w3.org/2002/07/owl#hasKey)** (property)
    * 
    * The property that determines the collection of properties that jointly build a key.
    */
    hasKey: prefixer('hasKey'),

    /**
    * **[hasSelf](http://www.w3.org/2002/07/owl#hasSelf)** (property)
    * 
    * The property that determines the property that a self restriction refers to.
    */
    hasSelf: prefixer('hasSelf'),

    /**
    * **[hasValue](http://www.w3.org/2002/07/owl#hasValue)** (property)
    * 
    * The property that determines the individual that a has-value restriction refers to.
    */
    hasValue: prefixer('hasValue'),

    /**
    * **[intersectionOf](http://www.w3.org/2002/07/owl#intersectionOf)** (property)
    * 
    * The property that determines the collection of classes or data ranges that build an intersection.
    */
    intersectionOf: prefixer('intersectionOf'),

    /**
    * **[inverseOf](http://www.w3.org/2002/07/owl#inverseOf)** (property)
    * 
    * The property that determines that two given properties are inverse.
    */
    inverseOf: prefixer('inverseOf'),

    /**
    * **[maxCardinality](http://www.w3.org/2002/07/owl#maxCardinality)** (property)
    * 
    * The property that determines the cardinality of a maximum cardinality restriction.
    */
    maxCardinality: prefixer('maxCardinality'),

    /**
    * **[maxQualifiedCardinality](http://www.w3.org/2002/07/owl#maxQualifiedCardinality)** (property)
    * 
    * The property that determines the cardinality of a maximum qualified cardinality restriction.
    */
    maxQualifiedCardinality: prefixer('maxQualifiedCardinality'),

    /**
    * **[members](http://www.w3.org/2002/07/owl#members)** (property)
    * 
    * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
    */
    members: prefixer('members'),

    /**
    * **[minCardinality](http://www.w3.org/2002/07/owl#minCardinality)** (property)
    * 
    * The property that determines the cardinality of a minimum cardinality restriction.
    */
    minCardinality: prefixer('minCardinality'),

    /**
    * **[minQualifiedCardinality](http://www.w3.org/2002/07/owl#minQualifiedCardinality)** (property)
    * 
    * The property that determines the cardinality of a minimum qualified cardinality restriction.
    */
    minQualifiedCardinality: prefixer('minQualifiedCardinality'),

    /**
    * **[onClass](http://www.w3.org/2002/07/owl#onClass)** (property)
    * 
    * The property that determines the class that a qualified object cardinality restriction refers to.
    */
    onClass: prefixer('onClass'),

    /**
    * **[onDataRange](http://www.w3.org/2002/07/owl#onDataRange)** (property)
    * 
    * The property that determines the data range that a qualified data cardinality restriction refers to.
    */
    onDataRange: prefixer('onDataRange'),

    /**
    * **[onDatatype](http://www.w3.org/2002/07/owl#onDatatype)** (property)
    * 
    * The property that determines the datatype that a datatype restriction refers to.
    */
    onDatatype: prefixer('onDatatype'),

    /**
    * **[onProperties](http://www.w3.org/2002/07/owl#onProperties)** (property)
    * 
    * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
    */
    onProperties: prefixer('onProperties'),

    /**
    * **[onProperty](http://www.w3.org/2002/07/owl#onProperty)** (property)
    * 
    * The property that determines the property that a property restriction refers to.
    */
    onProperty: prefixer('onProperty'),

    /**
    * **[oneOf](http://www.w3.org/2002/07/owl#oneOf)** (property)
    * 
    * The property that determines the collection of individuals or data values that build an enumeration.
    */
    oneOf: prefixer('oneOf'),

    /**
    * **[propertyChainAxiom](http://www.w3.org/2002/07/owl#propertyChainAxiom)** (property)
    * 
    * The property that determines the n-tuple of properties that build a sub property chain of a given property.
    */
    propertyChainAxiom: prefixer('propertyChainAxiom'),

    /**
    * **[propertyDisjointWith](http://www.w3.org/2002/07/owl#propertyDisjointWith)** (property)
    * 
    * The property that determines that two given properties are disjoint.
    */
    propertyDisjointWith: prefixer('propertyDisjointWith'),

    /**
    * **[qualifiedCardinality](http://www.w3.org/2002/07/owl#qualifiedCardinality)** (property)
    * 
    * The property that determines the cardinality of an exact qualified cardinality restriction.
    */
    qualifiedCardinality: prefixer('qualifiedCardinality'),

    /**
    * **[sameAs](http://www.w3.org/2002/07/owl#sameAs)** (property)
    * 
    * The property that determines that two given individuals are equal.
    */
    sameAs: prefixer('sameAs'),

    /**
    * **[someValuesFrom](http://www.w3.org/2002/07/owl#someValuesFrom)** (property)
    * 
    * The property that determines the class that an existential property restriction refers to.
    */
    someValuesFrom: prefixer('someValuesFrom'),

    /**
    * **[sourceIndividual](http://www.w3.org/2002/07/owl#sourceIndividual)** (property)
    * 
    * The property that determines the subject of a negative property assertion.
    */
    sourceIndividual: prefixer('sourceIndividual'),

    /**
    * **[targetIndividual](http://www.w3.org/2002/07/owl#targetIndividual)** (property)
    * 
    * The property that determines the object of a negative object property assertion.
    */
    targetIndividual: prefixer('targetIndividual'),

    /**
    * **[targetValue](http://www.w3.org/2002/07/owl#targetValue)** (property)
    * 
    * The property that determines the value of a negative data property assertion.
    */
    targetValue: prefixer('targetValue'),

    /**
    * **[unionOf](http://www.w3.org/2002/07/owl#unionOf)** (property)
    * 
    * The property that determines the collection of classes or data ranges that build a union.
    */
    unionOf: prefixer('unionOf'),

    /**
    * **[withRestrictions](http://www.w3.org/2002/07/owl#withRestrictions)** (property)
    * 
    * The property that determines the collection of facet-value pairs that define a datatype restriction.
    */
    withRestrictions: prefixer('withRestrictions'),

    /**
    * **[bottomObjectProperty](http://www.w3.org/2002/07/owl#bottomObjectProperty)** (property)
    * 
    * The object property that does not relate any two individuals.
    */
    bottomObjectProperty: prefixer('bottomObjectProperty'),

    /**
    * **[topObjectProperty](http://www.w3.org/2002/07/owl#topObjectProperty)** (property)
    * 
    * The object property that relates every two individuals.
    */
    topObjectProperty: prefixer('topObjectProperty'),

    /**
    * **[bottomDataProperty](http://www.w3.org/2002/07/owl#bottomDataProperty)** (property)
    * 
    * The data property that does not relate any individual to any data value.
    */
    bottomDataProperty: prefixer('bottomDataProperty'),

    /**
    * **[topDataProperty](http://www.w3.org/2002/07/owl#topDataProperty)** (property)
    * 
    * The data property that relates every individual to every data value.
    */
    topDataProperty: prefixer('topDataProperty'),

    /**
    * **[imports](http://www.w3.org/2002/07/owl#imports)** (property)
    * 
    * The property that is used for importing other ontologies into a given ontology.
    */
    imports: prefixer('imports'),

    /**
    * **[versionIRI](http://www.w3.org/2002/07/owl#versionIRI)** (property)
    * 
    * The property that identifies the version IRI of an ontology.
    */
    versionIRI: prefixer('versionIRI'),

  
  };

export default owl

